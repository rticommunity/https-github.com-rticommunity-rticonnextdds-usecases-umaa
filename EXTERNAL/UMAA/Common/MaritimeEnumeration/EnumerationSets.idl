/**
 *
 * DISTRIBUTION STATEMENT A. Approved for public release. Distribution is unlimited.
 *
 */  

/**
 *
 * This file was generated by the UxSDK+ tool. Please see
 * https://bitbucket.di2e.net/projects/UXSDK/repos/uxsdk
 * for more information
 *
 */

// WARNING: THIS CODE IS AUTO-GENERATED
//   DO NOT EDIT

#ifndef _LDM_MDE_REFINEMENTS_ENUMERATIONSETS_ENUMERATIONSETS
#define _LDM_MDE_REFINEMENTS_ENUMERATIONSETS_ENUMERATIONSETS

#include "BasicTypes/Quaternion.idl"

//@copy-c #undef ERROR
//@copy-c #undef VARIABLE_PITCH
//@copy-c #undef DELETE
//@copy-c #undef PLATFORM

module UMAA
{
  module Common
  {
    module MaritimeEnumeration
    {


        module AnalogSensorErrorCodeEnumType
        {
          enum AnalogSensorErrorCodeEnumType
          {
              INVALID_FORMAT, // Invalid format
              UNKNOWN_ERROR_FAULT, // Unknown error fault
              UNKNOWN_SENSOR_ID // Unknown sensor ID
          };
        };

        module AnchorActionEnumType
        {
          enum AnchorActionEnumType
          {
              LOWER, // Lower the anchor.
              RAISE, // Raise the anchor.
              STOP // Stop anchor from lowering or raising.
          };
        };

        module AnchorKindEnumType
        {
          enum AnchorKindEnumType
          {
              COMMERCIAL_STOCKLESS, // Anchor type is commercial stockless.
              DANFORTH, // Anchor type is danforth.
              FOUR_FLUKE, // Anchor type is four-fluke.
              GENERAL, // Anchor type is general.
              LIGHTWEIGHT, // Anchor type is lightweight.
              MARK_2_LWT, // Anchor type is mark 2 lightweight.
              MARK_2_STOCKLESS, // Anchor type is mark 2 stockless.
              MUSHROOM, // Anchor type is mushroom.
              NAVY_TYPE_STOCK, // Anchor type is navy type stock.
              NONMAGNETIC, // Anchor type is nonmagnetic.
              STANDARD_NAVY_STOCKLESS, // Anchor type is standard navy stockless.
              TWO_FLUKE_BALANCED_FLUKE, // Anchor type is two-fluke balanced fluke.
              WEDGE_BLOCK_LWT // Anchor type is wedge block lightweight.
          };
        };

        module AnchorLocationEnumType
        {
          enum AnchorLocationEnumType
          {
              BOWER, // A bower anchor is carried on the bow.
              KEEL, // A keel anchor is housed within the hull neer the keel.
              STERN // A stern anchor is carried on the stern.
          };
        };

        module AnchorStateEnumType
        {
          enum AnchorStateEnumType
          {
              DEPLOYED, // Anchor is deployed.
              LOWERING, // Anchor is lowering.
              STOPPED, // Anchor is neither DEPLOYED nor STOWED, but is not in the process of LOWERING or RAISING.
              RAISING, // Anchor is raising.
              STOWED // Anchor is stowed.
          };
        };

        module AudioEncodingQualityEnumType
        {
          enum AudioEncodingQualityEnumType
          {
              AVERAGE, // Average
              BEST, // Best
              BETTER, // Better
              GOOD, // Good
              LESS, // Less
              POOR, // Poor
              WORST // Worst
          };
        };

        module BearingAngleEnumType
        {
          enum BearingAngleEnumType
          {
              OWNSHIP, // Angle is relative to ownship
              NORTH // Angle is relative to true north
          };
        };

        module BilgeControlEnumType
        {
          enum BilgeControlEnumType
          {
              AUTO, // Bilge will automatically be turned on by the service when flood is detected in its responsible area
              OFF, // Off
              ON // On
          };
        };

        module BilgeStateEnumType
        {
          enum BilgeStateEnumType
          {
              FAULT, // Fault
              OFF, // Off
              ON // On
          };
        };

        module BitDepthEnumType
        {
          enum BitDepthEnumType
          {
              TEN_BITS, // 10 bit
              TWELVE_BITS, // 12 bit
              FOURTEEN_BITS, // 14 bit
              SIXTEEN_BITS, // 16 bit
              TWENTY_BITS, // 20 bit
              TWENTY_FOUR_BITS, // 24 bit
              THIRTY_TWO_BITS, // 32 bit
              FOURTY_BITS, // 40 bit
              FOURTY_EIGHT_BITS, // 48 bit
              FIFTY_SIX_BITS, // 56 bit
              SIXTY_FOUR_BITS, // 64 bit
              EIGHT_BITS // 8 bit
          };
        };

        module BlastConditionEnumType
        {
          enum BlastConditionEnumType
          {
              BLASTING, // Unmanned vehicle whistle, bell, or gong is currently blasting
              RESTING // Unmanned vehicle whistle, bell, or gong is currently resting
          };
        };

        module BlastKindEnumType
        {
          enum BlastKindEnumType
          {
              LONG_BLAST, // Long blast, four to six seconds
              SHORT_BLAST // Short blast, about one second duration
          };
        };

        module CollisionAvoidStateEnumType
        {
          enum CollisionAvoidStateEnumType
          {
              DEVIATE_FROM_PATH, // Deviate from path to avoid collisions
              DO_NOTHING, // Do nothing
              STOP_ON_PATH // Stop on path
          };
        };

        module CollisionAvoidStatusEnumType
        {
          enum CollisionAvoidStatusEnumType
          {
              ACTIVE_AVOID_OBSTACLE, // Active, avoid obstacle
              ACTIVE_STOP_ON_OBSTACLE, // Active, stop on obstacle
              DISABLED, // Disabled
              ENABLED // Enabled
          };
        };

        module COLREGSClassificationEnumType
        {
          enum COLREGSClassificationEnumType
          {
              POWER_DRIVEN_UNDERWAY, // The term power-driven vessel means any vessel propelled by machinery.
              SAILING, // The term sailing vessel means any vessel under sail provided that propelling machinery, if fitted, is not being used.
              FISHING, // The term vessel engaged in fishing means any vessel fishing with nets, lines, trawls, or other fishing apparatus which restricts maneuverability, but does not include a vessel fishing with trolling lines or other fishing apparatus which do not restrict maneuverability.
              NOT_UNDER_COMMAND, // The term vessel not under command means a vessel which, through some exceptional circumstance, is unable to maneuver as required by these Rules and is therefore unable to keep out of the way of another vessel.
              RESTRICTED_IN_ABILITY_TO_MANUEVER, // The term vessel restricted in her ability to maneuver means a vessel which, from the nature of her work, is restricted in her ability to maneuver as required by these Rules and is therefore unable to keep out of the way of another vessel.
              ANCHORED, // The vehicle is currently anchored.
              CONSTRAINED_BY_DRAUGHT, // The vehicle is limited in its navigational capabilities by its draught.
              PUSHING, // The vessel is engaged in a pushing operation such as severely restricts the pushing vessel and her push in their ability to deviate from their course.
              TOWING, // The vessel is engaged in a towing operation such as severely restricts the towing vessel and her tow in their ability to deviate from their course.
              NON_VESSEL // This value refers to contacts that are determined to be not vessels (buoy, land, etc) where COLREGS does not apply.
          };
        };

        module CommandStatusReasonEnumType
        {
          enum CommandStatusReasonEnumType
          {
              CANCELED, // Indicates a transition to the CANCELED state when the command is canceled successfully.
              VALIDATION_FAILED, // Indicates a transition to the FAILED state when the command contains missing, out-of-bounds, or otherwise invalid parameters.
              OBJECTIVE_FAILED, // Indicates a transition to the FAILED state when the commanded resource is unable to achieve the command's objective due to external factors.
              SERVICE_FAILED, // Indicates a transition to the FAILED state when the commanded resource is unable to achieve the command's objective due to processing failure.
              RESOURCE_FAILED, // Indicates a transition to the FAILED state when the commanded resource is unable to achieve the command's objective due to resource or platform failure.
              RESOURCE_REJECTED, // Indicates a transition to the FAILED state when the commanded resource rejects the command for some reason.
              INTERRUPTED, // Indicates a transition to the FAILED state when the command has been interrupted by a higher priority process.
              TIMEOUT, // Indicates a transition to the FAILED state when the command is not acknowledged within some defined time bound.
              SUCCEEDED // Indicates the conditions to proceed to this state have been met and a normal state transition has occurred.
          };
        };

        module ContactManeuverInfluenceEnumType
        {
          enum ContactManeuverInfluenceEnumType
          {
              BEING_OVERTAKEN_COMPLIANT, // COLREGS being overtaken where the other vessel is determined to be compliant
              BEING_OVERTAKEN_NONCOMPLIANT, // COLREGS being overtaken where the other vessel is determined to be non-compliant
              CROSSING_LEFT_COMPLIANT, // COLREGS crossing left where the other vessel is determined to be compliant
              CROSSING_LEFT_NONCOMPLIANT, // COLREGS crossing left where the other vessel is determined to be non-compliant
              CROSSING_RIGHT_COMPLIANT, // COLREGS crossing right where the other vessel is determined to be compliant
              CROSSING_RIGHT_NONCOMPLIANT, // COLREGS crossing right where the other vessel is determined to be non-compliant
              HEAD_ON_COMPLIANT, // COLREGS head on where the other vessel is determined to be compliant
              HEAD_ON_NONCOMPLIANT, // COLREGS head on where the other vessel is determined to be non-compliant
              OVERTAKING_COMPLIANT, // COLREGS overtaking where the other vessel is determined to be compliant
              OVERTAKING_NONCOMPLIANT, // COLREGS overtaking where the other vessel is determined to be non-compliant
              GUIDE, // Contact is guiding or informing maneuvering (e.g., guide vessel for Stationkeep, cooperating swarm member)
              IN_EXTREMIS, // Determined in a situation where collision can no longer be avoided by one ship acting alone
              COLLISION_AVOIDANCE, // Maneuvering to avoid a dynamic obstacle
              PREEMPTIVE, // Maneuvering to avoid a perceived future state but not in direct response to configured obstacle avoidance thresholds
              OBSTACLE_AVOIDANCE, // Maneuvering to avoid a static obstacle
              NONE // The contact has been examined and it was determined it has no influence on the maneuvering
          };
        };

        module ContingencyBehaviorEnumType
        {
          enum ContingencyBehaviorEnumType
          {
              CONTINUE, // Continue the mission
              FINISH, // Finish the mission
              LOITER, // Loiter
              NONE, // None
              VEHICLE_SPECIFIC, // None of the above (specific to the vehicle)
              _HOME // Return to home
          };
        };

        module CoordinateSystemEnumType
        {
          enum CoordinateSystemEnumType
          {
              SENSOR_COORDINATE_SYSTEM, // Sensor relative coordinate system
              VEHICLE_COORDINATE_SYSTEM // Vehicle relative coordinate system
          };
        };

        module CoreStateEnumType
        {
          enum CoreStateEnumType
          {
              EMERGENCY, // Emergency
              FAILURE, // Failure
              INITIAL, // Initial
              READY, // Ready
              RESET, // Reset
              RESUME, // Resume
              SHUTDOWN, // Shutdown
              STANDBY // Standby
          };
        };

        module DigitalAudioFormatEnumType
        {
          enum DigitalAudioFormatEnumType
          {
              AAC_MPEG2, // AAC_MPEG2
              AAC_MPEG4, // AAC_MPEG4
              AIFF, // AIFF
              ALAC, // ALAC
              DOLBY_DIGITAL, // DolbyDigital
              DTS, // DTS
              FLAC, // FLAC
              LPCM_PCM, // LPCM_PCM
              MP2, // MP2
              MP3, // MP3
              REAL_AUDIO, // RealAudio
              SPEEX, // Speex
              TRUE_AUDIO, // TrueAudio
              ULAW, // uLaw (from DigitalAudioAnnunciator service)
              VORBIS, // VORBIS
              WAV, // WAV
              WMA, // WMA
              WMA9_LOSS_LESS // WMA9_LOSSLESS
          };
        };

        module DigitalSensorErrorCodeEnumType
        {
          enum DigitalSensorErrorCodeEnumType
          {
              INVALID_FORMAT, // Invalid format
              INVALID_FRAME_SIZE, // Invalid frame size
              INVALID_MAX_BIT_RATE, // Invalid maximum bit rate
              INVALID_MAX_FRAME_RATE, // Invalid maximum frame rate
              INVALID_MIN_BIT_RATE, // Invalid minimum bit rate
              INVALID_MIN_FRAME_RATE, // Invalid minimum frame rate
              MULTIPLE_INVALID_PARAMETERS, // Multiple invalid parameters
              UNKNOWN_ERROR_FAULT, // Unknown error fault
              UNKNOWN_SENSOR_ID // Unknown sensor ID
          };
        };

        module DomainEnumType
        {
          enum DomainEnumType
          {
              AIR, // Air
              GROUND, // Surface, ground
              SURFACE, // Surface, water
              UNDERSEA // Undersea
          };
        };

        module EngineKindEnumType
        {
          enum EngineKindEnumType
          {
              DIESEL, // A diesel engine.
              GAS // A gas engine.
          };
        };

        module ErrorCodeEnumType
        {
          enum ErrorCodeEnumType
          {
              ACTUATOR, // Actuator
              FILESYS, // File system
              NONE, // None
              POWER, // Power
              PROCESSOR, // Processor
              RAM, // RAM
              ROM, // ROM
              SENSOR, // Sensor
              SOFTWARE // Software
          };
        };

        module ErrorConditionEnumType
        {
          enum ErrorConditionEnumType
          {
              INFO, // An error condition is reported, but impact on operation and performance is minimal.
              WARN, // An error condition is reported and expected to have significant impact on component or device performance.
              ERROR, // An error condition is reported and expected to seriously compromise use of the reporting component or device.
              FAIL, // An error condition is reported with severity indicating component or device failure.
              NONE // Indicates that no error condition exists.
          };
        };

        module ExposureModeEnumType
        {
          enum ExposureModeEnumType
          {
              AUTO_DEFAULT, // Auto default
              MANUAL, // Manual
              APETURE_PRIORITY, // Manual aperture, automatic shutter speed
              SHUTTER_PRIORITY // Manual shutter speed, automatic aperture
          };
        };

        module FrameSizeEnumType
        {
          enum FrameSizeEnumType
          {
              CGA_320x200, // CGA_320x200
              CIF_1408x1152, // CIF_1408x1152
              CIF_352x288, // CIF_352x288
              CIF_704x576, // CIF_704x576
              EGA_640x350, // EGA_640x350
              HD1080_1920x1080, // HD1080_1920x1080
              HD480_852x480, // HD480_852x480
              HD720_1280x720, // HD720_1280x720
              HSXGA_5120x4096, // HSXGA_5120x4096
              QCIF_176x144, // QCIF_176x144
              QQVGA_160x120, // QQVGA_160x120
              QSXGA_2560x2048, // QSXGA_2560x2048
              QVGA_320x240, // QVGA_320x240
              QXGA_2048x1536, // QXGA_2048x1536
              SQCIF_128x96, // SQCIF_128x96
              SVGA_800x600, // SVGA_800x600
              SXGA_1280x1024, // SXGA_1280x1024
              UXGA_1600x1200, // UXGA_1600x1200
              VGA_640x480, // VGA_640x480
              WHSXGA_6400x4096, // WHSXGA_6400x4096
              WHUXGA_7680x4800, // WHUXGA_7680x4800
              WOXGA_2560x1600, // WOXGA_2560x1600
              WQSXGA_3200x2048, // WQSXGA_3200x2048
              WQUXGA_3840x2400, // WQUXGA_3840x2400
              WSXGA_1600x1024, // WSXGA_1600x1024
              WUXGA_1920x1200, // WUXGA_1920x1200
              WVGA_852x480, // WVGA_852x480
              WXGA_1366x768, // WXGA_1366x768
              XGA_1024x768 // XGA_1024x768
          };
        };

        module GPSConstellationEnumType
        {
          enum GPSConstellationEnumType
          {
              UNKNOWN, // An unknown constellation.
              BEIDOU, // The Beidou constellation.
              GALILEO, // The Galileo constellation.
              GLONASS, // The Glonass constellation.
              GPS, // The GPS constellation.
              IRNSS, // The IRNSS constellation.
              QZSS, // The QZSS constellation.
              SBAS // The SBAS constellation.
          };
        };

        module GPSFixEnumType
        {
          enum GPSFixEnumType
          {
              INITIATING, // Initiating GPS Fix
              PERFORMING, // Performing GPS Fix
              STABLE // Stable GPS Fix
          };
        };

        module GPSNavigationSolutionEnumType
        {
          enum GPSNavigationSolutionEnumType
          {
              GPS_1, // GPS 1
              GPS_2, // GPS 2
              GPS_2D, // GPS 2D
              GPS_3, // GPS 3
              GPS_3D, // GPS 3D
              GPS_4, // GPS 4
              GPS_DEAD_RECK, // GPS dead reckoning
              NO_NAV // No navigation information
          };
        };

        module GuardedTeleoperationStatusEnumType
        {
          enum GuardedTeleoperationStatusEnumType
          {
              DISABLED, // Disabled
              ENABLED, // Enabled but not active
              ACTIVE_AVOID_OBSTACLE, // Vehicle has deviated from path to avoid obstacle
              PITCHOVER_LIMIT, // Vehicle has stopped because pitchover limit was reached
              ROLLOVER_LIMIT, // Vehicle has stopped because rollover limit was reached
              ACTIVE_STOP_ON_OBSTACLE // Vehicle has stopped on path due to an obstacle
          };
        };

        module H264EncodingEnumType
        {
          enum H264EncodingEnumType
          {
              BASELINE, // Baseline
              CAVLC444, // CAVLC 444
              CONSTRAINED_BASELINE, // Constrained baseline
              CONSTRAINED_HIGH, // Constrained high
              EXTENDED, // Extended
              HIGH, // High
              HIGH10, // High 10
              HIGH10_INTRA, // High 10 Intra
              HIGH422, // High 422
              HIGH422_INTRA, // High 422 Intra
              HIGH444_INTRA, // High 444 Intra
              HIGH444_PREDICTIVE, // High 444 predictive
              MAIN, // Main
              MULTIVIEW_HIGH, // Multiview high
              PROGRESSIVE_HIGH, // Progressive high
              SCALABLE_BASELINE, // Scalable baseline
              SCALABLE_CONSTRAINED_BASELINE, // Scalable constrained baseline
              SCALABLE_CONSTRAINED_HIGH, // Scalable constrained high
              SCALABLE_HIGH, // Scalable high
              SCALABLE_HIGH_INTRA, // Scalable high intra
              STEREO_HIGH // Stereo high
          };
        };

        module H264PresetEnumType
        {
          enum H264PresetEnumType
          {
              BEST_QUALITY, // Best quality
              DRIVE_VISION, // Drive vision
              LOW_LATENCY, // Low latency
              MANIPULATION, // Manipulation
              PERSISTENT_STARE, // Persistent stare
              PROGRAM_SPECIFIC_1, // Program Specific 1
              PROGRAM_SPECIFIC_2, // Program Specific 2
              PROGRAM_SPECIFIC_3, // Program Specific 3
              PROGRAM_SPECIFIC_4, // Program Specific 4
              SLOW_COMMS // Slow comms
          };
        };

        module HandoverResultEnumType
        {
          enum HandoverResultEnumType
          {
              DEFERRED, // Control handover deferred temporarily by current controller
              DENIED, // Control handover denied by current controller
              GRANTED, // Control handover granted by current controller
              TIMEOUT, // Control handover timed out because current controller did not respond in the allotted time
              INSUFFICIENT_AUTHORITY, // Control transfer requestor had insufficient authority to take control from current controller
              NOT_AVAILABLE // Vehicle is unavailable for control handover
          };
        };

        module HeadingReferenceEnumType
        {
          enum HeadingReferenceEnumType
          {
              MAGNETIC_NORTH, // Angle is relative to magnetic north
              TRUE_NORTH, // Angle is relative to true north
              WIND_DIRECTION // Angle is relative to wind direction
          };
        };

        module HeightModeEnumType
        {
          enum HeightModeEnumType
          {
              ALTITUDE, // Height value is distance above sea-floor.
              DEPTH // Height value is distance below sea surface.
          };
        };

        module HoverKindEnumType
        {
          enum HoverKindEnumType
          {
              LAT_LON_PRIORITY, // Prioritize maintaining a latitude/longitude position
              Z_PRIORITY // Prioritize maintaining an elevation
          };
        };

        module IgnitionStateEnumType
        {
          enum IgnitionStateEnumType
          {
              OFF, // The engine is off.
              RUN, // The engine is running.
              START // The engine is starting.
          };
        };

        module ImageFormatEnumType
        {
          enum ImageFormatEnumType
          {
              BMP, // BMP
              CR2_RAW, // CR2 (Canon RAW)
              DNG, // DNG (Adobe RAW)
              GIF, // GIF
              JPEG, // JPEG (default)
              NEF, // NEF (Nikon RAW)
              PGM, // PGM
              PNG, // PNG
              PNM, // PNM
              PPM, // PPM
              TIFF // TIFF
          };
        };

        module ImagingModeEnumType
        {
          enum ImagingModeEnumType
          {
              COLOR, // Default color mode
              GREYSCALE, // Greyscale
              INFRARED, // Infrared
              LOWLIGHT // Lowlight
          };
        };

        module InertialSensorOpStatusEnumType
        {
          enum InertialSensorOpStatusEnumType
          {
              COURSE_GPS_ALIGNMENT, // Course GPS alignment
              COURSE_STATIONARY_ALIGNMENT, // Course stationary alignment
              FINE_GPS_ALIGNMENT_COMPLETE, // Fine GPS alignment complete
              FINE_GPS_ALIGNMENT_STARTED, // Fine GPS alignment started
              FINE_STATIONARY_ALIGNMENT_COMPLETE, // Fine stationary alignment complete
              FINE_STATIONARY_ALIGNMENT_STARTED, // Fine stationary alignment started
              INERTIAL_SENSOR_FAILURE, // Inertial sensor failure
              INIT, // Initializing
              OPERATIONAL // Operational
          };
        };

        module InertialSensorStateEnumType
        {
          enum InertialSensorStateEnumType
          {
              OFF, // Off
              ON, // On
              RESTARTING // Restarting
          };
        };

        module LightSensitivityEnumType
        {
          enum LightSensitivityEnumType
          {
              AUTO_DEFAULT, // Auto default
              ISO_100, // ISO 100
              ISO_1600, // ISO 1600
              ISO_200, // ISO 200
              ISO_3200, // ISO 3200
              ISO_400, // ISO 400
              ISO_800 // ISO 800
          };
        };

        module LostCommsStatusEnumType
        {
          enum LostCommsStatusEnumType
          {
              ACTIVE, // Active
              DISABLED, // Disabled
              ENABLED // Enabled
          };
        };

        module MastActionEnumType
        {
          enum MastActionEnumType
          {
              LOWER, // set to lower the mast down
              RAISE, // set to raise the mast up
              STOP // set to stop the mast
          };
        };

        module MastStateEnumType
        {
          enum MastStateEnumType
          {
              DOWN, // set when the mast is down
              MOVING_DOWN, // set when the mast is moving down
              MOVING_UP, // set when the mast is moving up
              UP // set when the mast is up
          };
        };

        module CommandStatusEnumType
        {
          enum CommandStatusEnumType
          {
              FAILED, // The command has been attempted, but was not successful.
              COMPLETED, // The command has been completed successfully.
              ISSUED, // The command has been issued to the resource (typically a sensor or streaming device), but processing has not yet commenced.
              COMMANDED, // The command has been placed in the resource's command queue but has not yet been accepted.
              EXECUTING, // The command is being performed by the resource and has not yet been completed.
              CANCELED // The command was canceled by the requestor before the command completed successfully.
          };
        };

        module DataEncodingEnumType
        {
          enum DataEncodingEnumType
          {
              AVI, // AVI
              H_261, // H.261
              H_262, // H.262
              H_263, // H.263
              H_263PLUS, // H.263 Plus
              H_264, // H.264
              MJPEG, // MJPEG
              MPEG_1, // MPEG-1
              MPEG_2, // MPEG-2
              MPEG_4, // MPEG-4
              NONE // None
          };
        };

        module FeatureKindEnumType
        {
          enum FeatureKindEnumType
          {
              CONTACT, // Contact
              OTHER // Other
          };
        };

        module LoiterKindEnumType
        {
          enum LoiterKindEnumType
          {
              CIRCLE, // The loiter type is a circular pattern.
              RACETRACK // The loiter type is a racetrack pattern.
          };
        };

        module TaskStateEnumType
        {
          enum TaskStateEnumType
          {
              PLANNED_PENDING_APPROVAL, // The desired/reported state of the task is that a detailed mission plan with route has been created from the allocated tasks and approval is pending.
              AWAITING_EXECUTION_APPROVAL, // The desired/reported state of the task is that execution approval has been requested.
              ALLOCATED, // The desired/reported state of the task is that it has been allocated. The task allocation has been completed and approval has been granted.
              EXECUTION_APPROVED, // The desired/reported state of the task is that it has been approved for execution.
              CANCELED, // The desired/reported state of the task is that it has been cancelled.
              COMPLETED, // The desired/reported state of the task is that it has been completed. Collection tasks are considered complete when the resulting product is processed and disseminated. All other tasks are complete once the vehicle transitions from the executing state (vehicle releases weapon, stops jamming, etc.).
              DROPPED, // The desired/reported state of the task is that it has been dropped; the task is subject for reallocation within the UxS node.
              PLANNED, // The desired/reported state of the task is that it has been planned, indicating that the task is part of an approved and active detailed mission plan.
              PROPOSED, // The desired/reported state of the task is that it has been proposed to an allocation service.
              QUEUED, // The desired/reported state of the task is that it has been queued for execution.
              EXECUTING, // The desired/reported state of the task is that it has begun execution (slews sensor and begins collect, begins to prepare weapons for release, starts jamming, etc.). This state defines the point of no return for a task. Once a task transitions to this state, it can no longer be reallocated to another UxS or vehicle unless it transitions to the FAILED state.
              FAILED, // The desired/reported state of the task is that it has failed. The UxS node has determined that no vehicles within the UxS can achieve the task.
              UNALLOCATED, // The desired/reported state of the task is that it is unallocated. The task could not be allocated to a system, or the task has just been created.
              ALLOCATED_PENDING_APPROVAL, // The desired/reported state of the task is that task allocation has been completed and approval is pending.
              AWAITING_MISSION_PLAN, // Used at initial state when there is no mission plan reported.
              PAUSED, // Used to pause the execution of an approved mission plan, approved mission task, or approved mission objective.
              QUEUING, // Used when mission plan, mission task, or mission objective is being queued (e.g., uploading to vehicle) for execution
              PLANNING // Used when mission plan, mission task, or mission objective is still in the planning state.
          };
        };

        module TransportEncodingEnumType
        {
          enum TransportEncodingEnumType
          {
              MPEG_2, // MPEG-2
              MP4, // MPEG-4
              OTHER // Unspecified or unknown format
          };
        };

        module WaypointKindEnumType
        {
          enum WaypointKindEnumType
          {
              APPROACH_FINAL_POINT, // Approach final point
              APPROACH_INITIAL_POINT, // Approach initial point
              LAUNCH, // Launch
              LOITER, // Loiter
              NAV_ONLY, // Navigation only
              NAV_TARGET, // Navigation target
              OTHER, // Other
              RECOVERY, // Recovery
              RENDEZVOUS // Rendezvous
          };
        };

        module MeteringModeEnumType
        {
          enum MeteringModeEnumType
          {
              AUTO_DEFAULT, // Auto default
              CENTER_WEIGHTED, // Center weighted
              SPOT // Spot
          };
        };

        module MountModeEnumType
        {
          enum MountModeEnumType
          {
              _FIXED, // Fixed
              FIXED_BOW_THRUSTER, // Fixed bow thruster
              FIXED_PORT_PROPULSOR, // Fixed port propulsor
              FIXED_STERN_THRUSTER, // Fixed stern thruster
              VARIABLE_BEARING, // Variable bearing
              VARIABLE_PITCH, // Variable pitch
              VARIABLE_PITCH_AND_BEARING // Variable pitch and bearing
          };
        };

        module NavigationSolutionEnumType
        {
          enum NavigationSolutionEnumType
          {
              ESTIMATED, // Estimated
              GROUND_TRUTH, // Ground Truth
              MEASURED // Measured
          };
        };

        module ObstacleAvoidanceEnumType
        {
          enum ObstacleAvoidanceEnumType
          {
              DEVIATE_FROM_PATH, // Deviate from path to avoid obstacle
              DO_NOTHING, // Do not try to avoid obstacle
              STOP_ON_PATH // Stop on path before hitting obstacle
          };
        };

        module PathWayEnumType
        {
          enum PathWayEnumType
          {
              HISTORIAL_GLOBAL, // Historical global path
              HISTORICAL_LOCAL, // Historical local path
              PLANNED_GLOBAL, // Planned global path
              PLANNED_LOCAL // Planned local path
          };
        };

        module PlatformModeEnumType
        {
          enum PlatformModeEnumType
          {
              MAINTENANCE, // Maintenance
              STANDARD_OPERATING, // Standard_Operating
              TRAINING // Training
          };
        };

        module PlatformModeTransitionEnumType
        {
          enum PlatformModeTransitionEnumType
          {
              ACTIVE, // Active
              EXITING, // Exiting
              INITIALIZING // Initializing
          };
        };

        module PowerPlantStateEnumType
        {
          enum PowerPlantStateEnumType
          {
              FAULT, // Faulted
              OFF, // Off
              ON // On
          };
        };

        module PumpStateEnumType
        {
          enum PumpStateEnumType
          {
              FAULT, // Faulted
              OFF, // Off
              ON_FORWARD, // Running forward direction
              ON_REVERSE // Running reverse direction
          };
        };

        module RangeErrorCodeEnumType
        {
          enum RangeErrorCodeEnumType
          {
              INVALID_HORIZONTAL_FOV, // Invalid horizontal FOV
              INVALID_SENSOR_RANGE, // Invalid sensor range
              INVALID_SENSOR_STATE, // Invalid sensor state
              INVALID_UPDATE_RATE, // Invalid update rate
              INVALID_VERTICAL_FOV, // Invalid vertical FOV
              MULTIPLE_INVALID_PARAMETERS, // Multiple invalid parameters
              UNKNOWN_ERROR_FAULT, // Unknown error fault
              UNKNOWN_SENSOR_ID // Unknown sensor ID
          };
        };

        module RenderUselessStateEnumType
        {
          enum RenderUselessStateEnumType
          {
              NORMAL, // Normal
              RENDERED_USELESS, // Rendered Useless
              RENDERED_USELESS_FAILED // Render Useless Failed
          };
        };

        module SourceIndicatorEnumType
        {
          enum SourceIndicatorEnumType
          {
              ACTUAL, // Source of data is actual sensor data.
              GROUND_TRUTH, // Source of data is ground truth.
              SIMULATED, // Source of data is simulated sensor data.
              TENTATIVE // Source of data is tentative sensor data.
          };
        };

        module StillImageErrorCodeEnumType
        {
          enum StillImageErrorCodeEnumType
          {
              INVALID_FORMAT, // Invalid format
              INVALID_FRAME_SIZE, // Invalid frame size
              MULTIPLE_INVALID_PARAMETERS, // Multiple invalid parameters
              UNKNOWN_ERROR_FAULT, // Unknown error fault
              UNKNOWN_SENSOR_ID // Unknown sensor ID
          };
        };

        module StreamStateEnumType
        {
          enum StreamStateEnumType
          {
              PAUSE, // Paused
              PLAY, // Playing
              STOP // Stopped
          };
        };

        module TamperDetectionStateEnumType
        {
          enum TamperDetectionStateEnumType
          {
              ALWAYS_ENABLED_OR_CLEAR, // ALWAYS_ENABLED for reporting data; CLEAR for clearing the previous activities
              DISABLED, // Disabled
              ENABLED // Enabled
          };
        };

        module VehicleSpeedModeEnumType
        {
          enum VehicleSpeedModeEnumType
          {
              LRC, // Long-Range Cruise
              MEC, // Maximum Endurance Cruise
              MRC, // Maximum Range Cruise
              SLOW, // Slow speed
              VEHICLE_SPECIFIC // Vehicle Specific
          };
        };

        module VehicleSpeedReferenceEnumType
        {
          enum VehicleSpeedReferenceEnumType
          {
              SPEED_THROUGH_AIR, // Air speed
              OTHER, // Other
              RPM, // RPM
              SPEED_OVER_GROUND, // Speed relative to ground
              SPEED_THROUGH_WATER // Speed relative to surrounding water
          };
        };

        module VelocityCommandTypeEnumType
        {
          enum VelocityCommandTypeEnumType
          {
              CURRENT_COMMAND_SOG, // Current Command Speed Over Ground
              CURRENT_COMMAND_SRM, // Current Command Speed Relative to Medium
              DEFAULT_COMMAND_SOG, // Default Speed Over Ground command
              DEFAULT_COMMAND_SRM, // Default Speed Relative to Medium command
              MAX_ALLOWED_SOG, // Maximum Allowed Speed Over Ground
              MAX_ALLOWED_SRM, // Maximum Allowed Speed Relative to Medium
              MIN_ALLOWED_SOG, // Minimum Allowed Speed Over Ground
              MIN_ALLOWED_SRM // Minimum Allowed Speed Relative to Medium
          };
        };

        module VideoFormatEnumType
        {
          enum VideoFormatEnumType
          {
              NTSCJ, // NTSC-J
              NTSCM, // NTSC-M (default)
              PALM, // PAL-M
              PALN, // PAL-N
              SECAMBG, // SECAM-B/G
              SECAML // SECAM-L
          };
        };

        module VisualClassificationEnumType
        {
          enum VisualClassificationEnumType
          {
              AID_TO_NAVIGATION_CHANNEL_MARKER, // A channel marker used as an aid to navigation.
              MEDIUM_VESSEL_FISHING, // A fishing vessel.
              AID_TO_NAVIGATION_GENERAL, // A general aid to navigation.
              SMALL_VESSEL_JET_SKI, // A jet ski.
              AID_TO_NAVIGATION_LARGE_BUOY, // A large buoy used as an aid to navigation.
              LARGE_VESSEL_CARGO, // A large cargo vessel.
              LARGE_GENERAL_OBSTACLE, // A large general obstacle.
              LARGE_VESSEL_GENERAL, // A large general vessel.
              LARGE_VESSEL_MILITARY, // A large military vessel.
              LARGE_VESSEL_PASSENGER, // A large passenger vessel.
              LARGE_VESSEL_OTHER, // A large vessel that does not fit into other LARGE_VESSEL categories.
              AID_TO_NAVIGATION_LIGHTHOUSE, // A lighthouse used as an aid to navigation.
              MEDIUM_VESSEL_GENERAL, // A medium general vessel.
              MEDIUM_VESSEL_MILITARY, // A medium military vessel.
              MEDIUM_VESSEL_OTHER, // A medium vessel that does not fit into other MEDIUM_VESSEL categories.
              SMALL_VESSEL_POWER_BOAT, // A power boat.
              SAILBOAT, // A sailboat.
              AID_TO_NAVIGATION_SMALL_BUOY, // A small buoy used as an aid to navigation.
              SMALL_GENERAL_OBSTACLE, // A small general obstacle.
              SMALL_VESSEL_GENERAL, // A small general vessel.
              SMALL_VESSEL_MILITARY, // A small military vessel.
              SMALL_VESSEL_OTHER, // A small vessel that does not fit into other SMALL_VESSEL categories
              MEDIUM_VESSEL_TUG, // A tug vessel.
              MEDIUM_VESSEL_TUG_IN_TOW, // A tug vessel towing another vessel.
              MEDIUM_VESSEL_YACHT // A yacht.
          };
        };

        module WaterTurnDirectionEnumType
        {
          enum WaterTurnDirectionEnumType
          {
              NO_VALID_TURN_DIRECTION, // No valid turn direction is specified for the vehicle.
              LEFT_TURN, // The vehicle will make left turns.
              RIGHT_TURN, // The vehicle will make right turns.
              VEHICLE_SPECIFIC, // The vehicle will make turns as dictated by the vehicle's specific behavior.
              INTO_THE_CURRENT, // The vehicle will make turns into the current.
              INTO_THE_WIND // The vehicle will make turns into the wind.
          };
        };

        module WhiteBalanceEnumType
        {
          enum WhiteBalanceEnumType
          {
              AUTO_DEFAULT, // Auto default
              CLOUDY, // Cloudy
              DAYLIGHT, // Daylight
              FLASH, // Flash
              FLUORESCENT, // Fluorescent
              SHADE, // Shade
              TUNGSTEN // Tungsten
          };
        };

        module ZoneKindEnumType
        {
          enum ZoneKindEnumType
          {
              KEEP_IN, // Defines a zone that the vehicle is required to keep in.
              KEEP_OUT // Defines a zone that the vehicle is required to keep out.
          };
        };

        module ZoomModeEnumType
        {
          enum ZoomModeEnumType
          {
              ANALOG_ONLY, // Analog zoom only
              DIGITAL_ONLY, // Digital zoom only
              OFF, // No zoom
              MIXED_DEFAULT // System default mixture of analog and digital zoom
          };
        };


    };
  };
};

#endif // _LDM_MDE_REFINEMENTS_ENUMERATIONSETS_ENUMERATIONSETS
