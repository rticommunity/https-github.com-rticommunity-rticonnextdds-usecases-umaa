/**
 *
 * DISTRIBUTION STATEMENT A. Approved for public release. Distribution is unlimited.
 *
 */  

/**
 *
 * This file was generated by the UxSDK+ tool. Please see
 * https://bitbucket.di2e.net/projects/UXSDK/repos/uxsdk
 * for more information
 *
 */

// WARNING: THIS CODE IS AUTO-GENERATED
//   DO NOT EDIT

#ifndef _LDM_MDE_REFINEMENTS_MEASUREMENTS_MEASUREMENTS
#define _LDM_MDE_REFINEMENTS_MEASUREMENTS_MEASUREMENTS

#include "BasicTypes/Quaternion.idl"

module UMAA
{
  module Common
  {
    module Measurement
    {

        typedef double AngleAcceleration;
        typedef double AnglePosition;
        @range(min = 0, max = 3600000) @unit(Coulomb) typedef double Charge; // units=Coulomb minInclusive=0 maxInclusive=3600000 fractionDigits=0
        typedef double Conductivity;
        typedef double DataTransferRate;
        @range(min = 0, max = 401056000) @unit(Meter) typedef double Distance_ASF; // units=Meter minInclusive=0 maxInclusive=401056000 fractionDigits=3
        @range(min = 0, max = 10000) @unit(Meter) typedef double Distance_BSL; // units=Meter minInclusive=0 maxInclusive=10000 fractionDigits=3
        typedef double Effort;
        @range(min = 0, max = 1000) @unit(Percent) typedef double Energy_Percent; // units=Percent minInclusive=0 maxInclusive=1000 fractionDigits=3
        @range(min = 0, max = 1000) @unit(FramesPerSecond) typedef double FrameRateFPS; // units=FramesPerSecond minInclusive=0 maxInclusive=1000 fractionDigits=0
        @range(min = -100000, max = 100000) @unit(RevolutionsPerMinute) typedef double FrequencyRPM; // units=RevolutionsPerMinute minInclusive=-100000 maxInclusive=100000 fractionDigits=0
        @range(min = -3.1415926535897931264626433832795, max = 3.1415926535897932384626433832795) @unit(Radian) typedef double Heading_CurrentDirection; // units=Radian referenceFrame=CurrentDirection minInclusive=-3.1415926535897931264626433832795 maxInclusive=3.1415926535897932384626433832795 fractionDigits=3
        @range(min = -3.1415926535897931264626433832795, max = 3.1415926535897932384626433832795) @unit(Radian) typedef double Heading_MagneticNorth; // units=Radian referenceFrame=MagneticNorth minInclusive=-3.1415926535897931264626433832795 maxInclusive=3.1415926535897932384626433832795 fractionDigits=3
        @range(min = -3.1415926535897931264626433832795, max = 3.1415926535897932384626433832795) @unit(Radian) typedef double Heading_WindDirection; // units=Radian referenceFrame=WindDirection minInclusive=-3.1415926535897931264626433832795 maxInclusive=3.1415926535897932384626433832795 fractionDigits=3
        typedef double Mass_MetricTon;
        typedef double MassFlowRate;
        typedef BasicTypes::Quaternion OrientationQuaternion;
        @range(min = 0, max = 2147483647) typedef double PositiveCount; // units=N/A minInclusive=1 maxInclusive=2147483647 fractionDigits=0
        @range(min = 0, max = 1000) @unit(Percent) typedef double Power_Percent; // units=Percent minInclusive=0 maxInclusive=1000 fractionDigits=3
        @range(min = 0, max = 200) typedef double Pressure_Percent; // minInclusive=0 maxInclusive=200 fractionDigits=3 referenceFrame=Counting
        typedef double Salinity;
        @range(min = 0, max = 255) typedef long SidesCount; // units=N/A minInclusive=3 maxInclusive=255 fractionDigits=0
        typedef double Speed_BSL;
        @range(min = 0, max = 299792458) @unit(MeterPerSecond) typedef double Speed_LocalWaterMass; // units=MeterPerSecond minInclusive=0 maxInclusive=299792458 fractionDigits=6
        @range(min = 0, max = 1000) @unit(VolumeCubicMeter) typedef double Volume_CubicMeter; // units=VolumeCubicMeter minInclusive=0 maxInclusive=1000 fractionDigits=6 referenceFrame=Counting
        @range(min = 0, max = 1000) @unit(Percent) typedef double Volume_Percent; // units=Percent minInclusive=0 maxInclusive=1000 fractionDigits=3
        typedef double VolumetricFlowRate;


    };
  };
};

#endif // _LDM_MDE_REFINEMENTS_MEASUREMENTS_MEASUREMENTS

/**
 *
 * DISTRIBUTION STATEMENT A. Approved for public release. Distribution is unlimited.
 *
 */  

/**
 *
 * This file was generated by the UxSDK+ tool. Please see
 * https://bitbucket.di2e.net/projects/UXSDK/repos/uxsdk
 * for more information
 *
 */

// WARNING: THIS CODE IS AUTO-GENERATED
//   DO NOT EDIT

#ifndef _LDM_REFINEMENTS_MEASUREMENTS_MEASUREMENTS
#define _LDM_REFINEMENTS_MEASUREMENTS_MEASUREMENTS

#include "UMAA/Common/MeasurementCoordinate/Engineering_Coordinate_Axes.idl"
#include "UMAA/Common/MeasurementCoordinate/Geographic_Coordinate_Axes.idl"
#include "BasicTypes/Quaternion.idl"

module UMAA
{
  module Common
  {
    module Measurement
    {

        @range(min = -1310.68, max = 1310.68) @unit(MeterPerSecondSquared) typedef double AccelerationScalar; // units=MeterPerSecondSquared minInclusive=-1310.68 maxInclusive=1310.68 fractionDigits=3
        typedef double Angle;
        @range(min = -62.831, max = 62.831) @unit(RadianPerSecond) typedef double AngleRate; // units=RadianPerSecond minInclusive=-62.831 maxInclusive=62.831 fractionDigits=3
        typedef double Azimuth_TrueNorth_PosAngle;
        typedef double BarometricPressure;
        typedef long CommsRate_BitsPerSecond;
        @range(min = 0, max = 1125000) @unit(MegabitsPerSecond) typedef double CommsRate_MegabitsPerSecond; // units=MegabitsPerSecond minInclusive=0 maxInclusive=1125000 fractionDigits=3
        @range(min = 0, max = 32767) @unit(None) typedef double ContinuousSize; // units=None minInclusive=0 maxInclusive=32767 fractionDigits=7
        @range(min = -2147483648, max = 2147483647) typedef long Count; // units=N/A minInclusive=-2147483648 maxInclusive=2147483647 fractionDigits=0
        typedef double Course_TrueNorth;
        typedef double CovarOrientation;
        typedef double CovarPosPos;
        typedef double CovarPosVel;
        typedef double CovarVelVel;
        @unit(Seconds) typedef long long DateTimeSeconds; // seconds since epoch, range of long long
        @range(min = 0, max = 999999999) @unit(Nanoseconds) typedef long DateTimeNanoseconds; // nanoseconds elapsed within current second, range 0-999999999 inclusive
        struct DateTime {
          DateTimeSeconds seconds;
          DateTimeNanoseconds nanoseconds;
        };

        typedef double Density;
        @range(min = 0, max = 401056000) @unit(Meter) typedef double Distance; // units=Meter minInclusive=0 maxInclusive=401056000 fractionDigits=3
        @range(min = 0, max = 401056000) @unit(Meter) typedef double Distance_Precise; // units=Meter minInclusive=0 maxInclusive=401056000 fractionDigits=6
        @range(min = 0, max = 10505) @unit(Hour) typedef double Duration_Hours; // units=Hour minInclusive=0 maxInclusive=10505 fractionDigits=3
        @range(min = 0, max = 37817280) @unit(Seconds) typedef double Duration_Seconds; // units=Seconds minInclusive=0 maxInclusive=37817280 fractionDigits=6
        @range(min = 0, max = 100000000) @unit(Watt) typedef double ElectricalPower; // units=Watt minInclusive=0 maxInclusive=100000000 fractionDigits=3
        @range(min = -100000, max = 100000) @unit(RevolutionsPerMinute) typedef double EngineSpeed; // units=RevolutionsPerMinute minInclusive=-100000 maxInclusive=100000 fractionDigits=0
        typedef double FieldOfView_LineOfSightFocalPlane;
        typedef double FocusValue;
        @range(min = 0, max = 100000000) @unit(Newton) typedef double Force; // units=Newton minInclusive=0 maxInclusive=100000000 fractionDigits=3
        @range(min = 0.0, max = 10000000000) @unit(Hertz) typedef double Frequency_Hertz; // units=Hertz minInclusive=0.0 maxInclusive=10000000000 fractionDigits=6
        @range(min = 0, max = 200) @unit(MeterPerSecond) typedef double GroundSpeed; // units=MeterPerSecond minInclusive=0 maxInclusive=200 fractionDigits=6
        @range(min = -3.1415926535897931264626433832795, max = 3.1415926535897932384626433832795) @unit(Radian) typedef double Heading_TrueNorth_Angle; // units=Radian referenceFrame=TrueNorth minInclusive=-3.1415926535897931264626433832795 maxInclusive=3.1415926535897932384626433832795 fractionDigits=3
        typedef double IndicatedAirspeed;
        typedef long IPPort_Counting;
        typedef double MagneticVariation;
        @range(min = 0, max = 100000000) @unit(Kilogram) typedef double Mass; // units=Kilogram minInclusive=0 maxInclusive=100000000 fractionDigits=3
        typedef octet NumericGUID[16];

        @range(min = 0, max = 2147483647) typedef long Order;

        @range(min = 0, max = 1000) @unit(Percent) typedef double Percent; // units=Percent minInclusive=0 maxInclusive=1000 fractionDigits=3
        typedef double Pitch_HalfAngle;
        typedef double PitchAcceleration;
        @range(min = 0, max = 32.767) @unit(RadianPerSecond) typedef double PitchRate; // units=RadianPerSecond minInclusive=0 maxInclusive=32.767 fractionDigits=3 referenceFrame=Counting
        @range(min = -100000, max = 100000) @unit(Ampere) typedef double PowerBusCurrent; // units=Ampere minInclusive=-100000 maxInclusive=100000 fractionDigits=3
        @range(min = -100000, max = 100000) @unit(Volt) typedef double PowerBusVoltage; // units=Volt minInclusive=-100000 maxInclusive=100000 fractionDigits=3
        @range(min = 0, max = 51200) @unit(KiloPascal) typedef double Pressure_KiloPascals; // units=KiloPascal minInclusive=0 maxInclusive=51200 fractionDigits=3
        @range(min = 0.0, max = 10000000000) @unit(Hertz) typedef double RadioFrequency_Hertz; // units=Hertz minInclusive=0.0 maxInclusive=10000000000 fractionDigits=6
        typedef double RelativeAngle;
        @range(min = 0, max = 1000) @unit(Percent) typedef double RelativeHumidity; // units=Percent minInclusive=0 maxInclusive=1000 fractionDigits=3
        typedef double Roll_Angle;
        typedef double RollAcceleration;
        typedef double RollRate;
        typedef double Size_Numeral; // units=N/A fractionDigits=3
        @range(min = 0, max = 299792458) @unit(MeterPerSecond) typedef double Speed; // units=MeterPerSecond minInclusive=0 maxInclusive=299792458 fractionDigits=6
        @range(min = -273, max = 1000) @unit(Celsius) typedef double Temperature; // units=Celsius minInclusive=-273 maxInclusive=1000 fractionDigits=3
        @range(min = 0, max = 32.767) @unit(RadianPerSecondreference) typedef double TurnRate; // units=RadianPerSecondreference minInclusive=0 maxInclusive=32.767 fractionDigits=3 referenceFrame=Counting
        typedef double Yaw_PosAngle;
        typedef double YawAcceleration;
        typedef double YawRate;


    };
  };
};

#endif // _LDM_REFINEMENTS_MEASUREMENTS_MEASUREMENTS
