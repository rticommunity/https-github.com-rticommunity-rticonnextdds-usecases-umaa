

/*
WARNING: THIS FILE IS AUTO-GENERATED. DO NOT MODIFY.

This file was generated from EnumerationSets.idl 
using RTI Code Generator (rtiddsgen) version 4.2.0.
The rtiddsgen tool is part of the RTI Connext DDS distribution.
For more information, type 'rtiddsgen -help' at a command shell
or consult the Code Generator User's Manual.
*/

#ifndef NDDS_STANDALONE_TYPE
#ifndef ndds_cpp_h
#include "ndds/ndds_cpp.h"
#endif
#ifndef dds_c_log_impl_h              
#include "dds_c/dds_c_log_impl.h"                                
#endif 

#ifndef dds_c_log_infrastructure_h
#include "dds_c/dds_c_infrastructure_impl.h"       
#endif 

#ifndef cdr_type_h
#include "cdr/cdr_type.h"
#endif    

#ifndef osapi_heap_h
#include "osapi/osapi_heap.h" 
#endif
#else
#include "ndds_standalone_type.h"
#endif

#include "EnumerationSets.h"

#ifndef NDDS_STANDALONE_TYPE
#include "EnumerationSetsPlugin.h"
#endif

#include <new>

#undef ERROR

#undef VARIABLE_PITCH

#undef DELETE

#undef PLATFORM

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_AnalogSensorErrorCodeEnumType_AnalogSensorErrorCodeEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::AnalogSensorErrorCodeEnumType::AnalogSensorErrorCodeEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_AnalogSensorErrorCodeEnumType_AnalogSensorErrorCodeEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_AnalogSensorErrorCodeEnumType_AnalogSensorErrorCodeEnumType_g_tc_members[3]=
    {

        {
            (char *)"INVALID_FORMAT",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_AnalogSensorErrorCodeEnumType_AnalogSensorErrorCodeEnumType_INVALID_FORMAT, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"UNKNOWN_ERROR_FAULT",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_AnalogSensorErrorCodeEnumType_AnalogSensorErrorCodeEnumType_UNKNOWN_ERROR_FAULT, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"UNKNOWN_SENSOR_ID",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_AnalogSensorErrorCodeEnumType_AnalogSensorErrorCodeEnumType_UNKNOWN_SENSOR_ID, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_AnalogSensorErrorCodeEnumType_AnalogSensorErrorCodeEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::AnalogSensorErrorCodeEnumType::AnalogSensorErrorCodeEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            3, /* Number of members */
            UMAA_Common_MaritimeEnumeration_AnalogSensorErrorCodeEnumType_AnalogSensorErrorCodeEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_AnalogSensorErrorCodeEnumType_AnalogSensorErrorCodeEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_AnalogSensorErrorCodeEnumType_AnalogSensorErrorCodeEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_AnalogSensorErrorCodeEnumType_AnalogSensorErrorCodeEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_AnalogSensorErrorCodeEnumType_AnalogSensorErrorCodeEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_AnalogSensorErrorCodeEnumType_AnalogSensorErrorCodeEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_AnalogSensorErrorCodeEnumType_AnalogSensorErrorCodeEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_AnalogSensorErrorCodeEnumType_AnalogSensorErrorCodeEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_AnalogSensorErrorCodeEnumType_AnalogSensorErrorCodeEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_AnalogSensorErrorCodeEnumType_AnalogSensorErrorCodeEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_AnalogSensorErrorCodeEnumType_AnalogSensorErrorCodeEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_AnalogSensorErrorCodeEnumType_AnalogSensorErrorCodeEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_AnalogSensorErrorCodeEnumType_AnalogSensorErrorCodeEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_AnalogSensorErrorCodeEnumType_AnalogSensorErrorCodeEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_AnalogSensorErrorCodeEnumType_AnalogSensorErrorCodeEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_AnalogSensorErrorCodeEnumType_AnalogSensorErrorCodeEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_AnalogSensorErrorCodeEnumType_AnalogSensorErrorCodeEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_AnalogSensorErrorCodeEnumType_AnalogSensorErrorCodeEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_AnalogSensorErrorCodeEnumType_AnalogSensorErrorCodeEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_AnalogSensorErrorCodeEnumType_AnalogSensorErrorCodeEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_AnalogSensorErrorCodeEnumType_AnalogSensorErrorCodeEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_AnalogSensorErrorCodeEnumType_AnalogSensorErrorCodeEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_AnalogSensorErrorCodeEnumType_AnalogSensorErrorCodeEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_AnalogSensorErrorCodeEnumType_AnalogSensorErrorCodeEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_AnalogSensorErrorCodeEnumType_AnalogSensorErrorCodeEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_AnalogSensorErrorCodeEnumType_AnalogSensorErrorCodeEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_AnalogSensorErrorCodeEnumType_AnalogSensorErrorCodeEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_AnalogSensorErrorCodeEnumType_AnalogSensorErrorCodeEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_AnalogSensorErrorCodeEnumType_AnalogSensorErrorCodeEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_AnalogSensorErrorCodeEnumType_AnalogSensorErrorCodeEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_AnalogSensorErrorCodeEnumType_AnalogSensorErrorCodeEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_AnalogSensorErrorCodeEnumType_AnalogSensorErrorCodeEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_AnalogSensorErrorCodeEnumType_AnalogSensorErrorCodeEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_AnalogSensorErrorCodeEnumType_AnalogSensorErrorCodeEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_AnalogSensorErrorCodeEnumType_AnalogSensorErrorCodeEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_AnalogSensorErrorCodeEnumType_AnalogSensorErrorCodeEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_AnalogSensorErrorCodeEnumType_AnalogSensorErrorCodeEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_AnalogSensorErrorCodeEnumType_AnalogSensorErrorCodeEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_AnalogSensorErrorCodeEnumType_AnalogSensorErrorCodeEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_AnalogSensorErrorCodeEnumType_AnalogSensorErrorCodeEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_AnalogSensorErrorCodeEnumType_AnalogSensorErrorCodeEnumType_INVALID_FORMAT;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_AnalogSensorErrorCodeEnumType_AnalogSensorErrorCodeEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_AnalogSensorErrorCodeEnumType_AnalogSensorErrorCodeEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_AnalogSensorErrorCodeEnumType_AnalogSensorErrorCodeEnumType_INVALID_FORMAT;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_AnalogSensorErrorCodeEnumType_AnalogSensorErrorCodeEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_AnalogSensorErrorCodeEnumType_AnalogSensorErrorCodeEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_AnalogSensorErrorCodeEnumType_AnalogSensorErrorCodeEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_AnalogSensorErrorCodeEnumType_AnalogSensorErrorCodeEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_AnalogSensorErrorCodeEnumType_AnalogSensorErrorCodeEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_AnalogSensorErrorCodeEnumType_AnalogSensorErrorCodeEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_AnalogSensorErrorCodeEnumType_AnalogSensorErrorCodeEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_AnalogSensorErrorCodeEnumType_AnalogSensorErrorCodeEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_AnalogSensorErrorCodeEnumType_AnalogSensorErrorCodeEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_AnalogSensorErrorCodeEnumType_AnalogSensorErrorCodeEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_AnalogSensorErrorCodeEnumType_AnalogSensorErrorCodeEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_AnalogSensorErrorCodeEnumType_AnalogSensorErrorCodeEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_AnalogSensorErrorCodeEnumType_AnalogSensorErrorCodeEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_AnalogSensorErrorCodeEnumType_AnalogSensorErrorCodeEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_AnalogSensorErrorCodeEnumType_AnalogSensorErrorCodeEnumType_copy(
    UMAA_Common_MaritimeEnumeration_AnalogSensorErrorCodeEnumType_AnalogSensorErrorCodeEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_AnalogSensorErrorCodeEnumType_AnalogSensorErrorCodeEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_AnalogSensorErrorCodeEnumType_AnalogSensorErrorCodeEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_AnalogSensorErrorCodeEnumType_AnalogSensorErrorCodeEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_AnalogSensorErrorCodeEnumType_AnalogSensorErrorCodeEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_AnalogSensorErrorCodeEnumType_AnalogSensorErrorCodeEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_AnalogSensorErrorCodeEnumType_AnalogSensorErrorCodeEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_AnalogSensorErrorCodeEnumType_AnalogSensorErrorCodeEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_AnchorActionEnumType_AnchorActionEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::AnchorActionEnumType::AnchorActionEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_AnchorActionEnumType_AnchorActionEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_AnchorActionEnumType_AnchorActionEnumType_g_tc_members[3]=
    {

        {
            (char *)"LOWER",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_AnchorActionEnumType_AnchorActionEnumType_LOWER, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"RAISE",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_AnchorActionEnumType_AnchorActionEnumType_RAISE, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"STOP",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_AnchorActionEnumType_AnchorActionEnumType_STOP, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_AnchorActionEnumType_AnchorActionEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::AnchorActionEnumType::AnchorActionEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            3, /* Number of members */
            UMAA_Common_MaritimeEnumeration_AnchorActionEnumType_AnchorActionEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_AnchorActionEnumType_AnchorActionEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_AnchorActionEnumType_AnchorActionEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_AnchorActionEnumType_AnchorActionEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_AnchorActionEnumType_AnchorActionEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_AnchorActionEnumType_AnchorActionEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_AnchorActionEnumType_AnchorActionEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_AnchorActionEnumType_AnchorActionEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_AnchorActionEnumType_AnchorActionEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_AnchorActionEnumType_AnchorActionEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_AnchorActionEnumType_AnchorActionEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_AnchorActionEnumType_AnchorActionEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_AnchorActionEnumType_AnchorActionEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_AnchorActionEnumType_AnchorActionEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_AnchorActionEnumType_AnchorActionEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_AnchorActionEnumType_AnchorActionEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_AnchorActionEnumType_AnchorActionEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_AnchorActionEnumType_AnchorActionEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_AnchorActionEnumType_AnchorActionEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_AnchorActionEnumType_AnchorActionEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_AnchorActionEnumType_AnchorActionEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_AnchorActionEnumType_AnchorActionEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_AnchorActionEnumType_AnchorActionEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_AnchorActionEnumType_AnchorActionEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_AnchorActionEnumType_AnchorActionEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_AnchorActionEnumType_AnchorActionEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_AnchorActionEnumType_AnchorActionEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_AnchorActionEnumType_AnchorActionEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_AnchorActionEnumType_AnchorActionEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_AnchorActionEnumType_AnchorActionEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_AnchorActionEnumType_AnchorActionEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_AnchorActionEnumType_AnchorActionEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_AnchorActionEnumType_AnchorActionEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_AnchorActionEnumType_AnchorActionEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_AnchorActionEnumType_AnchorActionEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_AnchorActionEnumType_AnchorActionEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_AnchorActionEnumType_AnchorActionEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_AnchorActionEnumType_AnchorActionEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_AnchorActionEnumType_AnchorActionEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_AnchorActionEnumType_AnchorActionEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_AnchorActionEnumType_AnchorActionEnumType_LOWER;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_AnchorActionEnumType_AnchorActionEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_AnchorActionEnumType_AnchorActionEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_AnchorActionEnumType_AnchorActionEnumType_LOWER;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_AnchorActionEnumType_AnchorActionEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_AnchorActionEnumType_AnchorActionEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_AnchorActionEnumType_AnchorActionEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_AnchorActionEnumType_AnchorActionEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_AnchorActionEnumType_AnchorActionEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_AnchorActionEnumType_AnchorActionEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_AnchorActionEnumType_AnchorActionEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_AnchorActionEnumType_AnchorActionEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_AnchorActionEnumType_AnchorActionEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_AnchorActionEnumType_AnchorActionEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_AnchorActionEnumType_AnchorActionEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_AnchorActionEnumType_AnchorActionEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_AnchorActionEnumType_AnchorActionEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_AnchorActionEnumType_AnchorActionEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_AnchorActionEnumType_AnchorActionEnumType_copy(
    UMAA_Common_MaritimeEnumeration_AnchorActionEnumType_AnchorActionEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_AnchorActionEnumType_AnchorActionEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_AnchorActionEnumType_AnchorActionEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_AnchorActionEnumType_AnchorActionEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_AnchorActionEnumType_AnchorActionEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_AnchorActionEnumType_AnchorActionEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_AnchorActionEnumType_AnchorActionEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_AnchorActionEnumType_AnchorActionEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::AnchorKindEnumType::AnchorKindEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType_g_tc_members[13]=
    {

        {
            (char *)"COMMERCIAL_STOCKLESS",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType_COMMERCIAL_STOCKLESS, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"DANFORTH",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType_DANFORTH, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"FOUR_FLUKE",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType_FOUR_FLUKE, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"GENERAL",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType_GENERAL, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"LIGHTWEIGHT",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType_LIGHTWEIGHT, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"MARK_2_LWT",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType_MARK_2_LWT, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"MARK_2_STOCKLESS",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType_MARK_2_STOCKLESS, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"MUSHROOM",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType_MUSHROOM, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"NAVY_TYPE_STOCK",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType_NAVY_TYPE_STOCK, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"NONMAGNETIC",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType_NONMAGNETIC, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"STANDARD_NAVY_STOCKLESS",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType_STANDARD_NAVY_STOCKLESS, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"TWO_FLUKE_BALANCED_FLUKE",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType_TWO_FLUKE_BALANCED_FLUKE, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"WEDGE_BLOCK_LWT",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType_WEDGE_BLOCK_LWT, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::AnchorKindEnumType::AnchorKindEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            13, /* Number of members */
            UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType_COMMERCIAL_STOCKLESS;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType_COMMERCIAL_STOCKLESS;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType_copy(
    UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_AnchorKindEnumType_AnchorKindEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_AnchorLocationEnumType_AnchorLocationEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::AnchorLocationEnumType::AnchorLocationEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_AnchorLocationEnumType_AnchorLocationEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_AnchorLocationEnumType_AnchorLocationEnumType_g_tc_members[3]=
    {

        {
            (char *)"BOWER",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_AnchorLocationEnumType_AnchorLocationEnumType_BOWER, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"KEEL",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_AnchorLocationEnumType_AnchorLocationEnumType_KEEL, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"STERN",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_AnchorLocationEnumType_AnchorLocationEnumType_STERN, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_AnchorLocationEnumType_AnchorLocationEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::AnchorLocationEnumType::AnchorLocationEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            3, /* Number of members */
            UMAA_Common_MaritimeEnumeration_AnchorLocationEnumType_AnchorLocationEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_AnchorLocationEnumType_AnchorLocationEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_AnchorLocationEnumType_AnchorLocationEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_AnchorLocationEnumType_AnchorLocationEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_AnchorLocationEnumType_AnchorLocationEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_AnchorLocationEnumType_AnchorLocationEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_AnchorLocationEnumType_AnchorLocationEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_AnchorLocationEnumType_AnchorLocationEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_AnchorLocationEnumType_AnchorLocationEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_AnchorLocationEnumType_AnchorLocationEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_AnchorLocationEnumType_AnchorLocationEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_AnchorLocationEnumType_AnchorLocationEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_AnchorLocationEnumType_AnchorLocationEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_AnchorLocationEnumType_AnchorLocationEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_AnchorLocationEnumType_AnchorLocationEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_AnchorLocationEnumType_AnchorLocationEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_AnchorLocationEnumType_AnchorLocationEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_AnchorLocationEnumType_AnchorLocationEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_AnchorLocationEnumType_AnchorLocationEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_AnchorLocationEnumType_AnchorLocationEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_AnchorLocationEnumType_AnchorLocationEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_AnchorLocationEnumType_AnchorLocationEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_AnchorLocationEnumType_AnchorLocationEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_AnchorLocationEnumType_AnchorLocationEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_AnchorLocationEnumType_AnchorLocationEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_AnchorLocationEnumType_AnchorLocationEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_AnchorLocationEnumType_AnchorLocationEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_AnchorLocationEnumType_AnchorLocationEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_AnchorLocationEnumType_AnchorLocationEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_AnchorLocationEnumType_AnchorLocationEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_AnchorLocationEnumType_AnchorLocationEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_AnchorLocationEnumType_AnchorLocationEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_AnchorLocationEnumType_AnchorLocationEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_AnchorLocationEnumType_AnchorLocationEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_AnchorLocationEnumType_AnchorLocationEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_AnchorLocationEnumType_AnchorLocationEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_AnchorLocationEnumType_AnchorLocationEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_AnchorLocationEnumType_AnchorLocationEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_AnchorLocationEnumType_AnchorLocationEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_AnchorLocationEnumType_AnchorLocationEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_AnchorLocationEnumType_AnchorLocationEnumType_BOWER;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_AnchorLocationEnumType_AnchorLocationEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_AnchorLocationEnumType_AnchorLocationEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_AnchorLocationEnumType_AnchorLocationEnumType_BOWER;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_AnchorLocationEnumType_AnchorLocationEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_AnchorLocationEnumType_AnchorLocationEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_AnchorLocationEnumType_AnchorLocationEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_AnchorLocationEnumType_AnchorLocationEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_AnchorLocationEnumType_AnchorLocationEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_AnchorLocationEnumType_AnchorLocationEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_AnchorLocationEnumType_AnchorLocationEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_AnchorLocationEnumType_AnchorLocationEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_AnchorLocationEnumType_AnchorLocationEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_AnchorLocationEnumType_AnchorLocationEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_AnchorLocationEnumType_AnchorLocationEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_AnchorLocationEnumType_AnchorLocationEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_AnchorLocationEnumType_AnchorLocationEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_AnchorLocationEnumType_AnchorLocationEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_AnchorLocationEnumType_AnchorLocationEnumType_copy(
    UMAA_Common_MaritimeEnumeration_AnchorLocationEnumType_AnchorLocationEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_AnchorLocationEnumType_AnchorLocationEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_AnchorLocationEnumType_AnchorLocationEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_AnchorLocationEnumType_AnchorLocationEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_AnchorLocationEnumType_AnchorLocationEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_AnchorLocationEnumType_AnchorLocationEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_AnchorLocationEnumType_AnchorLocationEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_AnchorLocationEnumType_AnchorLocationEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::AnchorStateEnumType::AnchorStateEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumType_g_tc_members[5]=
    {

        {
            (char *)"DEPLOYED",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumType_DEPLOYED, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"LOWERING",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumType_LOWERING, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"STOPPED",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumType_STOPPED, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"RAISING",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumType_RAISING, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"STOWED",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumType_STOWED, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::AnchorStateEnumType::AnchorStateEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            5, /* Number of members */
            UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumType_DEPLOYED;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumType_DEPLOYED;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumType_copy(
    UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_AnchorStateEnumType_AnchorStateEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::AudioEncodingQualityEnumType::AudioEncodingQualityEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumType_g_tc_members[7]=
    {

        {
            (char *)"AVERAGE",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumType_AVERAGE, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"BEST",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumType_BEST, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"BETTER",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumType_BETTER, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"GOOD",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumType_GOOD, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"LESS",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumType_LESS, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"POOR",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumType_POOR, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"WORST",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumType_WORST, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::AudioEncodingQualityEnumType::AudioEncodingQualityEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            7, /* Number of members */
            UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumType_AVERAGE;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumType_AVERAGE;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumType_copy(
    UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_AudioEncodingQualityEnumType_AudioEncodingQualityEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_BearingAngleEnumType_BearingAngleEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::BearingAngleEnumType::BearingAngleEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_BearingAngleEnumType_BearingAngleEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_BearingAngleEnumType_BearingAngleEnumType_g_tc_members[2]=
    {

        {
            (char *)"OWNSHIP",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_BearingAngleEnumType_BearingAngleEnumType_OWNSHIP, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"NORTH",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_BearingAngleEnumType_BearingAngleEnumType_NORTH, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_BearingAngleEnumType_BearingAngleEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::BearingAngleEnumType::BearingAngleEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            2, /* Number of members */
            UMAA_Common_MaritimeEnumeration_BearingAngleEnumType_BearingAngleEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_BearingAngleEnumType_BearingAngleEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_BearingAngleEnumType_BearingAngleEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_BearingAngleEnumType_BearingAngleEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_BearingAngleEnumType_BearingAngleEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_BearingAngleEnumType_BearingAngleEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_BearingAngleEnumType_BearingAngleEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_BearingAngleEnumType_BearingAngleEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_BearingAngleEnumType_BearingAngleEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_BearingAngleEnumType_BearingAngleEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_BearingAngleEnumType_BearingAngleEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_BearingAngleEnumType_BearingAngleEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_BearingAngleEnumType_BearingAngleEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_BearingAngleEnumType_BearingAngleEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_BearingAngleEnumType_BearingAngleEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_BearingAngleEnumType_BearingAngleEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_BearingAngleEnumType_BearingAngleEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_BearingAngleEnumType_BearingAngleEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_BearingAngleEnumType_BearingAngleEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_BearingAngleEnumType_BearingAngleEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_BearingAngleEnumType_BearingAngleEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_BearingAngleEnumType_BearingAngleEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_BearingAngleEnumType_BearingAngleEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_BearingAngleEnumType_BearingAngleEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_BearingAngleEnumType_BearingAngleEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_BearingAngleEnumType_BearingAngleEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_BearingAngleEnumType_BearingAngleEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_BearingAngleEnumType_BearingAngleEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_BearingAngleEnumType_BearingAngleEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_BearingAngleEnumType_BearingAngleEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_BearingAngleEnumType_BearingAngleEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_BearingAngleEnumType_BearingAngleEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_BearingAngleEnumType_BearingAngleEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_BearingAngleEnumType_BearingAngleEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_BearingAngleEnumType_BearingAngleEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_BearingAngleEnumType_BearingAngleEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_BearingAngleEnumType_BearingAngleEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_BearingAngleEnumType_BearingAngleEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_BearingAngleEnumType_BearingAngleEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_BearingAngleEnumType_BearingAngleEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_BearingAngleEnumType_BearingAngleEnumType_OWNSHIP;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_BearingAngleEnumType_BearingAngleEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_BearingAngleEnumType_BearingAngleEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_BearingAngleEnumType_BearingAngleEnumType_OWNSHIP;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_BearingAngleEnumType_BearingAngleEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_BearingAngleEnumType_BearingAngleEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_BearingAngleEnumType_BearingAngleEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_BearingAngleEnumType_BearingAngleEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_BearingAngleEnumType_BearingAngleEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_BearingAngleEnumType_BearingAngleEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_BearingAngleEnumType_BearingAngleEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_BearingAngleEnumType_BearingAngleEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_BearingAngleEnumType_BearingAngleEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_BearingAngleEnumType_BearingAngleEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_BearingAngleEnumType_BearingAngleEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_BearingAngleEnumType_BearingAngleEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_BearingAngleEnumType_BearingAngleEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_BearingAngleEnumType_BearingAngleEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_BearingAngleEnumType_BearingAngleEnumType_copy(
    UMAA_Common_MaritimeEnumeration_BearingAngleEnumType_BearingAngleEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_BearingAngleEnumType_BearingAngleEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_BearingAngleEnumType_BearingAngleEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_BearingAngleEnumType_BearingAngleEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_BearingAngleEnumType_BearingAngleEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_BearingAngleEnumType_BearingAngleEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_BearingAngleEnumType_BearingAngleEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_BearingAngleEnumType_BearingAngleEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_BilgeControlEnumType_BilgeControlEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::BilgeControlEnumType::BilgeControlEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_BilgeControlEnumType_BilgeControlEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_BilgeControlEnumType_BilgeControlEnumType_g_tc_members[3]=
    {

        {
            (char *)"AUTO",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_BilgeControlEnumType_BilgeControlEnumType_AUTO, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"OFF",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_BilgeControlEnumType_BilgeControlEnumType_OFF, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"ON",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_BilgeControlEnumType_BilgeControlEnumType_ON, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_BilgeControlEnumType_BilgeControlEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::BilgeControlEnumType::BilgeControlEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            3, /* Number of members */
            UMAA_Common_MaritimeEnumeration_BilgeControlEnumType_BilgeControlEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_BilgeControlEnumType_BilgeControlEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_BilgeControlEnumType_BilgeControlEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_BilgeControlEnumType_BilgeControlEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_BilgeControlEnumType_BilgeControlEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_BilgeControlEnumType_BilgeControlEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_BilgeControlEnumType_BilgeControlEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_BilgeControlEnumType_BilgeControlEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_BilgeControlEnumType_BilgeControlEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_BilgeControlEnumType_BilgeControlEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_BilgeControlEnumType_BilgeControlEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_BilgeControlEnumType_BilgeControlEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_BilgeControlEnumType_BilgeControlEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_BilgeControlEnumType_BilgeControlEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_BilgeControlEnumType_BilgeControlEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_BilgeControlEnumType_BilgeControlEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_BilgeControlEnumType_BilgeControlEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_BilgeControlEnumType_BilgeControlEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_BilgeControlEnumType_BilgeControlEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_BilgeControlEnumType_BilgeControlEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_BilgeControlEnumType_BilgeControlEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_BilgeControlEnumType_BilgeControlEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_BilgeControlEnumType_BilgeControlEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_BilgeControlEnumType_BilgeControlEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_BilgeControlEnumType_BilgeControlEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_BilgeControlEnumType_BilgeControlEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_BilgeControlEnumType_BilgeControlEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_BilgeControlEnumType_BilgeControlEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_BilgeControlEnumType_BilgeControlEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_BilgeControlEnumType_BilgeControlEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_BilgeControlEnumType_BilgeControlEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_BilgeControlEnumType_BilgeControlEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_BilgeControlEnumType_BilgeControlEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_BilgeControlEnumType_BilgeControlEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_BilgeControlEnumType_BilgeControlEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_BilgeControlEnumType_BilgeControlEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_BilgeControlEnumType_BilgeControlEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_BilgeControlEnumType_BilgeControlEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_BilgeControlEnumType_BilgeControlEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_BilgeControlEnumType_BilgeControlEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_BilgeControlEnumType_BilgeControlEnumType_AUTO;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_BilgeControlEnumType_BilgeControlEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_BilgeControlEnumType_BilgeControlEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_BilgeControlEnumType_BilgeControlEnumType_AUTO;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_BilgeControlEnumType_BilgeControlEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_BilgeControlEnumType_BilgeControlEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_BilgeControlEnumType_BilgeControlEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_BilgeControlEnumType_BilgeControlEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_BilgeControlEnumType_BilgeControlEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_BilgeControlEnumType_BilgeControlEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_BilgeControlEnumType_BilgeControlEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_BilgeControlEnumType_BilgeControlEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_BilgeControlEnumType_BilgeControlEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_BilgeControlEnumType_BilgeControlEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_BilgeControlEnumType_BilgeControlEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_BilgeControlEnumType_BilgeControlEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_BilgeControlEnumType_BilgeControlEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_BilgeControlEnumType_BilgeControlEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_BilgeControlEnumType_BilgeControlEnumType_copy(
    UMAA_Common_MaritimeEnumeration_BilgeControlEnumType_BilgeControlEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_BilgeControlEnumType_BilgeControlEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_BilgeControlEnumType_BilgeControlEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_BilgeControlEnumType_BilgeControlEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_BilgeControlEnumType_BilgeControlEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_BilgeControlEnumType_BilgeControlEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_BilgeControlEnumType_BilgeControlEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_BilgeControlEnumType_BilgeControlEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_BilgeStateEnumType_BilgeStateEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::BilgeStateEnumType::BilgeStateEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_BilgeStateEnumType_BilgeStateEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_BilgeStateEnumType_BilgeStateEnumType_g_tc_members[3]=
    {

        {
            (char *)"FAULT",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_BilgeStateEnumType_BilgeStateEnumType_FAULT, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"OFF",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_BilgeStateEnumType_BilgeStateEnumType_OFF, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"ON",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_BilgeStateEnumType_BilgeStateEnumType_ON, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_BilgeStateEnumType_BilgeStateEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::BilgeStateEnumType::BilgeStateEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            3, /* Number of members */
            UMAA_Common_MaritimeEnumeration_BilgeStateEnumType_BilgeStateEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_BilgeStateEnumType_BilgeStateEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_BilgeStateEnumType_BilgeStateEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_BilgeStateEnumType_BilgeStateEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_BilgeStateEnumType_BilgeStateEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_BilgeStateEnumType_BilgeStateEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_BilgeStateEnumType_BilgeStateEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_BilgeStateEnumType_BilgeStateEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_BilgeStateEnumType_BilgeStateEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_BilgeStateEnumType_BilgeStateEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_BilgeStateEnumType_BilgeStateEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_BilgeStateEnumType_BilgeStateEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_BilgeStateEnumType_BilgeStateEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_BilgeStateEnumType_BilgeStateEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_BilgeStateEnumType_BilgeStateEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_BilgeStateEnumType_BilgeStateEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_BilgeStateEnumType_BilgeStateEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_BilgeStateEnumType_BilgeStateEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_BilgeStateEnumType_BilgeStateEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_BilgeStateEnumType_BilgeStateEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_BilgeStateEnumType_BilgeStateEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_BilgeStateEnumType_BilgeStateEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_BilgeStateEnumType_BilgeStateEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_BilgeStateEnumType_BilgeStateEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_BilgeStateEnumType_BilgeStateEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_BilgeStateEnumType_BilgeStateEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_BilgeStateEnumType_BilgeStateEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_BilgeStateEnumType_BilgeStateEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_BilgeStateEnumType_BilgeStateEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_BilgeStateEnumType_BilgeStateEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_BilgeStateEnumType_BilgeStateEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_BilgeStateEnumType_BilgeStateEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_BilgeStateEnumType_BilgeStateEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_BilgeStateEnumType_BilgeStateEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_BilgeStateEnumType_BilgeStateEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_BilgeStateEnumType_BilgeStateEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_BilgeStateEnumType_BilgeStateEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_BilgeStateEnumType_BilgeStateEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_BilgeStateEnumType_BilgeStateEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_BilgeStateEnumType_BilgeStateEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_BilgeStateEnumType_BilgeStateEnumType_FAULT;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_BilgeStateEnumType_BilgeStateEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_BilgeStateEnumType_BilgeStateEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_BilgeStateEnumType_BilgeStateEnumType_FAULT;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_BilgeStateEnumType_BilgeStateEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_BilgeStateEnumType_BilgeStateEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_BilgeStateEnumType_BilgeStateEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_BilgeStateEnumType_BilgeStateEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_BilgeStateEnumType_BilgeStateEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_BilgeStateEnumType_BilgeStateEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_BilgeStateEnumType_BilgeStateEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_BilgeStateEnumType_BilgeStateEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_BilgeStateEnumType_BilgeStateEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_BilgeStateEnumType_BilgeStateEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_BilgeStateEnumType_BilgeStateEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_BilgeStateEnumType_BilgeStateEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_BilgeStateEnumType_BilgeStateEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_BilgeStateEnumType_BilgeStateEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_BilgeStateEnumType_BilgeStateEnumType_copy(
    UMAA_Common_MaritimeEnumeration_BilgeStateEnumType_BilgeStateEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_BilgeStateEnumType_BilgeStateEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_BilgeStateEnumType_BilgeStateEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_BilgeStateEnumType_BilgeStateEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_BilgeStateEnumType_BilgeStateEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_BilgeStateEnumType_BilgeStateEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_BilgeStateEnumType_BilgeStateEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_BilgeStateEnumType_BilgeStateEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::BitDepthEnumType::BitDepthEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType_g_tc_members[12]=
    {

        {
            (char *)"TEN_BITS",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType_TEN_BITS, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"TWELVE_BITS",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType_TWELVE_BITS, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"FOURTEEN_BITS",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType_FOURTEEN_BITS, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"SIXTEEN_BITS",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType_SIXTEEN_BITS, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"TWENTY_BITS",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType_TWENTY_BITS, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"TWENTY_FOUR_BITS",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType_TWENTY_FOUR_BITS, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"THIRTY_TWO_BITS",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType_THIRTY_TWO_BITS, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"FOURTY_BITS",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType_FOURTY_BITS, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"FOURTY_EIGHT_BITS",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType_FOURTY_EIGHT_BITS, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"FIFTY_SIX_BITS",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType_FIFTY_SIX_BITS, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"SIXTY_FOUR_BITS",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType_SIXTY_FOUR_BITS, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"EIGHT_BITS",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType_EIGHT_BITS, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::BitDepthEnumType::BitDepthEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            12, /* Number of members */
            UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType_TEN_BITS;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType_TEN_BITS;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType_copy(
    UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_BitDepthEnumType_BitDepthEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_BlastConditionEnumType_BlastConditionEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::BlastConditionEnumType::BlastConditionEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_BlastConditionEnumType_BlastConditionEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_BlastConditionEnumType_BlastConditionEnumType_g_tc_members[2]=
    {

        {
            (char *)"BLASTING",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_BlastConditionEnumType_BlastConditionEnumType_BLASTING, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"RESTING",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_BlastConditionEnumType_BlastConditionEnumType_RESTING, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_BlastConditionEnumType_BlastConditionEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::BlastConditionEnumType::BlastConditionEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            2, /* Number of members */
            UMAA_Common_MaritimeEnumeration_BlastConditionEnumType_BlastConditionEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_BlastConditionEnumType_BlastConditionEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_BlastConditionEnumType_BlastConditionEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_BlastConditionEnumType_BlastConditionEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_BlastConditionEnumType_BlastConditionEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_BlastConditionEnumType_BlastConditionEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_BlastConditionEnumType_BlastConditionEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_BlastConditionEnumType_BlastConditionEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_BlastConditionEnumType_BlastConditionEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_BlastConditionEnumType_BlastConditionEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_BlastConditionEnumType_BlastConditionEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_BlastConditionEnumType_BlastConditionEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_BlastConditionEnumType_BlastConditionEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_BlastConditionEnumType_BlastConditionEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_BlastConditionEnumType_BlastConditionEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_BlastConditionEnumType_BlastConditionEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_BlastConditionEnumType_BlastConditionEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_BlastConditionEnumType_BlastConditionEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_BlastConditionEnumType_BlastConditionEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_BlastConditionEnumType_BlastConditionEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_BlastConditionEnumType_BlastConditionEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_BlastConditionEnumType_BlastConditionEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_BlastConditionEnumType_BlastConditionEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_BlastConditionEnumType_BlastConditionEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_BlastConditionEnumType_BlastConditionEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_BlastConditionEnumType_BlastConditionEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_BlastConditionEnumType_BlastConditionEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_BlastConditionEnumType_BlastConditionEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_BlastConditionEnumType_BlastConditionEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_BlastConditionEnumType_BlastConditionEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_BlastConditionEnumType_BlastConditionEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_BlastConditionEnumType_BlastConditionEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_BlastConditionEnumType_BlastConditionEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_BlastConditionEnumType_BlastConditionEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_BlastConditionEnumType_BlastConditionEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_BlastConditionEnumType_BlastConditionEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_BlastConditionEnumType_BlastConditionEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_BlastConditionEnumType_BlastConditionEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_BlastConditionEnumType_BlastConditionEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_BlastConditionEnumType_BlastConditionEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_BlastConditionEnumType_BlastConditionEnumType_BLASTING;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_BlastConditionEnumType_BlastConditionEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_BlastConditionEnumType_BlastConditionEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_BlastConditionEnumType_BlastConditionEnumType_BLASTING;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_BlastConditionEnumType_BlastConditionEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_BlastConditionEnumType_BlastConditionEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_BlastConditionEnumType_BlastConditionEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_BlastConditionEnumType_BlastConditionEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_BlastConditionEnumType_BlastConditionEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_BlastConditionEnumType_BlastConditionEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_BlastConditionEnumType_BlastConditionEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_BlastConditionEnumType_BlastConditionEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_BlastConditionEnumType_BlastConditionEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_BlastConditionEnumType_BlastConditionEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_BlastConditionEnumType_BlastConditionEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_BlastConditionEnumType_BlastConditionEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_BlastConditionEnumType_BlastConditionEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_BlastConditionEnumType_BlastConditionEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_BlastConditionEnumType_BlastConditionEnumType_copy(
    UMAA_Common_MaritimeEnumeration_BlastConditionEnumType_BlastConditionEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_BlastConditionEnumType_BlastConditionEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_BlastConditionEnumType_BlastConditionEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_BlastConditionEnumType_BlastConditionEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_BlastConditionEnumType_BlastConditionEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_BlastConditionEnumType_BlastConditionEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_BlastConditionEnumType_BlastConditionEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_BlastConditionEnumType_BlastConditionEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_BlastKindEnumType_BlastKindEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::BlastKindEnumType::BlastKindEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_BlastKindEnumType_BlastKindEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_BlastKindEnumType_BlastKindEnumType_g_tc_members[2]=
    {

        {
            (char *)"LONG_BLAST",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_BlastKindEnumType_BlastKindEnumType_LONG_BLAST, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"SHORT_BLAST",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_BlastKindEnumType_BlastKindEnumType_SHORT_BLAST, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_BlastKindEnumType_BlastKindEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::BlastKindEnumType::BlastKindEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            2, /* Number of members */
            UMAA_Common_MaritimeEnumeration_BlastKindEnumType_BlastKindEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_BlastKindEnumType_BlastKindEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_BlastKindEnumType_BlastKindEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_BlastKindEnumType_BlastKindEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_BlastKindEnumType_BlastKindEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_BlastKindEnumType_BlastKindEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_BlastKindEnumType_BlastKindEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_BlastKindEnumType_BlastKindEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_BlastKindEnumType_BlastKindEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_BlastKindEnumType_BlastKindEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_BlastKindEnumType_BlastKindEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_BlastKindEnumType_BlastKindEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_BlastKindEnumType_BlastKindEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_BlastKindEnumType_BlastKindEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_BlastKindEnumType_BlastKindEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_BlastKindEnumType_BlastKindEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_BlastKindEnumType_BlastKindEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_BlastKindEnumType_BlastKindEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_BlastKindEnumType_BlastKindEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_BlastKindEnumType_BlastKindEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_BlastKindEnumType_BlastKindEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_BlastKindEnumType_BlastKindEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_BlastKindEnumType_BlastKindEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_BlastKindEnumType_BlastKindEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_BlastKindEnumType_BlastKindEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_BlastKindEnumType_BlastKindEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_BlastKindEnumType_BlastKindEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_BlastKindEnumType_BlastKindEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_BlastKindEnumType_BlastKindEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_BlastKindEnumType_BlastKindEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_BlastKindEnumType_BlastKindEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_BlastKindEnumType_BlastKindEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_BlastKindEnumType_BlastKindEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_BlastKindEnumType_BlastKindEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_BlastKindEnumType_BlastKindEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_BlastKindEnumType_BlastKindEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_BlastKindEnumType_BlastKindEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_BlastKindEnumType_BlastKindEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_BlastKindEnumType_BlastKindEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_BlastKindEnumType_BlastKindEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_BlastKindEnumType_BlastKindEnumType_LONG_BLAST;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_BlastKindEnumType_BlastKindEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_BlastKindEnumType_BlastKindEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_BlastKindEnumType_BlastKindEnumType_LONG_BLAST;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_BlastKindEnumType_BlastKindEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_BlastKindEnumType_BlastKindEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_BlastKindEnumType_BlastKindEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_BlastKindEnumType_BlastKindEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_BlastKindEnumType_BlastKindEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_BlastKindEnumType_BlastKindEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_BlastKindEnumType_BlastKindEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_BlastKindEnumType_BlastKindEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_BlastKindEnumType_BlastKindEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_BlastKindEnumType_BlastKindEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_BlastKindEnumType_BlastKindEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_BlastKindEnumType_BlastKindEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_BlastKindEnumType_BlastKindEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_BlastKindEnumType_BlastKindEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_BlastKindEnumType_BlastKindEnumType_copy(
    UMAA_Common_MaritimeEnumeration_BlastKindEnumType_BlastKindEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_BlastKindEnumType_BlastKindEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_BlastKindEnumType_BlastKindEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_BlastKindEnumType_BlastKindEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_BlastKindEnumType_BlastKindEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_BlastKindEnumType_BlastKindEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_BlastKindEnumType_BlastKindEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_BlastKindEnumType_BlastKindEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_CollisionAvoidStateEnumType_CollisionAvoidStateEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::CollisionAvoidStateEnumType::CollisionAvoidStateEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_CollisionAvoidStateEnumType_CollisionAvoidStateEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_CollisionAvoidStateEnumType_CollisionAvoidStateEnumType_g_tc_members[3]=
    {

        {
            (char *)"DEVIATE_FROM_PATH",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_CollisionAvoidStateEnumType_CollisionAvoidStateEnumType_DEVIATE_FROM_PATH, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"DO_NOTHING",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_CollisionAvoidStateEnumType_CollisionAvoidStateEnumType_DO_NOTHING, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"STOP_ON_PATH",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_CollisionAvoidStateEnumType_CollisionAvoidStateEnumType_STOP_ON_PATH, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_CollisionAvoidStateEnumType_CollisionAvoidStateEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::CollisionAvoidStateEnumType::CollisionAvoidStateEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            3, /* Number of members */
            UMAA_Common_MaritimeEnumeration_CollisionAvoidStateEnumType_CollisionAvoidStateEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_CollisionAvoidStateEnumType_CollisionAvoidStateEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_CollisionAvoidStateEnumType_CollisionAvoidStateEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_CollisionAvoidStateEnumType_CollisionAvoidStateEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_CollisionAvoidStateEnumType_CollisionAvoidStateEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_CollisionAvoidStateEnumType_CollisionAvoidStateEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_CollisionAvoidStateEnumType_CollisionAvoidStateEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_CollisionAvoidStateEnumType_CollisionAvoidStateEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_CollisionAvoidStateEnumType_CollisionAvoidStateEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_CollisionAvoidStateEnumType_CollisionAvoidStateEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_CollisionAvoidStateEnumType_CollisionAvoidStateEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_CollisionAvoidStateEnumType_CollisionAvoidStateEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_CollisionAvoidStateEnumType_CollisionAvoidStateEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_CollisionAvoidStateEnumType_CollisionAvoidStateEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_CollisionAvoidStateEnumType_CollisionAvoidStateEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_CollisionAvoidStateEnumType_CollisionAvoidStateEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_CollisionAvoidStateEnumType_CollisionAvoidStateEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_CollisionAvoidStateEnumType_CollisionAvoidStateEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_CollisionAvoidStateEnumType_CollisionAvoidStateEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_CollisionAvoidStateEnumType_CollisionAvoidStateEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_CollisionAvoidStateEnumType_CollisionAvoidStateEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_CollisionAvoidStateEnumType_CollisionAvoidStateEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_CollisionAvoidStateEnumType_CollisionAvoidStateEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_CollisionAvoidStateEnumType_CollisionAvoidStateEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_CollisionAvoidStateEnumType_CollisionAvoidStateEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_CollisionAvoidStateEnumType_CollisionAvoidStateEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_CollisionAvoidStateEnumType_CollisionAvoidStateEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_CollisionAvoidStateEnumType_CollisionAvoidStateEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_CollisionAvoidStateEnumType_CollisionAvoidStateEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_CollisionAvoidStateEnumType_CollisionAvoidStateEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_CollisionAvoidStateEnumType_CollisionAvoidStateEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_CollisionAvoidStateEnumType_CollisionAvoidStateEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_CollisionAvoidStateEnumType_CollisionAvoidStateEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_CollisionAvoidStateEnumType_CollisionAvoidStateEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_CollisionAvoidStateEnumType_CollisionAvoidStateEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_CollisionAvoidStateEnumType_CollisionAvoidStateEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_CollisionAvoidStateEnumType_CollisionAvoidStateEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_CollisionAvoidStateEnumType_CollisionAvoidStateEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_CollisionAvoidStateEnumType_CollisionAvoidStateEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_CollisionAvoidStateEnumType_CollisionAvoidStateEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_CollisionAvoidStateEnumType_CollisionAvoidStateEnumType_DEVIATE_FROM_PATH;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_CollisionAvoidStateEnumType_CollisionAvoidStateEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_CollisionAvoidStateEnumType_CollisionAvoidStateEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_CollisionAvoidStateEnumType_CollisionAvoidStateEnumType_DEVIATE_FROM_PATH;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_CollisionAvoidStateEnumType_CollisionAvoidStateEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_CollisionAvoidStateEnumType_CollisionAvoidStateEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_CollisionAvoidStateEnumType_CollisionAvoidStateEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_CollisionAvoidStateEnumType_CollisionAvoidStateEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_CollisionAvoidStateEnumType_CollisionAvoidStateEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_CollisionAvoidStateEnumType_CollisionAvoidStateEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_CollisionAvoidStateEnumType_CollisionAvoidStateEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_CollisionAvoidStateEnumType_CollisionAvoidStateEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_CollisionAvoidStateEnumType_CollisionAvoidStateEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_CollisionAvoidStateEnumType_CollisionAvoidStateEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_CollisionAvoidStateEnumType_CollisionAvoidStateEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_CollisionAvoidStateEnumType_CollisionAvoidStateEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_CollisionAvoidStateEnumType_CollisionAvoidStateEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_CollisionAvoidStateEnumType_CollisionAvoidStateEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_CollisionAvoidStateEnumType_CollisionAvoidStateEnumType_copy(
    UMAA_Common_MaritimeEnumeration_CollisionAvoidStateEnumType_CollisionAvoidStateEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_CollisionAvoidStateEnumType_CollisionAvoidStateEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_CollisionAvoidStateEnumType_CollisionAvoidStateEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_CollisionAvoidStateEnumType_CollisionAvoidStateEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_CollisionAvoidStateEnumType_CollisionAvoidStateEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_CollisionAvoidStateEnumType_CollisionAvoidStateEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_CollisionAvoidStateEnumType_CollisionAvoidStateEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_CollisionAvoidStateEnumType_CollisionAvoidStateEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::CollisionAvoidStatusEnumType::CollisionAvoidStatusEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumType_g_tc_members[4]=
    {

        {
            (char *)"ACTIVE_AVOID_OBSTACLE",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumType_ACTIVE_AVOID_OBSTACLE, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"ACTIVE_STOP_ON_OBSTACLE",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumType_ACTIVE_STOP_ON_OBSTACLE, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"DISABLED",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumType_DISABLED, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"ENABLED",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumType_ENABLED, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::CollisionAvoidStatusEnumType::CollisionAvoidStatusEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            4, /* Number of members */
            UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumType_ACTIVE_AVOID_OBSTACLE;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumType_ACTIVE_AVOID_OBSTACLE;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumType_copy(
    UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_CollisionAvoidStatusEnumType_CollisionAvoidStatusEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::COLREGSClassificationEnumType::COLREGSClassificationEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType_g_tc_members[10]=
    {

        {
            (char *)"POWER_DRIVEN_UNDERWAY",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType_POWER_DRIVEN_UNDERWAY, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"SAILING",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType_SAILING, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"FISHING",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType_FISHING, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"NOT_UNDER_COMMAND",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType_NOT_UNDER_COMMAND, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"RESTRICTED_IN_ABILITY_TO_MANUEVER",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType_RESTRICTED_IN_ABILITY_TO_MANUEVER, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"ANCHORED",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType_ANCHORED, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"CONSTRAINED_BY_DRAUGHT",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType_CONSTRAINED_BY_DRAUGHT, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"PUSHING",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType_PUSHING, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"TOWING",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType_TOWING, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"NON_VESSEL",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType_NON_VESSEL, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::COLREGSClassificationEnumType::COLREGSClassificationEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            10, /* Number of members */
            UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType_POWER_DRIVEN_UNDERWAY;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType_POWER_DRIVEN_UNDERWAY;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType_copy(
    UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_COLREGSClassificationEnumType_COLREGSClassificationEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::CommandStatusReasonEnumType::CommandStatusReasonEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType_g_tc_members[9]=
    {

        {
            (char *)"CANCELED",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType_CANCELED, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"VALIDATION_FAILED",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType_VALIDATION_FAILED, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"OBJECTIVE_FAILED",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType_OBJECTIVE_FAILED, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"SERVICE_FAILED",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType_SERVICE_FAILED, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"RESOURCE_FAILED",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType_RESOURCE_FAILED, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"RESOURCE_REJECTED",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType_RESOURCE_REJECTED, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"INTERRUPTED",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType_INTERRUPTED, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"TIMEOUT",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType_TIMEOUT, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"SUCCEEDED",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType_SUCCEEDED, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::CommandStatusReasonEnumType::CommandStatusReasonEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            9, /* Number of members */
            UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType_CANCELED;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType_CANCELED;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType_copy(
    UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_CommandStatusReasonEnumType_CommandStatusReasonEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::ContactManeuverInfluenceEnumType::ContactManeuverInfluenceEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType_g_tc_members[16]=
    {

        {
            (char *)"BEING_OVERTAKEN_COMPLIANT",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType_BEING_OVERTAKEN_COMPLIANT, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"BEING_OVERTAKEN_NONCOMPLIANT",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType_BEING_OVERTAKEN_NONCOMPLIANT, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"CROSSING_LEFT_COMPLIANT",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType_CROSSING_LEFT_COMPLIANT, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"CROSSING_LEFT_NONCOMPLIANT",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType_CROSSING_LEFT_NONCOMPLIANT, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"CROSSING_RIGHT_COMPLIANT",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType_CROSSING_RIGHT_COMPLIANT, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"CROSSING_RIGHT_NONCOMPLIANT",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType_CROSSING_RIGHT_NONCOMPLIANT, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"HEAD_ON_COMPLIANT",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType_HEAD_ON_COMPLIANT, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"HEAD_ON_NONCOMPLIANT",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType_HEAD_ON_NONCOMPLIANT, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"OVERTAKING_COMPLIANT",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType_OVERTAKING_COMPLIANT, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"OVERTAKING_NONCOMPLIANT",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType_OVERTAKING_NONCOMPLIANT, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"GUIDE",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType_GUIDE, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"IN_EXTREMIS",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType_IN_EXTREMIS, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"COLLISION_AVOIDANCE",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType_COLLISION_AVOIDANCE, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"PREEMPTIVE",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType_PREEMPTIVE, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"OBSTACLE_AVOIDANCE",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType_OBSTACLE_AVOIDANCE, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"NONE",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType_NONE, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::ContactManeuverInfluenceEnumType::ContactManeuverInfluenceEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            16, /* Number of members */
            UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType_BEING_OVERTAKEN_COMPLIANT;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType_BEING_OVERTAKEN_COMPLIANT;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType_copy(
    UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_ContactManeuverInfluenceEnumType_ContactManeuverInfluenceEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::ContingencyBehaviorEnumType::ContingencyBehaviorEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumType_g_tc_members[6]=
    {

        {
            (char *)"CONTINUE",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumType_CONTINUE, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"FINISH",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumType_FINISH, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"LOITER",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumType_LOITER, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"NONE",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumType_NONE, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"VEHICLE_SPECIFIC",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumType_VEHICLE_SPECIFIC, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"_HOME",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumType__HOME, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::ContingencyBehaviorEnumType::ContingencyBehaviorEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            6, /* Number of members */
            UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumType_CONTINUE;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumType_CONTINUE;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumType_copy(
    UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_ContingencyBehaviorEnumType_ContingencyBehaviorEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_CoordinateSystemEnumType_CoordinateSystemEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::CoordinateSystemEnumType::CoordinateSystemEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_CoordinateSystemEnumType_CoordinateSystemEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_CoordinateSystemEnumType_CoordinateSystemEnumType_g_tc_members[2]=
    {

        {
            (char *)"SENSOR_COORDINATE_SYSTEM",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_CoordinateSystemEnumType_CoordinateSystemEnumType_SENSOR_COORDINATE_SYSTEM, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"VEHICLE_COORDINATE_SYSTEM",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_CoordinateSystemEnumType_CoordinateSystemEnumType_VEHICLE_COORDINATE_SYSTEM, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_CoordinateSystemEnumType_CoordinateSystemEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::CoordinateSystemEnumType::CoordinateSystemEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            2, /* Number of members */
            UMAA_Common_MaritimeEnumeration_CoordinateSystemEnumType_CoordinateSystemEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_CoordinateSystemEnumType_CoordinateSystemEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_CoordinateSystemEnumType_CoordinateSystemEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_CoordinateSystemEnumType_CoordinateSystemEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_CoordinateSystemEnumType_CoordinateSystemEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_CoordinateSystemEnumType_CoordinateSystemEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_CoordinateSystemEnumType_CoordinateSystemEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_CoordinateSystemEnumType_CoordinateSystemEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_CoordinateSystemEnumType_CoordinateSystemEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_CoordinateSystemEnumType_CoordinateSystemEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_CoordinateSystemEnumType_CoordinateSystemEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_CoordinateSystemEnumType_CoordinateSystemEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_CoordinateSystemEnumType_CoordinateSystemEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_CoordinateSystemEnumType_CoordinateSystemEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_CoordinateSystemEnumType_CoordinateSystemEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_CoordinateSystemEnumType_CoordinateSystemEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_CoordinateSystemEnumType_CoordinateSystemEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_CoordinateSystemEnumType_CoordinateSystemEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_CoordinateSystemEnumType_CoordinateSystemEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_CoordinateSystemEnumType_CoordinateSystemEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_CoordinateSystemEnumType_CoordinateSystemEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_CoordinateSystemEnumType_CoordinateSystemEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_CoordinateSystemEnumType_CoordinateSystemEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_CoordinateSystemEnumType_CoordinateSystemEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_CoordinateSystemEnumType_CoordinateSystemEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_CoordinateSystemEnumType_CoordinateSystemEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_CoordinateSystemEnumType_CoordinateSystemEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_CoordinateSystemEnumType_CoordinateSystemEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_CoordinateSystemEnumType_CoordinateSystemEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_CoordinateSystemEnumType_CoordinateSystemEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_CoordinateSystemEnumType_CoordinateSystemEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_CoordinateSystemEnumType_CoordinateSystemEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_CoordinateSystemEnumType_CoordinateSystemEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_CoordinateSystemEnumType_CoordinateSystemEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_CoordinateSystemEnumType_CoordinateSystemEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_CoordinateSystemEnumType_CoordinateSystemEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_CoordinateSystemEnumType_CoordinateSystemEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_CoordinateSystemEnumType_CoordinateSystemEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_CoordinateSystemEnumType_CoordinateSystemEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_CoordinateSystemEnumType_CoordinateSystemEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_CoordinateSystemEnumType_CoordinateSystemEnumType_SENSOR_COORDINATE_SYSTEM;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_CoordinateSystemEnumType_CoordinateSystemEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_CoordinateSystemEnumType_CoordinateSystemEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_CoordinateSystemEnumType_CoordinateSystemEnumType_SENSOR_COORDINATE_SYSTEM;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_CoordinateSystemEnumType_CoordinateSystemEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_CoordinateSystemEnumType_CoordinateSystemEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_CoordinateSystemEnumType_CoordinateSystemEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_CoordinateSystemEnumType_CoordinateSystemEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_CoordinateSystemEnumType_CoordinateSystemEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_CoordinateSystemEnumType_CoordinateSystemEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_CoordinateSystemEnumType_CoordinateSystemEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_CoordinateSystemEnumType_CoordinateSystemEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_CoordinateSystemEnumType_CoordinateSystemEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_CoordinateSystemEnumType_CoordinateSystemEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_CoordinateSystemEnumType_CoordinateSystemEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_CoordinateSystemEnumType_CoordinateSystemEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_CoordinateSystemEnumType_CoordinateSystemEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_CoordinateSystemEnumType_CoordinateSystemEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_CoordinateSystemEnumType_CoordinateSystemEnumType_copy(
    UMAA_Common_MaritimeEnumeration_CoordinateSystemEnumType_CoordinateSystemEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_CoordinateSystemEnumType_CoordinateSystemEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_CoordinateSystemEnumType_CoordinateSystemEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_CoordinateSystemEnumType_CoordinateSystemEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_CoordinateSystemEnumType_CoordinateSystemEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_CoordinateSystemEnumType_CoordinateSystemEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_CoordinateSystemEnumType_CoordinateSystemEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_CoordinateSystemEnumType_CoordinateSystemEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::CoreStateEnumType::CoreStateEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumType_g_tc_members[8]=
    {

        {
            (char *)"EMERGENCY",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumType_EMERGENCY, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"FAILURE",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumType_FAILURE, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"INITIAL",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumType_INITIAL, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"READY",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumType_READY, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"RESET",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumType_RESET, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"RESUME",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumType_RESUME, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"SHUTDOWN",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumType_SHUTDOWN, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"STANDBY",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumType_STANDBY, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::CoreStateEnumType::CoreStateEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            8, /* Number of members */
            UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumType_EMERGENCY;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumType_EMERGENCY;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumType_copy(
    UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_CoreStateEnumType_CoreStateEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::DigitalAudioFormatEnumType::DigitalAudioFormatEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType_g_tc_members[18]=
    {

        {
            (char *)"AAC_MPEG2",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType_AAC_MPEG2, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"AAC_MPEG4",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType_AAC_MPEG4, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"AIFF",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType_AIFF, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"ALAC",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType_ALAC, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"DOLBY_DIGITAL",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType_DOLBY_DIGITAL, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"DTS",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType_DTS, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"FLAC",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType_FLAC, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"LPCM_PCM",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType_LPCM_PCM, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"MP2",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType_MP2, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"MP3",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType_MP3, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"REAL_AUDIO",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType_REAL_AUDIO, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"SPEEX",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType_SPEEX, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"TRUE_AUDIO",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType_TRUE_AUDIO, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"ULAW",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType_ULAW, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"VORBIS",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType_VORBIS, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"WAV",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType_WAV, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"WMA",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType_WMA, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"WMA9_LOSS_LESS",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType_WMA9_LOSS_LESS, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::DigitalAudioFormatEnumType::DigitalAudioFormatEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            18, /* Number of members */
            UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType_AAC_MPEG2;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType_AAC_MPEG2;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType_copy(
    UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_DigitalAudioFormatEnumType_DigitalAudioFormatEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::DigitalSensorErrorCodeEnumType::DigitalSensorErrorCodeEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType_g_tc_members[9]=
    {

        {
            (char *)"INVALID_FORMAT",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType_INVALID_FORMAT, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"INVALID_FRAME_SIZE",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType_INVALID_FRAME_SIZE, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"INVALID_MAX_BIT_RATE",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType_INVALID_MAX_BIT_RATE, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"INVALID_MAX_FRAME_RATE",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType_INVALID_MAX_FRAME_RATE, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"INVALID_MIN_BIT_RATE",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType_INVALID_MIN_BIT_RATE, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"INVALID_MIN_FRAME_RATE",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType_INVALID_MIN_FRAME_RATE, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"MULTIPLE_INVALID_PARAMETERS",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType_MULTIPLE_INVALID_PARAMETERS, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"UNKNOWN_ERROR_FAULT",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType_UNKNOWN_ERROR_FAULT, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"UNKNOWN_SENSOR_ID",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType_UNKNOWN_SENSOR_ID, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::DigitalSensorErrorCodeEnumType::DigitalSensorErrorCodeEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            9, /* Number of members */
            UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType_INVALID_FORMAT;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType_INVALID_FORMAT;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType_copy(
    UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_DigitalSensorErrorCodeEnumType_DigitalSensorErrorCodeEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::DomainEnumType::DomainEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumType_g_tc_members[4]=
    {

        {
            (char *)"AIR",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumType_AIR, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"GROUND",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumType_GROUND, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"SURFACE",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumType_SURFACE, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"UNDERSEA",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumType_UNDERSEA, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::DomainEnumType::DomainEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            4, /* Number of members */
            UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumType_AIR;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumType_AIR;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumType_copy(
    UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_DomainEnumType_DomainEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_EngineKindEnumType_EngineKindEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::EngineKindEnumType::EngineKindEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_EngineKindEnumType_EngineKindEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_EngineKindEnumType_EngineKindEnumType_g_tc_members[2]=
    {

        {
            (char *)"DIESEL",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_EngineKindEnumType_EngineKindEnumType_DIESEL, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"GAS",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_EngineKindEnumType_EngineKindEnumType_GAS, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_EngineKindEnumType_EngineKindEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::EngineKindEnumType::EngineKindEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            2, /* Number of members */
            UMAA_Common_MaritimeEnumeration_EngineKindEnumType_EngineKindEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_EngineKindEnumType_EngineKindEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_EngineKindEnumType_EngineKindEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_EngineKindEnumType_EngineKindEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_EngineKindEnumType_EngineKindEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_EngineKindEnumType_EngineKindEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_EngineKindEnumType_EngineKindEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_EngineKindEnumType_EngineKindEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_EngineKindEnumType_EngineKindEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_EngineKindEnumType_EngineKindEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_EngineKindEnumType_EngineKindEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_EngineKindEnumType_EngineKindEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_EngineKindEnumType_EngineKindEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_EngineKindEnumType_EngineKindEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_EngineKindEnumType_EngineKindEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_EngineKindEnumType_EngineKindEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_EngineKindEnumType_EngineKindEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_EngineKindEnumType_EngineKindEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_EngineKindEnumType_EngineKindEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_EngineKindEnumType_EngineKindEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_EngineKindEnumType_EngineKindEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_EngineKindEnumType_EngineKindEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_EngineKindEnumType_EngineKindEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_EngineKindEnumType_EngineKindEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_EngineKindEnumType_EngineKindEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_EngineKindEnumType_EngineKindEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_EngineKindEnumType_EngineKindEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_EngineKindEnumType_EngineKindEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_EngineKindEnumType_EngineKindEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_EngineKindEnumType_EngineKindEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_EngineKindEnumType_EngineKindEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_EngineKindEnumType_EngineKindEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_EngineKindEnumType_EngineKindEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_EngineKindEnumType_EngineKindEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_EngineKindEnumType_EngineKindEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_EngineKindEnumType_EngineKindEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_EngineKindEnumType_EngineKindEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_EngineKindEnumType_EngineKindEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_EngineKindEnumType_EngineKindEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_EngineKindEnumType_EngineKindEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_EngineKindEnumType_EngineKindEnumType_DIESEL;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_EngineKindEnumType_EngineKindEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_EngineKindEnumType_EngineKindEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_EngineKindEnumType_EngineKindEnumType_DIESEL;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_EngineKindEnumType_EngineKindEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_EngineKindEnumType_EngineKindEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_EngineKindEnumType_EngineKindEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_EngineKindEnumType_EngineKindEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_EngineKindEnumType_EngineKindEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_EngineKindEnumType_EngineKindEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_EngineKindEnumType_EngineKindEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_EngineKindEnumType_EngineKindEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_EngineKindEnumType_EngineKindEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_EngineKindEnumType_EngineKindEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_EngineKindEnumType_EngineKindEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_EngineKindEnumType_EngineKindEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_EngineKindEnumType_EngineKindEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_EngineKindEnumType_EngineKindEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_EngineKindEnumType_EngineKindEnumType_copy(
    UMAA_Common_MaritimeEnumeration_EngineKindEnumType_EngineKindEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_EngineKindEnumType_EngineKindEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_EngineKindEnumType_EngineKindEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_EngineKindEnumType_EngineKindEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_EngineKindEnumType_EngineKindEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_EngineKindEnumType_EngineKindEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_EngineKindEnumType_EngineKindEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_EngineKindEnumType_EngineKindEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::ErrorCodeEnumType::ErrorCodeEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType_g_tc_members[9]=
    {

        {
            (char *)"ACTUATOR",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType_ACTUATOR, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"FILESYS",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType_FILESYS, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"NONE",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType_NONE, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"POWER",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType_POWER, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"PROCESSOR",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType_PROCESSOR, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"RAM",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType_RAM, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"ROM",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType_ROM, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"SENSOR",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType_SENSOR, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"SOFTWARE",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType_SOFTWARE, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::ErrorCodeEnumType::ErrorCodeEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            9, /* Number of members */
            UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType_ACTUATOR;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType_ACTUATOR;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType_copy(
    UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_ErrorCodeEnumType_ErrorCodeEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::ErrorConditionEnumType::ErrorConditionEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumType_g_tc_members[5]=
    {

        {
            (char *)"INFO",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumType_INFO, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"WARN",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumType_WARN, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"ERROR",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumType_ERROR, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"FAIL",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumType_FAIL, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"NONE",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumType_NONE, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::ErrorConditionEnumType::ErrorConditionEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            5, /* Number of members */
            UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumType_INFO;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumType_INFO;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumType_copy(
    UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_ErrorConditionEnumType_ErrorConditionEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::ExposureModeEnumType::ExposureModeEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumType_g_tc_members[4]=
    {

        {
            (char *)"AUTO_DEFAULT",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumType_AUTO_DEFAULT, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"MANUAL",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumType_MANUAL, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"APETURE_PRIORITY",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumType_APETURE_PRIORITY, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"SHUTTER_PRIORITY",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumType_SHUTTER_PRIORITY, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::ExposureModeEnumType::ExposureModeEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            4, /* Number of members */
            UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumType_AUTO_DEFAULT;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumType_AUTO_DEFAULT;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumType_copy(
    UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_ExposureModeEnumType_ExposureModeEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::FrameSizeEnumType::FrameSizeEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_g_tc_members[29]=
    {

        {
            (char *)"CGA_320x200",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_CGA_320x200, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"CIF_1408x1152",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_CIF_1408x1152, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"CIF_352x288",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_CIF_352x288, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"CIF_704x576",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_CIF_704x576, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"EGA_640x350",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_EGA_640x350, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"HD1080_1920x1080",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_HD1080_1920x1080, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"HD480_852x480",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_HD480_852x480, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"HD720_1280x720",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_HD720_1280x720, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"HSXGA_5120x4096",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_HSXGA_5120x4096, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"QCIF_176x144",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_QCIF_176x144, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"QQVGA_160x120",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_QQVGA_160x120, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"QSXGA_2560x2048",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_QSXGA_2560x2048, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"QVGA_320x240",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_QVGA_320x240, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"QXGA_2048x1536",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_QXGA_2048x1536, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"SQCIF_128x96",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_SQCIF_128x96, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"SVGA_800x600",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_SVGA_800x600, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"SXGA_1280x1024",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_SXGA_1280x1024, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"UXGA_1600x1200",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_UXGA_1600x1200, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"VGA_640x480",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_VGA_640x480, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"WHSXGA_6400x4096",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_WHSXGA_6400x4096, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"WHUXGA_7680x4800",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_WHUXGA_7680x4800, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"WOXGA_2560x1600",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_WOXGA_2560x1600, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"WQSXGA_3200x2048",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_WQSXGA_3200x2048, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"WQUXGA_3840x2400",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_WQUXGA_3840x2400, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"WSXGA_1600x1024",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_WSXGA_1600x1024, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"WUXGA_1920x1200",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_WUXGA_1920x1200, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"WVGA_852x480",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_WVGA_852x480, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"WXGA_1366x768",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_WXGA_1366x768, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"XGA_1024x768",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_XGA_1024x768, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::FrameSizeEnumType::FrameSizeEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            29, /* Number of members */
            UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_CGA_320x200;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_CGA_320x200;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_copy(
    UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_FrameSizeEnumType_FrameSizeEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::GPSConstellationEnumType::GPSConstellationEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumType_g_tc_members[8]=
    {

        {
            (char *)"UNKNOWN",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumType_UNKNOWN, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"BEIDOU",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumType_BEIDOU, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"GALILEO",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumType_GALILEO, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"GLONASS",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumType_GLONASS, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"GPS",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumType_GPS, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"IRNSS",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumType_IRNSS, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"QZSS",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumType_QZSS, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"SBAS",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumType_SBAS, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::GPSConstellationEnumType::GPSConstellationEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            8, /* Number of members */
            UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumType_UNKNOWN;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumType_UNKNOWN;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumType_copy(
    UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_GPSConstellationEnumType_GPSConstellationEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_GPSFixEnumType_GPSFixEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::GPSFixEnumType::GPSFixEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_GPSFixEnumType_GPSFixEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_GPSFixEnumType_GPSFixEnumType_g_tc_members[3]=
    {

        {
            (char *)"INITIATING",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_GPSFixEnumType_GPSFixEnumType_INITIATING, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"PERFORMING",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_GPSFixEnumType_GPSFixEnumType_PERFORMING, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"STABLE",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_GPSFixEnumType_GPSFixEnumType_STABLE, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_GPSFixEnumType_GPSFixEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::GPSFixEnumType::GPSFixEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            3, /* Number of members */
            UMAA_Common_MaritimeEnumeration_GPSFixEnumType_GPSFixEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_GPSFixEnumType_GPSFixEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_GPSFixEnumType_GPSFixEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_GPSFixEnumType_GPSFixEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_GPSFixEnumType_GPSFixEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_GPSFixEnumType_GPSFixEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_GPSFixEnumType_GPSFixEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_GPSFixEnumType_GPSFixEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_GPSFixEnumType_GPSFixEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_GPSFixEnumType_GPSFixEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_GPSFixEnumType_GPSFixEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_GPSFixEnumType_GPSFixEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_GPSFixEnumType_GPSFixEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_GPSFixEnumType_GPSFixEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_GPSFixEnumType_GPSFixEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_GPSFixEnumType_GPSFixEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_GPSFixEnumType_GPSFixEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_GPSFixEnumType_GPSFixEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_GPSFixEnumType_GPSFixEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_GPSFixEnumType_GPSFixEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_GPSFixEnumType_GPSFixEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_GPSFixEnumType_GPSFixEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_GPSFixEnumType_GPSFixEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_GPSFixEnumType_GPSFixEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_GPSFixEnumType_GPSFixEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_GPSFixEnumType_GPSFixEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_GPSFixEnumType_GPSFixEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_GPSFixEnumType_GPSFixEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_GPSFixEnumType_GPSFixEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_GPSFixEnumType_GPSFixEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_GPSFixEnumType_GPSFixEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_GPSFixEnumType_GPSFixEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_GPSFixEnumType_GPSFixEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_GPSFixEnumType_GPSFixEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_GPSFixEnumType_GPSFixEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_GPSFixEnumType_GPSFixEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_GPSFixEnumType_GPSFixEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_GPSFixEnumType_GPSFixEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_GPSFixEnumType_GPSFixEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_GPSFixEnumType_GPSFixEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_GPSFixEnumType_GPSFixEnumType_INITIATING;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_GPSFixEnumType_GPSFixEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_GPSFixEnumType_GPSFixEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_GPSFixEnumType_GPSFixEnumType_INITIATING;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_GPSFixEnumType_GPSFixEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_GPSFixEnumType_GPSFixEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_GPSFixEnumType_GPSFixEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_GPSFixEnumType_GPSFixEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_GPSFixEnumType_GPSFixEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_GPSFixEnumType_GPSFixEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_GPSFixEnumType_GPSFixEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_GPSFixEnumType_GPSFixEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_GPSFixEnumType_GPSFixEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_GPSFixEnumType_GPSFixEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_GPSFixEnumType_GPSFixEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_GPSFixEnumType_GPSFixEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_GPSFixEnumType_GPSFixEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_GPSFixEnumType_GPSFixEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_GPSFixEnumType_GPSFixEnumType_copy(
    UMAA_Common_MaritimeEnumeration_GPSFixEnumType_GPSFixEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_GPSFixEnumType_GPSFixEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_GPSFixEnumType_GPSFixEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_GPSFixEnumType_GPSFixEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_GPSFixEnumType_GPSFixEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_GPSFixEnumType_GPSFixEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_GPSFixEnumType_GPSFixEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_GPSFixEnumType_GPSFixEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::GPSNavigationSolutionEnumType::GPSNavigationSolutionEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumType_g_tc_members[8]=
    {

        {
            (char *)"GPS_1",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumType_GPS_1, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"GPS_2",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumType_GPS_2, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"GPS_2D",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumType_GPS_2D, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"GPS_3",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumType_GPS_3, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"GPS_3D",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumType_GPS_3D, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"GPS_4",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumType_GPS_4, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"GPS_DEAD_RECK",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumType_GPS_DEAD_RECK, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"NO_NAV",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumType_NO_NAV, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::GPSNavigationSolutionEnumType::GPSNavigationSolutionEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            8, /* Number of members */
            UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumType_GPS_1;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumType_GPS_1;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumType_copy(
    UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_GPSNavigationSolutionEnumType_GPSNavigationSolutionEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::GuardedTeleoperationStatusEnumType::GuardedTeleoperationStatusEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumType_g_tc_members[6]=
    {

        {
            (char *)"DISABLED",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumType_DISABLED, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"ENABLED",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumType_ENABLED, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"ACTIVE_AVOID_OBSTACLE",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumType_ACTIVE_AVOID_OBSTACLE, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"PITCHOVER_LIMIT",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumType_PITCHOVER_LIMIT, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"ROLLOVER_LIMIT",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumType_ROLLOVER_LIMIT, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"ACTIVE_STOP_ON_OBSTACLE",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumType_ACTIVE_STOP_ON_OBSTACLE, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::GuardedTeleoperationStatusEnumType::GuardedTeleoperationStatusEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            6, /* Number of members */
            UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumType_DISABLED;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumType_DISABLED;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumType_copy(
    UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_GuardedTeleoperationStatusEnumType_GuardedTeleoperationStatusEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::H264EncodingEnumType::H264EncodingEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType_g_tc_members[21]=
    {

        {
            (char *)"BASELINE",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType_BASELINE, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"CAVLC444",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType_CAVLC444, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"CONSTRAINED_BASELINE",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType_CONSTRAINED_BASELINE, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"CONSTRAINED_HIGH",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType_CONSTRAINED_HIGH, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"EXTENDED",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType_EXTENDED, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"HIGH",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType_HIGH, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"HIGH10",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType_HIGH10, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"HIGH10_INTRA",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType_HIGH10_INTRA, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"HIGH422",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType_HIGH422, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"HIGH422_INTRA",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType_HIGH422_INTRA, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"HIGH444_INTRA",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType_HIGH444_INTRA, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"HIGH444_PREDICTIVE",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType_HIGH444_PREDICTIVE, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"MAIN",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType_MAIN, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"MULTIVIEW_HIGH",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType_MULTIVIEW_HIGH, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"PROGRESSIVE_HIGH",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType_PROGRESSIVE_HIGH, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"SCALABLE_BASELINE",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType_SCALABLE_BASELINE, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"SCALABLE_CONSTRAINED_BASELINE",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType_SCALABLE_CONSTRAINED_BASELINE, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"SCALABLE_CONSTRAINED_HIGH",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType_SCALABLE_CONSTRAINED_HIGH, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"SCALABLE_HIGH",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType_SCALABLE_HIGH, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"SCALABLE_HIGH_INTRA",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType_SCALABLE_HIGH_INTRA, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"STEREO_HIGH",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType_STEREO_HIGH, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::H264EncodingEnumType::H264EncodingEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            21, /* Number of members */
            UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType_BASELINE;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType_BASELINE;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType_copy(
    UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_H264EncodingEnumType_H264EncodingEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::H264PresetEnumType::H264PresetEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType_g_tc_members[10]=
    {

        {
            (char *)"BEST_QUALITY",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType_BEST_QUALITY, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"DRIVE_VISION",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType_DRIVE_VISION, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"LOW_LATENCY",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType_LOW_LATENCY, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"MANIPULATION",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType_MANIPULATION, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"PERSISTENT_STARE",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType_PERSISTENT_STARE, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"PROGRAM_SPECIFIC_1",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType_PROGRAM_SPECIFIC_1, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"PROGRAM_SPECIFIC_2",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType_PROGRAM_SPECIFIC_2, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"PROGRAM_SPECIFIC_3",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType_PROGRAM_SPECIFIC_3, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"PROGRAM_SPECIFIC_4",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType_PROGRAM_SPECIFIC_4, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"SLOW_COMMS",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType_SLOW_COMMS, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::H264PresetEnumType::H264PresetEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            10, /* Number of members */
            UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType_BEST_QUALITY;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType_BEST_QUALITY;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType_copy(
    UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_H264PresetEnumType_H264PresetEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::HandoverResultEnumType::HandoverResultEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumType_g_tc_members[6]=
    {

        {
            (char *)"DEFERRED",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumType_DEFERRED, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"DENIED",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumType_DENIED, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"GRANTED",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumType_GRANTED, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"TIMEOUT",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumType_TIMEOUT, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"INSUFFICIENT_AUTHORITY",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumType_INSUFFICIENT_AUTHORITY, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"NOT_AVAILABLE",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumType_NOT_AVAILABLE, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::HandoverResultEnumType::HandoverResultEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            6, /* Number of members */
            UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumType_DEFERRED;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumType_DEFERRED;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumType_copy(
    UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_HandoverResultEnumType_HandoverResultEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_HeadingReferenceEnumType_HeadingReferenceEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::HeadingReferenceEnumType::HeadingReferenceEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_HeadingReferenceEnumType_HeadingReferenceEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_HeadingReferenceEnumType_HeadingReferenceEnumType_g_tc_members[3]=
    {

        {
            (char *)"MAGNETIC_NORTH",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_HeadingReferenceEnumType_HeadingReferenceEnumType_MAGNETIC_NORTH, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"TRUE_NORTH",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_HeadingReferenceEnumType_HeadingReferenceEnumType_TRUE_NORTH, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"WIND_DIRECTION",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_HeadingReferenceEnumType_HeadingReferenceEnumType_WIND_DIRECTION, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_HeadingReferenceEnumType_HeadingReferenceEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::HeadingReferenceEnumType::HeadingReferenceEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            3, /* Number of members */
            UMAA_Common_MaritimeEnumeration_HeadingReferenceEnumType_HeadingReferenceEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_HeadingReferenceEnumType_HeadingReferenceEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_HeadingReferenceEnumType_HeadingReferenceEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_HeadingReferenceEnumType_HeadingReferenceEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_HeadingReferenceEnumType_HeadingReferenceEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_HeadingReferenceEnumType_HeadingReferenceEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_HeadingReferenceEnumType_HeadingReferenceEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_HeadingReferenceEnumType_HeadingReferenceEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_HeadingReferenceEnumType_HeadingReferenceEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_HeadingReferenceEnumType_HeadingReferenceEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_HeadingReferenceEnumType_HeadingReferenceEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_HeadingReferenceEnumType_HeadingReferenceEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_HeadingReferenceEnumType_HeadingReferenceEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_HeadingReferenceEnumType_HeadingReferenceEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_HeadingReferenceEnumType_HeadingReferenceEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_HeadingReferenceEnumType_HeadingReferenceEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_HeadingReferenceEnumType_HeadingReferenceEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_HeadingReferenceEnumType_HeadingReferenceEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_HeadingReferenceEnumType_HeadingReferenceEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_HeadingReferenceEnumType_HeadingReferenceEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_HeadingReferenceEnumType_HeadingReferenceEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_HeadingReferenceEnumType_HeadingReferenceEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_HeadingReferenceEnumType_HeadingReferenceEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_HeadingReferenceEnumType_HeadingReferenceEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_HeadingReferenceEnumType_HeadingReferenceEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_HeadingReferenceEnumType_HeadingReferenceEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_HeadingReferenceEnumType_HeadingReferenceEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_HeadingReferenceEnumType_HeadingReferenceEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_HeadingReferenceEnumType_HeadingReferenceEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_HeadingReferenceEnumType_HeadingReferenceEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_HeadingReferenceEnumType_HeadingReferenceEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_HeadingReferenceEnumType_HeadingReferenceEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_HeadingReferenceEnumType_HeadingReferenceEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_HeadingReferenceEnumType_HeadingReferenceEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_HeadingReferenceEnumType_HeadingReferenceEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_HeadingReferenceEnumType_HeadingReferenceEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_HeadingReferenceEnumType_HeadingReferenceEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_HeadingReferenceEnumType_HeadingReferenceEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_HeadingReferenceEnumType_HeadingReferenceEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_HeadingReferenceEnumType_HeadingReferenceEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_HeadingReferenceEnumType_HeadingReferenceEnumType_MAGNETIC_NORTH;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_HeadingReferenceEnumType_HeadingReferenceEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_HeadingReferenceEnumType_HeadingReferenceEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_HeadingReferenceEnumType_HeadingReferenceEnumType_MAGNETIC_NORTH;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_HeadingReferenceEnumType_HeadingReferenceEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_HeadingReferenceEnumType_HeadingReferenceEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_HeadingReferenceEnumType_HeadingReferenceEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_HeadingReferenceEnumType_HeadingReferenceEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_HeadingReferenceEnumType_HeadingReferenceEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_HeadingReferenceEnumType_HeadingReferenceEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_HeadingReferenceEnumType_HeadingReferenceEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_HeadingReferenceEnumType_HeadingReferenceEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_HeadingReferenceEnumType_HeadingReferenceEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_HeadingReferenceEnumType_HeadingReferenceEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_HeadingReferenceEnumType_HeadingReferenceEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_HeadingReferenceEnumType_HeadingReferenceEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_HeadingReferenceEnumType_HeadingReferenceEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_HeadingReferenceEnumType_HeadingReferenceEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_HeadingReferenceEnumType_HeadingReferenceEnumType_copy(
    UMAA_Common_MaritimeEnumeration_HeadingReferenceEnumType_HeadingReferenceEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_HeadingReferenceEnumType_HeadingReferenceEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_HeadingReferenceEnumType_HeadingReferenceEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_HeadingReferenceEnumType_HeadingReferenceEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_HeadingReferenceEnumType_HeadingReferenceEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_HeadingReferenceEnumType_HeadingReferenceEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_HeadingReferenceEnumType_HeadingReferenceEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_HeadingReferenceEnumType_HeadingReferenceEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_HeightModeEnumType_HeightModeEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::HeightModeEnumType::HeightModeEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_HeightModeEnumType_HeightModeEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_HeightModeEnumType_HeightModeEnumType_g_tc_members[2]=
    {

        {
            (char *)"ALTITUDE",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_HeightModeEnumType_HeightModeEnumType_ALTITUDE, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"DEPTH",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_HeightModeEnumType_HeightModeEnumType_DEPTH, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_HeightModeEnumType_HeightModeEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::HeightModeEnumType::HeightModeEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            2, /* Number of members */
            UMAA_Common_MaritimeEnumeration_HeightModeEnumType_HeightModeEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_HeightModeEnumType_HeightModeEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_HeightModeEnumType_HeightModeEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_HeightModeEnumType_HeightModeEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_HeightModeEnumType_HeightModeEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_HeightModeEnumType_HeightModeEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_HeightModeEnumType_HeightModeEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_HeightModeEnumType_HeightModeEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_HeightModeEnumType_HeightModeEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_HeightModeEnumType_HeightModeEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_HeightModeEnumType_HeightModeEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_HeightModeEnumType_HeightModeEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_HeightModeEnumType_HeightModeEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_HeightModeEnumType_HeightModeEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_HeightModeEnumType_HeightModeEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_HeightModeEnumType_HeightModeEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_HeightModeEnumType_HeightModeEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_HeightModeEnumType_HeightModeEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_HeightModeEnumType_HeightModeEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_HeightModeEnumType_HeightModeEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_HeightModeEnumType_HeightModeEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_HeightModeEnumType_HeightModeEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_HeightModeEnumType_HeightModeEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_HeightModeEnumType_HeightModeEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_HeightModeEnumType_HeightModeEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_HeightModeEnumType_HeightModeEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_HeightModeEnumType_HeightModeEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_HeightModeEnumType_HeightModeEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_HeightModeEnumType_HeightModeEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_HeightModeEnumType_HeightModeEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_HeightModeEnumType_HeightModeEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_HeightModeEnumType_HeightModeEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_HeightModeEnumType_HeightModeEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_HeightModeEnumType_HeightModeEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_HeightModeEnumType_HeightModeEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_HeightModeEnumType_HeightModeEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_HeightModeEnumType_HeightModeEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_HeightModeEnumType_HeightModeEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_HeightModeEnumType_HeightModeEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_HeightModeEnumType_HeightModeEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_HeightModeEnumType_HeightModeEnumType_ALTITUDE;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_HeightModeEnumType_HeightModeEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_HeightModeEnumType_HeightModeEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_HeightModeEnumType_HeightModeEnumType_ALTITUDE;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_HeightModeEnumType_HeightModeEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_HeightModeEnumType_HeightModeEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_HeightModeEnumType_HeightModeEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_HeightModeEnumType_HeightModeEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_HeightModeEnumType_HeightModeEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_HeightModeEnumType_HeightModeEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_HeightModeEnumType_HeightModeEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_HeightModeEnumType_HeightModeEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_HeightModeEnumType_HeightModeEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_HeightModeEnumType_HeightModeEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_HeightModeEnumType_HeightModeEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_HeightModeEnumType_HeightModeEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_HeightModeEnumType_HeightModeEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_HeightModeEnumType_HeightModeEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_HeightModeEnumType_HeightModeEnumType_copy(
    UMAA_Common_MaritimeEnumeration_HeightModeEnumType_HeightModeEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_HeightModeEnumType_HeightModeEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_HeightModeEnumType_HeightModeEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_HeightModeEnumType_HeightModeEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_HeightModeEnumType_HeightModeEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_HeightModeEnumType_HeightModeEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_HeightModeEnumType_HeightModeEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_HeightModeEnumType_HeightModeEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_HoverKindEnumType_HoverKindEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::HoverKindEnumType::HoverKindEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_HoverKindEnumType_HoverKindEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_HoverKindEnumType_HoverKindEnumType_g_tc_members[2]=
    {

        {
            (char *)"LAT_LON_PRIORITY",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_HoverKindEnumType_HoverKindEnumType_LAT_LON_PRIORITY, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"Z_PRIORITY",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_HoverKindEnumType_HoverKindEnumType_Z_PRIORITY, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_HoverKindEnumType_HoverKindEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::HoverKindEnumType::HoverKindEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            2, /* Number of members */
            UMAA_Common_MaritimeEnumeration_HoverKindEnumType_HoverKindEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_HoverKindEnumType_HoverKindEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_HoverKindEnumType_HoverKindEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_HoverKindEnumType_HoverKindEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_HoverKindEnumType_HoverKindEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_HoverKindEnumType_HoverKindEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_HoverKindEnumType_HoverKindEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_HoverKindEnumType_HoverKindEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_HoverKindEnumType_HoverKindEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_HoverKindEnumType_HoverKindEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_HoverKindEnumType_HoverKindEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_HoverKindEnumType_HoverKindEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_HoverKindEnumType_HoverKindEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_HoverKindEnumType_HoverKindEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_HoverKindEnumType_HoverKindEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_HoverKindEnumType_HoverKindEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_HoverKindEnumType_HoverKindEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_HoverKindEnumType_HoverKindEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_HoverKindEnumType_HoverKindEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_HoverKindEnumType_HoverKindEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_HoverKindEnumType_HoverKindEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_HoverKindEnumType_HoverKindEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_HoverKindEnumType_HoverKindEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_HoverKindEnumType_HoverKindEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_HoverKindEnumType_HoverKindEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_HoverKindEnumType_HoverKindEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_HoverKindEnumType_HoverKindEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_HoverKindEnumType_HoverKindEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_HoverKindEnumType_HoverKindEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_HoverKindEnumType_HoverKindEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_HoverKindEnumType_HoverKindEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_HoverKindEnumType_HoverKindEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_HoverKindEnumType_HoverKindEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_HoverKindEnumType_HoverKindEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_HoverKindEnumType_HoverKindEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_HoverKindEnumType_HoverKindEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_HoverKindEnumType_HoverKindEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_HoverKindEnumType_HoverKindEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_HoverKindEnumType_HoverKindEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_HoverKindEnumType_HoverKindEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_HoverKindEnumType_HoverKindEnumType_LAT_LON_PRIORITY;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_HoverKindEnumType_HoverKindEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_HoverKindEnumType_HoverKindEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_HoverKindEnumType_HoverKindEnumType_LAT_LON_PRIORITY;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_HoverKindEnumType_HoverKindEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_HoverKindEnumType_HoverKindEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_HoverKindEnumType_HoverKindEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_HoverKindEnumType_HoverKindEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_HoverKindEnumType_HoverKindEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_HoverKindEnumType_HoverKindEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_HoverKindEnumType_HoverKindEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_HoverKindEnumType_HoverKindEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_HoverKindEnumType_HoverKindEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_HoverKindEnumType_HoverKindEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_HoverKindEnumType_HoverKindEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_HoverKindEnumType_HoverKindEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_HoverKindEnumType_HoverKindEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_HoverKindEnumType_HoverKindEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_HoverKindEnumType_HoverKindEnumType_copy(
    UMAA_Common_MaritimeEnumeration_HoverKindEnumType_HoverKindEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_HoverKindEnumType_HoverKindEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_HoverKindEnumType_HoverKindEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_HoverKindEnumType_HoverKindEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_HoverKindEnumType_HoverKindEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_HoverKindEnumType_HoverKindEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_HoverKindEnumType_HoverKindEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_HoverKindEnumType_HoverKindEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_IgnitionStateEnumType_IgnitionStateEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::IgnitionStateEnumType::IgnitionStateEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_IgnitionStateEnumType_IgnitionStateEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_IgnitionStateEnumType_IgnitionStateEnumType_g_tc_members[3]=
    {

        {
            (char *)"OFF",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_IgnitionStateEnumType_IgnitionStateEnumType_OFF, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"RUN",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_IgnitionStateEnumType_IgnitionStateEnumType_RUN, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"START",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_IgnitionStateEnumType_IgnitionStateEnumType_START, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_IgnitionStateEnumType_IgnitionStateEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::IgnitionStateEnumType::IgnitionStateEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            3, /* Number of members */
            UMAA_Common_MaritimeEnumeration_IgnitionStateEnumType_IgnitionStateEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_IgnitionStateEnumType_IgnitionStateEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_IgnitionStateEnumType_IgnitionStateEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_IgnitionStateEnumType_IgnitionStateEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_IgnitionStateEnumType_IgnitionStateEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_IgnitionStateEnumType_IgnitionStateEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_IgnitionStateEnumType_IgnitionStateEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_IgnitionStateEnumType_IgnitionStateEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_IgnitionStateEnumType_IgnitionStateEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_IgnitionStateEnumType_IgnitionStateEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_IgnitionStateEnumType_IgnitionStateEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_IgnitionStateEnumType_IgnitionStateEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_IgnitionStateEnumType_IgnitionStateEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_IgnitionStateEnumType_IgnitionStateEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_IgnitionStateEnumType_IgnitionStateEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_IgnitionStateEnumType_IgnitionStateEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_IgnitionStateEnumType_IgnitionStateEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_IgnitionStateEnumType_IgnitionStateEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_IgnitionStateEnumType_IgnitionStateEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_IgnitionStateEnumType_IgnitionStateEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_IgnitionStateEnumType_IgnitionStateEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_IgnitionStateEnumType_IgnitionStateEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_IgnitionStateEnumType_IgnitionStateEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_IgnitionStateEnumType_IgnitionStateEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_IgnitionStateEnumType_IgnitionStateEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_IgnitionStateEnumType_IgnitionStateEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_IgnitionStateEnumType_IgnitionStateEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_IgnitionStateEnumType_IgnitionStateEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_IgnitionStateEnumType_IgnitionStateEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_IgnitionStateEnumType_IgnitionStateEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_IgnitionStateEnumType_IgnitionStateEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_IgnitionStateEnumType_IgnitionStateEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_IgnitionStateEnumType_IgnitionStateEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_IgnitionStateEnumType_IgnitionStateEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_IgnitionStateEnumType_IgnitionStateEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_IgnitionStateEnumType_IgnitionStateEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_IgnitionStateEnumType_IgnitionStateEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_IgnitionStateEnumType_IgnitionStateEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_IgnitionStateEnumType_IgnitionStateEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_IgnitionStateEnumType_IgnitionStateEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_IgnitionStateEnumType_IgnitionStateEnumType_OFF;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_IgnitionStateEnumType_IgnitionStateEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_IgnitionStateEnumType_IgnitionStateEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_IgnitionStateEnumType_IgnitionStateEnumType_OFF;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_IgnitionStateEnumType_IgnitionStateEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_IgnitionStateEnumType_IgnitionStateEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_IgnitionStateEnumType_IgnitionStateEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_IgnitionStateEnumType_IgnitionStateEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_IgnitionStateEnumType_IgnitionStateEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_IgnitionStateEnumType_IgnitionStateEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_IgnitionStateEnumType_IgnitionStateEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_IgnitionStateEnumType_IgnitionStateEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_IgnitionStateEnumType_IgnitionStateEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_IgnitionStateEnumType_IgnitionStateEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_IgnitionStateEnumType_IgnitionStateEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_IgnitionStateEnumType_IgnitionStateEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_IgnitionStateEnumType_IgnitionStateEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_IgnitionStateEnumType_IgnitionStateEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_IgnitionStateEnumType_IgnitionStateEnumType_copy(
    UMAA_Common_MaritimeEnumeration_IgnitionStateEnumType_IgnitionStateEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_IgnitionStateEnumType_IgnitionStateEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_IgnitionStateEnumType_IgnitionStateEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_IgnitionStateEnumType_IgnitionStateEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_IgnitionStateEnumType_IgnitionStateEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_IgnitionStateEnumType_IgnitionStateEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_IgnitionStateEnumType_IgnitionStateEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_IgnitionStateEnumType_IgnitionStateEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::ImageFormatEnumType::ImageFormatEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType_g_tc_members[11]=
    {

        {
            (char *)"BMP",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType_BMP, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"CR2_RAW",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType_CR2_RAW, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"DNG",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType_DNG, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"GIF",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType_GIF, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"JPEG",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType_JPEG, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"NEF",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType_NEF, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"PGM",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType_PGM, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"PNG",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType_PNG, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"PNM",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType_PNM, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"PPM",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType_PPM, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"TIFF",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType_TIFF, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::ImageFormatEnumType::ImageFormatEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            11, /* Number of members */
            UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType_BMP;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType_BMP;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType_copy(
    UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_ImageFormatEnumType_ImageFormatEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::ImagingModeEnumType::ImagingModeEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumType_g_tc_members[4]=
    {

        {
            (char *)"COLOR",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumType_COLOR, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"GREYSCALE",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumType_GREYSCALE, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"INFRARED",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumType_INFRARED, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"LOWLIGHT",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumType_LOWLIGHT, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::ImagingModeEnumType::ImagingModeEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            4, /* Number of members */
            UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumType_COLOR;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumType_COLOR;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumType_copy(
    UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_ImagingModeEnumType_ImagingModeEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::InertialSensorOpStatusEnumType::InertialSensorOpStatusEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType_g_tc_members[9]=
    {

        {
            (char *)"COURSE_GPS_ALIGNMENT",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType_COURSE_GPS_ALIGNMENT, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"COURSE_STATIONARY_ALIGNMENT",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType_COURSE_STATIONARY_ALIGNMENT, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"FINE_GPS_ALIGNMENT_COMPLETE",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType_FINE_GPS_ALIGNMENT_COMPLETE, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"FINE_GPS_ALIGNMENT_STARTED",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType_FINE_GPS_ALIGNMENT_STARTED, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"FINE_STATIONARY_ALIGNMENT_COMPLETE",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType_FINE_STATIONARY_ALIGNMENT_COMPLETE, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"FINE_STATIONARY_ALIGNMENT_STARTED",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType_FINE_STATIONARY_ALIGNMENT_STARTED, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"INERTIAL_SENSOR_FAILURE",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType_INERTIAL_SENSOR_FAILURE, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"INIT",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType_INIT, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"OPERATIONAL",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType_OPERATIONAL, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::InertialSensorOpStatusEnumType::InertialSensorOpStatusEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            9, /* Number of members */
            UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType_COURSE_GPS_ALIGNMENT;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType_COURSE_GPS_ALIGNMENT;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType_copy(
    UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_InertialSensorOpStatusEnumType_InertialSensorOpStatusEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_InertialSensorStateEnumType_InertialSensorStateEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::InertialSensorStateEnumType::InertialSensorStateEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_InertialSensorStateEnumType_InertialSensorStateEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_InertialSensorStateEnumType_InertialSensorStateEnumType_g_tc_members[3]=
    {

        {
            (char *)"OFF",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_InertialSensorStateEnumType_InertialSensorStateEnumType_OFF, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"ON",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_InertialSensorStateEnumType_InertialSensorStateEnumType_ON, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"RESTARTING",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_InertialSensorStateEnumType_InertialSensorStateEnumType_RESTARTING, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_InertialSensorStateEnumType_InertialSensorStateEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::InertialSensorStateEnumType::InertialSensorStateEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            3, /* Number of members */
            UMAA_Common_MaritimeEnumeration_InertialSensorStateEnumType_InertialSensorStateEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_InertialSensorStateEnumType_InertialSensorStateEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_InertialSensorStateEnumType_InertialSensorStateEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_InertialSensorStateEnumType_InertialSensorStateEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_InertialSensorStateEnumType_InertialSensorStateEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_InertialSensorStateEnumType_InertialSensorStateEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_InertialSensorStateEnumType_InertialSensorStateEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_InertialSensorStateEnumType_InertialSensorStateEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_InertialSensorStateEnumType_InertialSensorStateEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_InertialSensorStateEnumType_InertialSensorStateEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_InertialSensorStateEnumType_InertialSensorStateEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_InertialSensorStateEnumType_InertialSensorStateEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_InertialSensorStateEnumType_InertialSensorStateEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_InertialSensorStateEnumType_InertialSensorStateEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_InertialSensorStateEnumType_InertialSensorStateEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_InertialSensorStateEnumType_InertialSensorStateEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_InertialSensorStateEnumType_InertialSensorStateEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_InertialSensorStateEnumType_InertialSensorStateEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_InertialSensorStateEnumType_InertialSensorStateEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_InertialSensorStateEnumType_InertialSensorStateEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_InertialSensorStateEnumType_InertialSensorStateEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_InertialSensorStateEnumType_InertialSensorStateEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_InertialSensorStateEnumType_InertialSensorStateEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_InertialSensorStateEnumType_InertialSensorStateEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_InertialSensorStateEnumType_InertialSensorStateEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_InertialSensorStateEnumType_InertialSensorStateEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_InertialSensorStateEnumType_InertialSensorStateEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_InertialSensorStateEnumType_InertialSensorStateEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_InertialSensorStateEnumType_InertialSensorStateEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_InertialSensorStateEnumType_InertialSensorStateEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_InertialSensorStateEnumType_InertialSensorStateEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_InertialSensorStateEnumType_InertialSensorStateEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_InertialSensorStateEnumType_InertialSensorStateEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_InertialSensorStateEnumType_InertialSensorStateEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_InertialSensorStateEnumType_InertialSensorStateEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_InertialSensorStateEnumType_InertialSensorStateEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_InertialSensorStateEnumType_InertialSensorStateEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_InertialSensorStateEnumType_InertialSensorStateEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_InertialSensorStateEnumType_InertialSensorStateEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_InertialSensorStateEnumType_InertialSensorStateEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_InertialSensorStateEnumType_InertialSensorStateEnumType_OFF;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_InertialSensorStateEnumType_InertialSensorStateEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_InertialSensorStateEnumType_InertialSensorStateEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_InertialSensorStateEnumType_InertialSensorStateEnumType_OFF;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_InertialSensorStateEnumType_InertialSensorStateEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_InertialSensorStateEnumType_InertialSensorStateEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_InertialSensorStateEnumType_InertialSensorStateEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_InertialSensorStateEnumType_InertialSensorStateEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_InertialSensorStateEnumType_InertialSensorStateEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_InertialSensorStateEnumType_InertialSensorStateEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_InertialSensorStateEnumType_InertialSensorStateEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_InertialSensorStateEnumType_InertialSensorStateEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_InertialSensorStateEnumType_InertialSensorStateEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_InertialSensorStateEnumType_InertialSensorStateEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_InertialSensorStateEnumType_InertialSensorStateEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_InertialSensorStateEnumType_InertialSensorStateEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_InertialSensorStateEnumType_InertialSensorStateEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_InertialSensorStateEnumType_InertialSensorStateEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_InertialSensorStateEnumType_InertialSensorStateEnumType_copy(
    UMAA_Common_MaritimeEnumeration_InertialSensorStateEnumType_InertialSensorStateEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_InertialSensorStateEnumType_InertialSensorStateEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_InertialSensorStateEnumType_InertialSensorStateEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_InertialSensorStateEnumType_InertialSensorStateEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_InertialSensorStateEnumType_InertialSensorStateEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_InertialSensorStateEnumType_InertialSensorStateEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_InertialSensorStateEnumType_InertialSensorStateEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_InertialSensorStateEnumType_InertialSensorStateEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::LightSensitivityEnumType::LightSensitivityEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumType_g_tc_members[7]=
    {

        {
            (char *)"AUTO_DEFAULT",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumType_AUTO_DEFAULT, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"ISO_100",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumType_ISO_100, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"ISO_1600",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumType_ISO_1600, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"ISO_200",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumType_ISO_200, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"ISO_3200",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumType_ISO_3200, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"ISO_400",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumType_ISO_400, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"ISO_800",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumType_ISO_800, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::LightSensitivityEnumType::LightSensitivityEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            7, /* Number of members */
            UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumType_AUTO_DEFAULT;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumType_AUTO_DEFAULT;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumType_copy(
    UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_LightSensitivityEnumType_LightSensitivityEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_LostCommsStatusEnumType_LostCommsStatusEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::LostCommsStatusEnumType::LostCommsStatusEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_LostCommsStatusEnumType_LostCommsStatusEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_LostCommsStatusEnumType_LostCommsStatusEnumType_g_tc_members[3]=
    {

        {
            (char *)"ACTIVE",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_LostCommsStatusEnumType_LostCommsStatusEnumType_ACTIVE, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"DISABLED",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_LostCommsStatusEnumType_LostCommsStatusEnumType_DISABLED, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"ENABLED",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_LostCommsStatusEnumType_LostCommsStatusEnumType_ENABLED, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_LostCommsStatusEnumType_LostCommsStatusEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::LostCommsStatusEnumType::LostCommsStatusEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            3, /* Number of members */
            UMAA_Common_MaritimeEnumeration_LostCommsStatusEnumType_LostCommsStatusEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_LostCommsStatusEnumType_LostCommsStatusEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_LostCommsStatusEnumType_LostCommsStatusEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_LostCommsStatusEnumType_LostCommsStatusEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_LostCommsStatusEnumType_LostCommsStatusEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_LostCommsStatusEnumType_LostCommsStatusEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_LostCommsStatusEnumType_LostCommsStatusEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_LostCommsStatusEnumType_LostCommsStatusEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_LostCommsStatusEnumType_LostCommsStatusEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_LostCommsStatusEnumType_LostCommsStatusEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_LostCommsStatusEnumType_LostCommsStatusEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_LostCommsStatusEnumType_LostCommsStatusEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_LostCommsStatusEnumType_LostCommsStatusEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_LostCommsStatusEnumType_LostCommsStatusEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_LostCommsStatusEnumType_LostCommsStatusEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_LostCommsStatusEnumType_LostCommsStatusEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_LostCommsStatusEnumType_LostCommsStatusEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_LostCommsStatusEnumType_LostCommsStatusEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_LostCommsStatusEnumType_LostCommsStatusEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_LostCommsStatusEnumType_LostCommsStatusEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_LostCommsStatusEnumType_LostCommsStatusEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_LostCommsStatusEnumType_LostCommsStatusEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_LostCommsStatusEnumType_LostCommsStatusEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_LostCommsStatusEnumType_LostCommsStatusEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_LostCommsStatusEnumType_LostCommsStatusEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_LostCommsStatusEnumType_LostCommsStatusEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_LostCommsStatusEnumType_LostCommsStatusEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_LostCommsStatusEnumType_LostCommsStatusEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_LostCommsStatusEnumType_LostCommsStatusEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_LostCommsStatusEnumType_LostCommsStatusEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_LostCommsStatusEnumType_LostCommsStatusEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_LostCommsStatusEnumType_LostCommsStatusEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_LostCommsStatusEnumType_LostCommsStatusEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_LostCommsStatusEnumType_LostCommsStatusEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_LostCommsStatusEnumType_LostCommsStatusEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_LostCommsStatusEnumType_LostCommsStatusEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_LostCommsStatusEnumType_LostCommsStatusEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_LostCommsStatusEnumType_LostCommsStatusEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_LostCommsStatusEnumType_LostCommsStatusEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_LostCommsStatusEnumType_LostCommsStatusEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_LostCommsStatusEnumType_LostCommsStatusEnumType_ACTIVE;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_LostCommsStatusEnumType_LostCommsStatusEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_LostCommsStatusEnumType_LostCommsStatusEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_LostCommsStatusEnumType_LostCommsStatusEnumType_ACTIVE;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_LostCommsStatusEnumType_LostCommsStatusEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_LostCommsStatusEnumType_LostCommsStatusEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_LostCommsStatusEnumType_LostCommsStatusEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_LostCommsStatusEnumType_LostCommsStatusEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_LostCommsStatusEnumType_LostCommsStatusEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_LostCommsStatusEnumType_LostCommsStatusEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_LostCommsStatusEnumType_LostCommsStatusEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_LostCommsStatusEnumType_LostCommsStatusEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_LostCommsStatusEnumType_LostCommsStatusEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_LostCommsStatusEnumType_LostCommsStatusEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_LostCommsStatusEnumType_LostCommsStatusEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_LostCommsStatusEnumType_LostCommsStatusEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_LostCommsStatusEnumType_LostCommsStatusEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_LostCommsStatusEnumType_LostCommsStatusEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_LostCommsStatusEnumType_LostCommsStatusEnumType_copy(
    UMAA_Common_MaritimeEnumeration_LostCommsStatusEnumType_LostCommsStatusEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_LostCommsStatusEnumType_LostCommsStatusEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_LostCommsStatusEnumType_LostCommsStatusEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_LostCommsStatusEnumType_LostCommsStatusEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_LostCommsStatusEnumType_LostCommsStatusEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_LostCommsStatusEnumType_LostCommsStatusEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_LostCommsStatusEnumType_LostCommsStatusEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_LostCommsStatusEnumType_LostCommsStatusEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_MastActionEnumType_MastActionEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::MastActionEnumType::MastActionEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_MastActionEnumType_MastActionEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_MastActionEnumType_MastActionEnumType_g_tc_members[3]=
    {

        {
            (char *)"LOWER",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_MastActionEnumType_MastActionEnumType_LOWER, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"RAISE",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_MastActionEnumType_MastActionEnumType_RAISE, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"STOP",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_MastActionEnumType_MastActionEnumType_STOP, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_MastActionEnumType_MastActionEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::MastActionEnumType::MastActionEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            3, /* Number of members */
            UMAA_Common_MaritimeEnumeration_MastActionEnumType_MastActionEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_MastActionEnumType_MastActionEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_MastActionEnumType_MastActionEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_MastActionEnumType_MastActionEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_MastActionEnumType_MastActionEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_MastActionEnumType_MastActionEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_MastActionEnumType_MastActionEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_MastActionEnumType_MastActionEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_MastActionEnumType_MastActionEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_MastActionEnumType_MastActionEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_MastActionEnumType_MastActionEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_MastActionEnumType_MastActionEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_MastActionEnumType_MastActionEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_MastActionEnumType_MastActionEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_MastActionEnumType_MastActionEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_MastActionEnumType_MastActionEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_MastActionEnumType_MastActionEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_MastActionEnumType_MastActionEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_MastActionEnumType_MastActionEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_MastActionEnumType_MastActionEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_MastActionEnumType_MastActionEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_MastActionEnumType_MastActionEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_MastActionEnumType_MastActionEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_MastActionEnumType_MastActionEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_MastActionEnumType_MastActionEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_MastActionEnumType_MastActionEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_MastActionEnumType_MastActionEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_MastActionEnumType_MastActionEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_MastActionEnumType_MastActionEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_MastActionEnumType_MastActionEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_MastActionEnumType_MastActionEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_MastActionEnumType_MastActionEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_MastActionEnumType_MastActionEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_MastActionEnumType_MastActionEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_MastActionEnumType_MastActionEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_MastActionEnumType_MastActionEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_MastActionEnumType_MastActionEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_MastActionEnumType_MastActionEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_MastActionEnumType_MastActionEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_MastActionEnumType_MastActionEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_MastActionEnumType_MastActionEnumType_LOWER;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_MastActionEnumType_MastActionEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_MastActionEnumType_MastActionEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_MastActionEnumType_MastActionEnumType_LOWER;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_MastActionEnumType_MastActionEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_MastActionEnumType_MastActionEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_MastActionEnumType_MastActionEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_MastActionEnumType_MastActionEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_MastActionEnumType_MastActionEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_MastActionEnumType_MastActionEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_MastActionEnumType_MastActionEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_MastActionEnumType_MastActionEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_MastActionEnumType_MastActionEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_MastActionEnumType_MastActionEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_MastActionEnumType_MastActionEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_MastActionEnumType_MastActionEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_MastActionEnumType_MastActionEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_MastActionEnumType_MastActionEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_MastActionEnumType_MastActionEnumType_copy(
    UMAA_Common_MaritimeEnumeration_MastActionEnumType_MastActionEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_MastActionEnumType_MastActionEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_MastActionEnumType_MastActionEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_MastActionEnumType_MastActionEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_MastActionEnumType_MastActionEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_MastActionEnumType_MastActionEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_MastActionEnumType_MastActionEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_MastActionEnumType_MastActionEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::MastStateEnumType::MastStateEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumType_g_tc_members[4]=
    {

        {
            (char *)"DOWN",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumType_DOWN, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"MOVING_DOWN",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumType_MOVING_DOWN, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"MOVING_UP",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumType_MOVING_UP, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"UP",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumType_UP, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::MastStateEnumType::MastStateEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            4, /* Number of members */
            UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumType_DOWN;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumType_DOWN;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumType_copy(
    UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_MastStateEnumType_MastStateEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::CommandStatusEnumType::CommandStatusEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumType_g_tc_members[6]=
    {

        {
            (char *)"FAILED",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumType_FAILED, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"COMPLETED",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumType_COMPLETED, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"ISSUED",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumType_ISSUED, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"COMMANDED",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumType_COMMANDED, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"EXECUTING",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumType_EXECUTING, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"CANCELED",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumType_CANCELED, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::CommandStatusEnumType::CommandStatusEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            6, /* Number of members */
            UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumType_FAILED;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumType_FAILED;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumType_copy(
    UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_CommandStatusEnumType_CommandStatusEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::DataEncodingEnumType::DataEncodingEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType_g_tc_members[11]=
    {

        {
            (char *)"AVI",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType_AVI, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"H_261",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType_H_261, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"H_262",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType_H_262, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"H_263",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType_H_263, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"H_263PLUS",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType_H_263PLUS, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"H_264",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType_H_264, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"MJPEG",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType_MJPEG, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"MPEG_1",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType_MPEG_1, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"MPEG_2",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType_MPEG_2, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"MPEG_4",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType_MPEG_4, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"NONE",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType_NONE, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::DataEncodingEnumType::DataEncodingEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            11, /* Number of members */
            UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType_AVI;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType_AVI;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType_copy(
    UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_DataEncodingEnumType_DataEncodingEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_FeatureKindEnumType_FeatureKindEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::FeatureKindEnumType::FeatureKindEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_FeatureKindEnumType_FeatureKindEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_FeatureKindEnumType_FeatureKindEnumType_g_tc_members[2]=
    {

        {
            (char *)"CONTACT",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_FeatureKindEnumType_FeatureKindEnumType_CONTACT, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"OTHER",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_FeatureKindEnumType_FeatureKindEnumType_OTHER, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_FeatureKindEnumType_FeatureKindEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::FeatureKindEnumType::FeatureKindEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            2, /* Number of members */
            UMAA_Common_MaritimeEnumeration_FeatureKindEnumType_FeatureKindEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_FeatureKindEnumType_FeatureKindEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_FeatureKindEnumType_FeatureKindEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_FeatureKindEnumType_FeatureKindEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_FeatureKindEnumType_FeatureKindEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_FeatureKindEnumType_FeatureKindEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_FeatureKindEnumType_FeatureKindEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_FeatureKindEnumType_FeatureKindEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_FeatureKindEnumType_FeatureKindEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_FeatureKindEnumType_FeatureKindEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_FeatureKindEnumType_FeatureKindEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_FeatureKindEnumType_FeatureKindEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_FeatureKindEnumType_FeatureKindEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_FeatureKindEnumType_FeatureKindEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_FeatureKindEnumType_FeatureKindEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_FeatureKindEnumType_FeatureKindEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_FeatureKindEnumType_FeatureKindEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_FeatureKindEnumType_FeatureKindEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_FeatureKindEnumType_FeatureKindEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_FeatureKindEnumType_FeatureKindEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_FeatureKindEnumType_FeatureKindEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_FeatureKindEnumType_FeatureKindEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_FeatureKindEnumType_FeatureKindEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_FeatureKindEnumType_FeatureKindEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_FeatureKindEnumType_FeatureKindEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_FeatureKindEnumType_FeatureKindEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_FeatureKindEnumType_FeatureKindEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_FeatureKindEnumType_FeatureKindEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_FeatureKindEnumType_FeatureKindEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_FeatureKindEnumType_FeatureKindEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_FeatureKindEnumType_FeatureKindEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_FeatureKindEnumType_FeatureKindEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_FeatureKindEnumType_FeatureKindEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_FeatureKindEnumType_FeatureKindEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_FeatureKindEnumType_FeatureKindEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_FeatureKindEnumType_FeatureKindEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_FeatureKindEnumType_FeatureKindEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_FeatureKindEnumType_FeatureKindEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_FeatureKindEnumType_FeatureKindEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_FeatureKindEnumType_FeatureKindEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_FeatureKindEnumType_FeatureKindEnumType_CONTACT;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_FeatureKindEnumType_FeatureKindEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_FeatureKindEnumType_FeatureKindEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_FeatureKindEnumType_FeatureKindEnumType_CONTACT;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_FeatureKindEnumType_FeatureKindEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_FeatureKindEnumType_FeatureKindEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_FeatureKindEnumType_FeatureKindEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_FeatureKindEnumType_FeatureKindEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_FeatureKindEnumType_FeatureKindEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_FeatureKindEnumType_FeatureKindEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_FeatureKindEnumType_FeatureKindEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_FeatureKindEnumType_FeatureKindEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_FeatureKindEnumType_FeatureKindEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_FeatureKindEnumType_FeatureKindEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_FeatureKindEnumType_FeatureKindEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_FeatureKindEnumType_FeatureKindEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_FeatureKindEnumType_FeatureKindEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_FeatureKindEnumType_FeatureKindEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_FeatureKindEnumType_FeatureKindEnumType_copy(
    UMAA_Common_MaritimeEnumeration_FeatureKindEnumType_FeatureKindEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_FeatureKindEnumType_FeatureKindEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_FeatureKindEnumType_FeatureKindEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_FeatureKindEnumType_FeatureKindEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_FeatureKindEnumType_FeatureKindEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_FeatureKindEnumType_FeatureKindEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_FeatureKindEnumType_FeatureKindEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_FeatureKindEnumType_FeatureKindEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_LoiterKindEnumType_LoiterKindEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::LoiterKindEnumType::LoiterKindEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_LoiterKindEnumType_LoiterKindEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_LoiterKindEnumType_LoiterKindEnumType_g_tc_members[2]=
    {

        {
            (char *)"CIRCLE",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_LoiterKindEnumType_LoiterKindEnumType_CIRCLE, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"RACETRACK",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_LoiterKindEnumType_LoiterKindEnumType_RACETRACK, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_LoiterKindEnumType_LoiterKindEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::LoiterKindEnumType::LoiterKindEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            2, /* Number of members */
            UMAA_Common_MaritimeEnumeration_LoiterKindEnumType_LoiterKindEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_LoiterKindEnumType_LoiterKindEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_LoiterKindEnumType_LoiterKindEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_LoiterKindEnumType_LoiterKindEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_LoiterKindEnumType_LoiterKindEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_LoiterKindEnumType_LoiterKindEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_LoiterKindEnumType_LoiterKindEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_LoiterKindEnumType_LoiterKindEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_LoiterKindEnumType_LoiterKindEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_LoiterKindEnumType_LoiterKindEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_LoiterKindEnumType_LoiterKindEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_LoiterKindEnumType_LoiterKindEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_LoiterKindEnumType_LoiterKindEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_LoiterKindEnumType_LoiterKindEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_LoiterKindEnumType_LoiterKindEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_LoiterKindEnumType_LoiterKindEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_LoiterKindEnumType_LoiterKindEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_LoiterKindEnumType_LoiterKindEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_LoiterKindEnumType_LoiterKindEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_LoiterKindEnumType_LoiterKindEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_LoiterKindEnumType_LoiterKindEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_LoiterKindEnumType_LoiterKindEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_LoiterKindEnumType_LoiterKindEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_LoiterKindEnumType_LoiterKindEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_LoiterKindEnumType_LoiterKindEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_LoiterKindEnumType_LoiterKindEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_LoiterKindEnumType_LoiterKindEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_LoiterKindEnumType_LoiterKindEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_LoiterKindEnumType_LoiterKindEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_LoiterKindEnumType_LoiterKindEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_LoiterKindEnumType_LoiterKindEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_LoiterKindEnumType_LoiterKindEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_LoiterKindEnumType_LoiterKindEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_LoiterKindEnumType_LoiterKindEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_LoiterKindEnumType_LoiterKindEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_LoiterKindEnumType_LoiterKindEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_LoiterKindEnumType_LoiterKindEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_LoiterKindEnumType_LoiterKindEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_LoiterKindEnumType_LoiterKindEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_LoiterKindEnumType_LoiterKindEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_LoiterKindEnumType_LoiterKindEnumType_CIRCLE;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_LoiterKindEnumType_LoiterKindEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_LoiterKindEnumType_LoiterKindEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_LoiterKindEnumType_LoiterKindEnumType_CIRCLE;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_LoiterKindEnumType_LoiterKindEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_LoiterKindEnumType_LoiterKindEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_LoiterKindEnumType_LoiterKindEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_LoiterKindEnumType_LoiterKindEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_LoiterKindEnumType_LoiterKindEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_LoiterKindEnumType_LoiterKindEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_LoiterKindEnumType_LoiterKindEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_LoiterKindEnumType_LoiterKindEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_LoiterKindEnumType_LoiterKindEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_LoiterKindEnumType_LoiterKindEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_LoiterKindEnumType_LoiterKindEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_LoiterKindEnumType_LoiterKindEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_LoiterKindEnumType_LoiterKindEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_LoiterKindEnumType_LoiterKindEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_LoiterKindEnumType_LoiterKindEnumType_copy(
    UMAA_Common_MaritimeEnumeration_LoiterKindEnumType_LoiterKindEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_LoiterKindEnumType_LoiterKindEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_LoiterKindEnumType_LoiterKindEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_LoiterKindEnumType_LoiterKindEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_LoiterKindEnumType_LoiterKindEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_LoiterKindEnumType_LoiterKindEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_LoiterKindEnumType_LoiterKindEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_LoiterKindEnumType_LoiterKindEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::TaskStateEnumType::TaskStateEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType_g_tc_members[18]=
    {

        {
            (char *)"PLANNED_PENDING_APPROVAL",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType_PLANNED_PENDING_APPROVAL, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"AWAITING_EXECUTION_APPROVAL",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType_AWAITING_EXECUTION_APPROVAL, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"ALLOCATED",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType_ALLOCATED, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"EXECUTION_APPROVED",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType_EXECUTION_APPROVED, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"CANCELED",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType_CANCELED, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"COMPLETED",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType_COMPLETED, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"DROPPED",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType_DROPPED, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"PLANNED",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType_PLANNED, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"PROPOSED",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType_PROPOSED, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"QUEUED",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType_QUEUED, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"EXECUTING",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType_EXECUTING, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"FAILED",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType_FAILED, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"UNALLOCATED",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType_UNALLOCATED, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"ALLOCATED_PENDING_APPROVAL",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType_ALLOCATED_PENDING_APPROVAL, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"AWAITING_MISSION_PLAN",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType_AWAITING_MISSION_PLAN, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"PAUSED",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType_PAUSED, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"QUEUING",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType_QUEUING, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"PLANNING",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType_PLANNING, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::TaskStateEnumType::TaskStateEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            18, /* Number of members */
            UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType_PLANNED_PENDING_APPROVAL;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType_PLANNED_PENDING_APPROVAL;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType_copy(
    UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_TaskStateEnumType_TaskStateEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_TransportEncodingEnumType_TransportEncodingEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::TransportEncodingEnumType::TransportEncodingEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_TransportEncodingEnumType_TransportEncodingEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_TransportEncodingEnumType_TransportEncodingEnumType_g_tc_members[3]=
    {

        {
            (char *)"MPEG_2",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_TransportEncodingEnumType_TransportEncodingEnumType_MPEG_2, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"MP4",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_TransportEncodingEnumType_TransportEncodingEnumType_MP4, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"OTHER",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_TransportEncodingEnumType_TransportEncodingEnumType_OTHER, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_TransportEncodingEnumType_TransportEncodingEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::TransportEncodingEnumType::TransportEncodingEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            3, /* Number of members */
            UMAA_Common_MaritimeEnumeration_TransportEncodingEnumType_TransportEncodingEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_TransportEncodingEnumType_TransportEncodingEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_TransportEncodingEnumType_TransportEncodingEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_TransportEncodingEnumType_TransportEncodingEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_TransportEncodingEnumType_TransportEncodingEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_TransportEncodingEnumType_TransportEncodingEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_TransportEncodingEnumType_TransportEncodingEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_TransportEncodingEnumType_TransportEncodingEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_TransportEncodingEnumType_TransportEncodingEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_TransportEncodingEnumType_TransportEncodingEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_TransportEncodingEnumType_TransportEncodingEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_TransportEncodingEnumType_TransportEncodingEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_TransportEncodingEnumType_TransportEncodingEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_TransportEncodingEnumType_TransportEncodingEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_TransportEncodingEnumType_TransportEncodingEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_TransportEncodingEnumType_TransportEncodingEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_TransportEncodingEnumType_TransportEncodingEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_TransportEncodingEnumType_TransportEncodingEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_TransportEncodingEnumType_TransportEncodingEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_TransportEncodingEnumType_TransportEncodingEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_TransportEncodingEnumType_TransportEncodingEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_TransportEncodingEnumType_TransportEncodingEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_TransportEncodingEnumType_TransportEncodingEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_TransportEncodingEnumType_TransportEncodingEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_TransportEncodingEnumType_TransportEncodingEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_TransportEncodingEnumType_TransportEncodingEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_TransportEncodingEnumType_TransportEncodingEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_TransportEncodingEnumType_TransportEncodingEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_TransportEncodingEnumType_TransportEncodingEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_TransportEncodingEnumType_TransportEncodingEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_TransportEncodingEnumType_TransportEncodingEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_TransportEncodingEnumType_TransportEncodingEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_TransportEncodingEnumType_TransportEncodingEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_TransportEncodingEnumType_TransportEncodingEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_TransportEncodingEnumType_TransportEncodingEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_TransportEncodingEnumType_TransportEncodingEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_TransportEncodingEnumType_TransportEncodingEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_TransportEncodingEnumType_TransportEncodingEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_TransportEncodingEnumType_TransportEncodingEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_TransportEncodingEnumType_TransportEncodingEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_TransportEncodingEnumType_TransportEncodingEnumType_MPEG_2;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_TransportEncodingEnumType_TransportEncodingEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_TransportEncodingEnumType_TransportEncodingEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_TransportEncodingEnumType_TransportEncodingEnumType_MPEG_2;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_TransportEncodingEnumType_TransportEncodingEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_TransportEncodingEnumType_TransportEncodingEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_TransportEncodingEnumType_TransportEncodingEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_TransportEncodingEnumType_TransportEncodingEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_TransportEncodingEnumType_TransportEncodingEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_TransportEncodingEnumType_TransportEncodingEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_TransportEncodingEnumType_TransportEncodingEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_TransportEncodingEnumType_TransportEncodingEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_TransportEncodingEnumType_TransportEncodingEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_TransportEncodingEnumType_TransportEncodingEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_TransportEncodingEnumType_TransportEncodingEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_TransportEncodingEnumType_TransportEncodingEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_TransportEncodingEnumType_TransportEncodingEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_TransportEncodingEnumType_TransportEncodingEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_TransportEncodingEnumType_TransportEncodingEnumType_copy(
    UMAA_Common_MaritimeEnumeration_TransportEncodingEnumType_TransportEncodingEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_TransportEncodingEnumType_TransportEncodingEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_TransportEncodingEnumType_TransportEncodingEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_TransportEncodingEnumType_TransportEncodingEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_TransportEncodingEnumType_TransportEncodingEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_TransportEncodingEnumType_TransportEncodingEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_TransportEncodingEnumType_TransportEncodingEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_TransportEncodingEnumType_TransportEncodingEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::WaypointKindEnumType::WaypointKindEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType_g_tc_members[9]=
    {

        {
            (char *)"APPROACH_FINAL_POINT",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType_APPROACH_FINAL_POINT, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"APPROACH_INITIAL_POINT",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType_APPROACH_INITIAL_POINT, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"LAUNCH",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType_LAUNCH, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"LOITER",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType_LOITER, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"NAV_ONLY",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType_NAV_ONLY, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"NAV_TARGET",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType_NAV_TARGET, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"OTHER",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType_OTHER, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"RECOVERY",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType_RECOVERY, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"RENDEZVOUS",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType_RENDEZVOUS, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::WaypointKindEnumType::WaypointKindEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            9, /* Number of members */
            UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType_APPROACH_FINAL_POINT;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType_APPROACH_FINAL_POINT;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType_copy(
    UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_WaypointKindEnumType_WaypointKindEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_MeteringModeEnumType_MeteringModeEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::MeteringModeEnumType::MeteringModeEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_MeteringModeEnumType_MeteringModeEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_MeteringModeEnumType_MeteringModeEnumType_g_tc_members[3]=
    {

        {
            (char *)"AUTO_DEFAULT",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_MeteringModeEnumType_MeteringModeEnumType_AUTO_DEFAULT, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"CENTER_WEIGHTED",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_MeteringModeEnumType_MeteringModeEnumType_CENTER_WEIGHTED, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"SPOT",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_MeteringModeEnumType_MeteringModeEnumType_SPOT, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_MeteringModeEnumType_MeteringModeEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::MeteringModeEnumType::MeteringModeEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            3, /* Number of members */
            UMAA_Common_MaritimeEnumeration_MeteringModeEnumType_MeteringModeEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_MeteringModeEnumType_MeteringModeEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_MeteringModeEnumType_MeteringModeEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_MeteringModeEnumType_MeteringModeEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_MeteringModeEnumType_MeteringModeEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_MeteringModeEnumType_MeteringModeEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_MeteringModeEnumType_MeteringModeEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_MeteringModeEnumType_MeteringModeEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_MeteringModeEnumType_MeteringModeEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_MeteringModeEnumType_MeteringModeEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_MeteringModeEnumType_MeteringModeEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_MeteringModeEnumType_MeteringModeEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_MeteringModeEnumType_MeteringModeEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_MeteringModeEnumType_MeteringModeEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_MeteringModeEnumType_MeteringModeEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_MeteringModeEnumType_MeteringModeEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_MeteringModeEnumType_MeteringModeEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_MeteringModeEnumType_MeteringModeEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_MeteringModeEnumType_MeteringModeEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_MeteringModeEnumType_MeteringModeEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_MeteringModeEnumType_MeteringModeEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_MeteringModeEnumType_MeteringModeEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_MeteringModeEnumType_MeteringModeEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_MeteringModeEnumType_MeteringModeEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_MeteringModeEnumType_MeteringModeEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_MeteringModeEnumType_MeteringModeEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_MeteringModeEnumType_MeteringModeEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_MeteringModeEnumType_MeteringModeEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_MeteringModeEnumType_MeteringModeEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_MeteringModeEnumType_MeteringModeEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_MeteringModeEnumType_MeteringModeEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_MeteringModeEnumType_MeteringModeEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_MeteringModeEnumType_MeteringModeEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_MeteringModeEnumType_MeteringModeEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_MeteringModeEnumType_MeteringModeEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_MeteringModeEnumType_MeteringModeEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_MeteringModeEnumType_MeteringModeEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_MeteringModeEnumType_MeteringModeEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_MeteringModeEnumType_MeteringModeEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_MeteringModeEnumType_MeteringModeEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_MeteringModeEnumType_MeteringModeEnumType_AUTO_DEFAULT;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_MeteringModeEnumType_MeteringModeEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_MeteringModeEnumType_MeteringModeEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_MeteringModeEnumType_MeteringModeEnumType_AUTO_DEFAULT;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_MeteringModeEnumType_MeteringModeEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_MeteringModeEnumType_MeteringModeEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_MeteringModeEnumType_MeteringModeEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_MeteringModeEnumType_MeteringModeEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_MeteringModeEnumType_MeteringModeEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_MeteringModeEnumType_MeteringModeEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_MeteringModeEnumType_MeteringModeEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_MeteringModeEnumType_MeteringModeEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_MeteringModeEnumType_MeteringModeEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_MeteringModeEnumType_MeteringModeEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_MeteringModeEnumType_MeteringModeEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_MeteringModeEnumType_MeteringModeEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_MeteringModeEnumType_MeteringModeEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_MeteringModeEnumType_MeteringModeEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_MeteringModeEnumType_MeteringModeEnumType_copy(
    UMAA_Common_MaritimeEnumeration_MeteringModeEnumType_MeteringModeEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_MeteringModeEnumType_MeteringModeEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_MeteringModeEnumType_MeteringModeEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_MeteringModeEnumType_MeteringModeEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_MeteringModeEnumType_MeteringModeEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_MeteringModeEnumType_MeteringModeEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_MeteringModeEnumType_MeteringModeEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_MeteringModeEnumType_MeteringModeEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::MountModeEnumType::MountModeEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumType_g_tc_members[7]=
    {

        {
            (char *)"_FIXED",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumType__FIXED, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"FIXED_BOW_THRUSTER",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumType_FIXED_BOW_THRUSTER, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"FIXED_PORT_PROPULSOR",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumType_FIXED_PORT_PROPULSOR, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"FIXED_STERN_THRUSTER",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumType_FIXED_STERN_THRUSTER, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"VARIABLE_BEARING",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumType_VARIABLE_BEARING, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"VARIABLE_PITCH",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumType_VARIABLE_PITCH, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"VARIABLE_PITCH_AND_BEARING",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumType_VARIABLE_PITCH_AND_BEARING, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::MountModeEnumType::MountModeEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            7, /* Number of members */
            UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumType__FIXED;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumType__FIXED;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumType_copy(
    UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_MountModeEnumType_MountModeEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_NavigationSolutionEnumType_NavigationSolutionEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::NavigationSolutionEnumType::NavigationSolutionEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_NavigationSolutionEnumType_NavigationSolutionEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_NavigationSolutionEnumType_NavigationSolutionEnumType_g_tc_members[3]=
    {

        {
            (char *)"ESTIMATED",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_NavigationSolutionEnumType_NavigationSolutionEnumType_ESTIMATED, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"GROUND_TRUTH",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_NavigationSolutionEnumType_NavigationSolutionEnumType_GROUND_TRUTH, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"MEASURED",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_NavigationSolutionEnumType_NavigationSolutionEnumType_MEASURED, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_NavigationSolutionEnumType_NavigationSolutionEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::NavigationSolutionEnumType::NavigationSolutionEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            3, /* Number of members */
            UMAA_Common_MaritimeEnumeration_NavigationSolutionEnumType_NavigationSolutionEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_NavigationSolutionEnumType_NavigationSolutionEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_NavigationSolutionEnumType_NavigationSolutionEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_NavigationSolutionEnumType_NavigationSolutionEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_NavigationSolutionEnumType_NavigationSolutionEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_NavigationSolutionEnumType_NavigationSolutionEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_NavigationSolutionEnumType_NavigationSolutionEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_NavigationSolutionEnumType_NavigationSolutionEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_NavigationSolutionEnumType_NavigationSolutionEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_NavigationSolutionEnumType_NavigationSolutionEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_NavigationSolutionEnumType_NavigationSolutionEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_NavigationSolutionEnumType_NavigationSolutionEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_NavigationSolutionEnumType_NavigationSolutionEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_NavigationSolutionEnumType_NavigationSolutionEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_NavigationSolutionEnumType_NavigationSolutionEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_NavigationSolutionEnumType_NavigationSolutionEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_NavigationSolutionEnumType_NavigationSolutionEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_NavigationSolutionEnumType_NavigationSolutionEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_NavigationSolutionEnumType_NavigationSolutionEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_NavigationSolutionEnumType_NavigationSolutionEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_NavigationSolutionEnumType_NavigationSolutionEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_NavigationSolutionEnumType_NavigationSolutionEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_NavigationSolutionEnumType_NavigationSolutionEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_NavigationSolutionEnumType_NavigationSolutionEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_NavigationSolutionEnumType_NavigationSolutionEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_NavigationSolutionEnumType_NavigationSolutionEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_NavigationSolutionEnumType_NavigationSolutionEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_NavigationSolutionEnumType_NavigationSolutionEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_NavigationSolutionEnumType_NavigationSolutionEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_NavigationSolutionEnumType_NavigationSolutionEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_NavigationSolutionEnumType_NavigationSolutionEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_NavigationSolutionEnumType_NavigationSolutionEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_NavigationSolutionEnumType_NavigationSolutionEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_NavigationSolutionEnumType_NavigationSolutionEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_NavigationSolutionEnumType_NavigationSolutionEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_NavigationSolutionEnumType_NavigationSolutionEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_NavigationSolutionEnumType_NavigationSolutionEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_NavigationSolutionEnumType_NavigationSolutionEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_NavigationSolutionEnumType_NavigationSolutionEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_NavigationSolutionEnumType_NavigationSolutionEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_NavigationSolutionEnumType_NavigationSolutionEnumType_ESTIMATED;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_NavigationSolutionEnumType_NavigationSolutionEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_NavigationSolutionEnumType_NavigationSolutionEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_NavigationSolutionEnumType_NavigationSolutionEnumType_ESTIMATED;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_NavigationSolutionEnumType_NavigationSolutionEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_NavigationSolutionEnumType_NavigationSolutionEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_NavigationSolutionEnumType_NavigationSolutionEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_NavigationSolutionEnumType_NavigationSolutionEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_NavigationSolutionEnumType_NavigationSolutionEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_NavigationSolutionEnumType_NavigationSolutionEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_NavigationSolutionEnumType_NavigationSolutionEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_NavigationSolutionEnumType_NavigationSolutionEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_NavigationSolutionEnumType_NavigationSolutionEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_NavigationSolutionEnumType_NavigationSolutionEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_NavigationSolutionEnumType_NavigationSolutionEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_NavigationSolutionEnumType_NavigationSolutionEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_NavigationSolutionEnumType_NavigationSolutionEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_NavigationSolutionEnumType_NavigationSolutionEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_NavigationSolutionEnumType_NavigationSolutionEnumType_copy(
    UMAA_Common_MaritimeEnumeration_NavigationSolutionEnumType_NavigationSolutionEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_NavigationSolutionEnumType_NavigationSolutionEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_NavigationSolutionEnumType_NavigationSolutionEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_NavigationSolutionEnumType_NavigationSolutionEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_NavigationSolutionEnumType_NavigationSolutionEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_NavigationSolutionEnumType_NavigationSolutionEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_NavigationSolutionEnumType_NavigationSolutionEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_NavigationSolutionEnumType_NavigationSolutionEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_ObstacleAvoidanceEnumType_ObstacleAvoidanceEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::ObstacleAvoidanceEnumType::ObstacleAvoidanceEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_ObstacleAvoidanceEnumType_ObstacleAvoidanceEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_ObstacleAvoidanceEnumType_ObstacleAvoidanceEnumType_g_tc_members[3]=
    {

        {
            (char *)"DEVIATE_FROM_PATH",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_ObstacleAvoidanceEnumType_ObstacleAvoidanceEnumType_DEVIATE_FROM_PATH, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"DO_NOTHING",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_ObstacleAvoidanceEnumType_ObstacleAvoidanceEnumType_DO_NOTHING, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"STOP_ON_PATH",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_ObstacleAvoidanceEnumType_ObstacleAvoidanceEnumType_STOP_ON_PATH, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_ObstacleAvoidanceEnumType_ObstacleAvoidanceEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::ObstacleAvoidanceEnumType::ObstacleAvoidanceEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            3, /* Number of members */
            UMAA_Common_MaritimeEnumeration_ObstacleAvoidanceEnumType_ObstacleAvoidanceEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_ObstacleAvoidanceEnumType_ObstacleAvoidanceEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_ObstacleAvoidanceEnumType_ObstacleAvoidanceEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_ObstacleAvoidanceEnumType_ObstacleAvoidanceEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_ObstacleAvoidanceEnumType_ObstacleAvoidanceEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_ObstacleAvoidanceEnumType_ObstacleAvoidanceEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_ObstacleAvoidanceEnumType_ObstacleAvoidanceEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_ObstacleAvoidanceEnumType_ObstacleAvoidanceEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_ObstacleAvoidanceEnumType_ObstacleAvoidanceEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_ObstacleAvoidanceEnumType_ObstacleAvoidanceEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_ObstacleAvoidanceEnumType_ObstacleAvoidanceEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_ObstacleAvoidanceEnumType_ObstacleAvoidanceEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_ObstacleAvoidanceEnumType_ObstacleAvoidanceEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_ObstacleAvoidanceEnumType_ObstacleAvoidanceEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_ObstacleAvoidanceEnumType_ObstacleAvoidanceEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_ObstacleAvoidanceEnumType_ObstacleAvoidanceEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_ObstacleAvoidanceEnumType_ObstacleAvoidanceEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_ObstacleAvoidanceEnumType_ObstacleAvoidanceEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_ObstacleAvoidanceEnumType_ObstacleAvoidanceEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_ObstacleAvoidanceEnumType_ObstacleAvoidanceEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_ObstacleAvoidanceEnumType_ObstacleAvoidanceEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_ObstacleAvoidanceEnumType_ObstacleAvoidanceEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_ObstacleAvoidanceEnumType_ObstacleAvoidanceEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_ObstacleAvoidanceEnumType_ObstacleAvoidanceEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_ObstacleAvoidanceEnumType_ObstacleAvoidanceEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_ObstacleAvoidanceEnumType_ObstacleAvoidanceEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_ObstacleAvoidanceEnumType_ObstacleAvoidanceEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_ObstacleAvoidanceEnumType_ObstacleAvoidanceEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_ObstacleAvoidanceEnumType_ObstacleAvoidanceEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_ObstacleAvoidanceEnumType_ObstacleAvoidanceEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_ObstacleAvoidanceEnumType_ObstacleAvoidanceEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_ObstacleAvoidanceEnumType_ObstacleAvoidanceEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_ObstacleAvoidanceEnumType_ObstacleAvoidanceEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_ObstacleAvoidanceEnumType_ObstacleAvoidanceEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_ObstacleAvoidanceEnumType_ObstacleAvoidanceEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_ObstacleAvoidanceEnumType_ObstacleAvoidanceEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_ObstacleAvoidanceEnumType_ObstacleAvoidanceEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_ObstacleAvoidanceEnumType_ObstacleAvoidanceEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_ObstacleAvoidanceEnumType_ObstacleAvoidanceEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_ObstacleAvoidanceEnumType_ObstacleAvoidanceEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_ObstacleAvoidanceEnumType_ObstacleAvoidanceEnumType_DEVIATE_FROM_PATH;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_ObstacleAvoidanceEnumType_ObstacleAvoidanceEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_ObstacleAvoidanceEnumType_ObstacleAvoidanceEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_ObstacleAvoidanceEnumType_ObstacleAvoidanceEnumType_DEVIATE_FROM_PATH;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_ObstacleAvoidanceEnumType_ObstacleAvoidanceEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_ObstacleAvoidanceEnumType_ObstacleAvoidanceEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_ObstacleAvoidanceEnumType_ObstacleAvoidanceEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_ObstacleAvoidanceEnumType_ObstacleAvoidanceEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_ObstacleAvoidanceEnumType_ObstacleAvoidanceEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_ObstacleAvoidanceEnumType_ObstacleAvoidanceEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_ObstacleAvoidanceEnumType_ObstacleAvoidanceEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_ObstacleAvoidanceEnumType_ObstacleAvoidanceEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_ObstacleAvoidanceEnumType_ObstacleAvoidanceEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_ObstacleAvoidanceEnumType_ObstacleAvoidanceEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_ObstacleAvoidanceEnumType_ObstacleAvoidanceEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_ObstacleAvoidanceEnumType_ObstacleAvoidanceEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_ObstacleAvoidanceEnumType_ObstacleAvoidanceEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_ObstacleAvoidanceEnumType_ObstacleAvoidanceEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_ObstacleAvoidanceEnumType_ObstacleAvoidanceEnumType_copy(
    UMAA_Common_MaritimeEnumeration_ObstacleAvoidanceEnumType_ObstacleAvoidanceEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_ObstacleAvoidanceEnumType_ObstacleAvoidanceEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_ObstacleAvoidanceEnumType_ObstacleAvoidanceEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_ObstacleAvoidanceEnumType_ObstacleAvoidanceEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_ObstacleAvoidanceEnumType_ObstacleAvoidanceEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_ObstacleAvoidanceEnumType_ObstacleAvoidanceEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_ObstacleAvoidanceEnumType_ObstacleAvoidanceEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_ObstacleAvoidanceEnumType_ObstacleAvoidanceEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::PathWayEnumType::PathWayEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumType_g_tc_members[4]=
    {

        {
            (char *)"HISTORIAL_GLOBAL",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumType_HISTORIAL_GLOBAL, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"HISTORICAL_LOCAL",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumType_HISTORICAL_LOCAL, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"PLANNED_GLOBAL",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumType_PLANNED_GLOBAL, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"PLANNED_LOCAL",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumType_PLANNED_LOCAL, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::PathWayEnumType::PathWayEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            4, /* Number of members */
            UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumType_HISTORIAL_GLOBAL;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumType_HISTORIAL_GLOBAL;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumType_copy(
    UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_PathWayEnumType_PathWayEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_PlatformModeEnumType_PlatformModeEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::PlatformModeEnumType::PlatformModeEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_PlatformModeEnumType_PlatformModeEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_PlatformModeEnumType_PlatformModeEnumType_g_tc_members[3]=
    {

        {
            (char *)"MAINTENANCE",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_PlatformModeEnumType_PlatformModeEnumType_MAINTENANCE, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"STANDARD_OPERATING",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_PlatformModeEnumType_PlatformModeEnumType_STANDARD_OPERATING, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"TRAINING",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_PlatformModeEnumType_PlatformModeEnumType_TRAINING, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_PlatformModeEnumType_PlatformModeEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::PlatformModeEnumType::PlatformModeEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            3, /* Number of members */
            UMAA_Common_MaritimeEnumeration_PlatformModeEnumType_PlatformModeEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_PlatformModeEnumType_PlatformModeEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_PlatformModeEnumType_PlatformModeEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_PlatformModeEnumType_PlatformModeEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_PlatformModeEnumType_PlatformModeEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_PlatformModeEnumType_PlatformModeEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_PlatformModeEnumType_PlatformModeEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_PlatformModeEnumType_PlatformModeEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_PlatformModeEnumType_PlatformModeEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_PlatformModeEnumType_PlatformModeEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_PlatformModeEnumType_PlatformModeEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_PlatformModeEnumType_PlatformModeEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_PlatformModeEnumType_PlatformModeEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_PlatformModeEnumType_PlatformModeEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_PlatformModeEnumType_PlatformModeEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_PlatformModeEnumType_PlatformModeEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_PlatformModeEnumType_PlatformModeEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_PlatformModeEnumType_PlatformModeEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_PlatformModeEnumType_PlatformModeEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_PlatformModeEnumType_PlatformModeEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_PlatformModeEnumType_PlatformModeEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_PlatformModeEnumType_PlatformModeEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_PlatformModeEnumType_PlatformModeEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_PlatformModeEnumType_PlatformModeEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_PlatformModeEnumType_PlatformModeEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_PlatformModeEnumType_PlatformModeEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_PlatformModeEnumType_PlatformModeEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_PlatformModeEnumType_PlatformModeEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_PlatformModeEnumType_PlatformModeEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_PlatformModeEnumType_PlatformModeEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_PlatformModeEnumType_PlatformModeEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_PlatformModeEnumType_PlatformModeEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_PlatformModeEnumType_PlatformModeEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_PlatformModeEnumType_PlatformModeEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_PlatformModeEnumType_PlatformModeEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_PlatformModeEnumType_PlatformModeEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_PlatformModeEnumType_PlatformModeEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_PlatformModeEnumType_PlatformModeEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_PlatformModeEnumType_PlatformModeEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_PlatformModeEnumType_PlatformModeEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_PlatformModeEnumType_PlatformModeEnumType_MAINTENANCE;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_PlatformModeEnumType_PlatformModeEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_PlatformModeEnumType_PlatformModeEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_PlatformModeEnumType_PlatformModeEnumType_MAINTENANCE;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_PlatformModeEnumType_PlatformModeEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_PlatformModeEnumType_PlatformModeEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_PlatformModeEnumType_PlatformModeEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_PlatformModeEnumType_PlatformModeEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_PlatformModeEnumType_PlatformModeEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_PlatformModeEnumType_PlatformModeEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_PlatformModeEnumType_PlatformModeEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_PlatformModeEnumType_PlatformModeEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_PlatformModeEnumType_PlatformModeEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_PlatformModeEnumType_PlatformModeEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_PlatformModeEnumType_PlatformModeEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_PlatformModeEnumType_PlatformModeEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_PlatformModeEnumType_PlatformModeEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_PlatformModeEnumType_PlatformModeEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_PlatformModeEnumType_PlatformModeEnumType_copy(
    UMAA_Common_MaritimeEnumeration_PlatformModeEnumType_PlatformModeEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_PlatformModeEnumType_PlatformModeEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_PlatformModeEnumType_PlatformModeEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_PlatformModeEnumType_PlatformModeEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_PlatformModeEnumType_PlatformModeEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_PlatformModeEnumType_PlatformModeEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_PlatformModeEnumType_PlatformModeEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_PlatformModeEnumType_PlatformModeEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_PlatformModeTransitionEnumType_PlatformModeTransitionEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::PlatformModeTransitionEnumType::PlatformModeTransitionEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_PlatformModeTransitionEnumType_PlatformModeTransitionEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_PlatformModeTransitionEnumType_PlatformModeTransitionEnumType_g_tc_members[3]=
    {

        {
            (char *)"ACTIVE",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_PlatformModeTransitionEnumType_PlatformModeTransitionEnumType_ACTIVE, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"EXITING",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_PlatformModeTransitionEnumType_PlatformModeTransitionEnumType_EXITING, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"INITIALIZING",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_PlatformModeTransitionEnumType_PlatformModeTransitionEnumType_INITIALIZING, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_PlatformModeTransitionEnumType_PlatformModeTransitionEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::PlatformModeTransitionEnumType::PlatformModeTransitionEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            3, /* Number of members */
            UMAA_Common_MaritimeEnumeration_PlatformModeTransitionEnumType_PlatformModeTransitionEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_PlatformModeTransitionEnumType_PlatformModeTransitionEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_PlatformModeTransitionEnumType_PlatformModeTransitionEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_PlatformModeTransitionEnumType_PlatformModeTransitionEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_PlatformModeTransitionEnumType_PlatformModeTransitionEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_PlatformModeTransitionEnumType_PlatformModeTransitionEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_PlatformModeTransitionEnumType_PlatformModeTransitionEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_PlatformModeTransitionEnumType_PlatformModeTransitionEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_PlatformModeTransitionEnumType_PlatformModeTransitionEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_PlatformModeTransitionEnumType_PlatformModeTransitionEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_PlatformModeTransitionEnumType_PlatformModeTransitionEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_PlatformModeTransitionEnumType_PlatformModeTransitionEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_PlatformModeTransitionEnumType_PlatformModeTransitionEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_PlatformModeTransitionEnumType_PlatformModeTransitionEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_PlatformModeTransitionEnumType_PlatformModeTransitionEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_PlatformModeTransitionEnumType_PlatformModeTransitionEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_PlatformModeTransitionEnumType_PlatformModeTransitionEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_PlatformModeTransitionEnumType_PlatformModeTransitionEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_PlatformModeTransitionEnumType_PlatformModeTransitionEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_PlatformModeTransitionEnumType_PlatformModeTransitionEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_PlatformModeTransitionEnumType_PlatformModeTransitionEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_PlatformModeTransitionEnumType_PlatformModeTransitionEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_PlatformModeTransitionEnumType_PlatformModeTransitionEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_PlatformModeTransitionEnumType_PlatformModeTransitionEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_PlatformModeTransitionEnumType_PlatformModeTransitionEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_PlatformModeTransitionEnumType_PlatformModeTransitionEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_PlatformModeTransitionEnumType_PlatformModeTransitionEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_PlatformModeTransitionEnumType_PlatformModeTransitionEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_PlatformModeTransitionEnumType_PlatformModeTransitionEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_PlatformModeTransitionEnumType_PlatformModeTransitionEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_PlatformModeTransitionEnumType_PlatformModeTransitionEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_PlatformModeTransitionEnumType_PlatformModeTransitionEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_PlatformModeTransitionEnumType_PlatformModeTransitionEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_PlatformModeTransitionEnumType_PlatformModeTransitionEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_PlatformModeTransitionEnumType_PlatformModeTransitionEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_PlatformModeTransitionEnumType_PlatformModeTransitionEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_PlatformModeTransitionEnumType_PlatformModeTransitionEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_PlatformModeTransitionEnumType_PlatformModeTransitionEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_PlatformModeTransitionEnumType_PlatformModeTransitionEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_PlatformModeTransitionEnumType_PlatformModeTransitionEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_PlatformModeTransitionEnumType_PlatformModeTransitionEnumType_ACTIVE;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_PlatformModeTransitionEnumType_PlatformModeTransitionEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_PlatformModeTransitionEnumType_PlatformModeTransitionEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_PlatformModeTransitionEnumType_PlatformModeTransitionEnumType_ACTIVE;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_PlatformModeTransitionEnumType_PlatformModeTransitionEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_PlatformModeTransitionEnumType_PlatformModeTransitionEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_PlatformModeTransitionEnumType_PlatformModeTransitionEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_PlatformModeTransitionEnumType_PlatformModeTransitionEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_PlatformModeTransitionEnumType_PlatformModeTransitionEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_PlatformModeTransitionEnumType_PlatformModeTransitionEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_PlatformModeTransitionEnumType_PlatformModeTransitionEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_PlatformModeTransitionEnumType_PlatformModeTransitionEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_PlatformModeTransitionEnumType_PlatformModeTransitionEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_PlatformModeTransitionEnumType_PlatformModeTransitionEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_PlatformModeTransitionEnumType_PlatformModeTransitionEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_PlatformModeTransitionEnumType_PlatformModeTransitionEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_PlatformModeTransitionEnumType_PlatformModeTransitionEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_PlatformModeTransitionEnumType_PlatformModeTransitionEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_PlatformModeTransitionEnumType_PlatformModeTransitionEnumType_copy(
    UMAA_Common_MaritimeEnumeration_PlatformModeTransitionEnumType_PlatformModeTransitionEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_PlatformModeTransitionEnumType_PlatformModeTransitionEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_PlatformModeTransitionEnumType_PlatformModeTransitionEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_PlatformModeTransitionEnumType_PlatformModeTransitionEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_PlatformModeTransitionEnumType_PlatformModeTransitionEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_PlatformModeTransitionEnumType_PlatformModeTransitionEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_PlatformModeTransitionEnumType_PlatformModeTransitionEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_PlatformModeTransitionEnumType_PlatformModeTransitionEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_PowerPlantStateEnumType_PowerPlantStateEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::PowerPlantStateEnumType::PowerPlantStateEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_PowerPlantStateEnumType_PowerPlantStateEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_PowerPlantStateEnumType_PowerPlantStateEnumType_g_tc_members[3]=
    {

        {
            (char *)"FAULT",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_PowerPlantStateEnumType_PowerPlantStateEnumType_FAULT, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"OFF",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_PowerPlantStateEnumType_PowerPlantStateEnumType_OFF, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"ON",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_PowerPlantStateEnumType_PowerPlantStateEnumType_ON, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_PowerPlantStateEnumType_PowerPlantStateEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::PowerPlantStateEnumType::PowerPlantStateEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            3, /* Number of members */
            UMAA_Common_MaritimeEnumeration_PowerPlantStateEnumType_PowerPlantStateEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_PowerPlantStateEnumType_PowerPlantStateEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_PowerPlantStateEnumType_PowerPlantStateEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_PowerPlantStateEnumType_PowerPlantStateEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_PowerPlantStateEnumType_PowerPlantStateEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_PowerPlantStateEnumType_PowerPlantStateEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_PowerPlantStateEnumType_PowerPlantStateEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_PowerPlantStateEnumType_PowerPlantStateEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_PowerPlantStateEnumType_PowerPlantStateEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_PowerPlantStateEnumType_PowerPlantStateEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_PowerPlantStateEnumType_PowerPlantStateEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_PowerPlantStateEnumType_PowerPlantStateEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_PowerPlantStateEnumType_PowerPlantStateEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_PowerPlantStateEnumType_PowerPlantStateEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_PowerPlantStateEnumType_PowerPlantStateEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_PowerPlantStateEnumType_PowerPlantStateEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_PowerPlantStateEnumType_PowerPlantStateEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_PowerPlantStateEnumType_PowerPlantStateEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_PowerPlantStateEnumType_PowerPlantStateEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_PowerPlantStateEnumType_PowerPlantStateEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_PowerPlantStateEnumType_PowerPlantStateEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_PowerPlantStateEnumType_PowerPlantStateEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_PowerPlantStateEnumType_PowerPlantStateEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_PowerPlantStateEnumType_PowerPlantStateEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_PowerPlantStateEnumType_PowerPlantStateEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_PowerPlantStateEnumType_PowerPlantStateEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_PowerPlantStateEnumType_PowerPlantStateEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_PowerPlantStateEnumType_PowerPlantStateEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_PowerPlantStateEnumType_PowerPlantStateEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_PowerPlantStateEnumType_PowerPlantStateEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_PowerPlantStateEnumType_PowerPlantStateEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_PowerPlantStateEnumType_PowerPlantStateEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_PowerPlantStateEnumType_PowerPlantStateEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_PowerPlantStateEnumType_PowerPlantStateEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_PowerPlantStateEnumType_PowerPlantStateEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_PowerPlantStateEnumType_PowerPlantStateEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_PowerPlantStateEnumType_PowerPlantStateEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_PowerPlantStateEnumType_PowerPlantStateEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_PowerPlantStateEnumType_PowerPlantStateEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_PowerPlantStateEnumType_PowerPlantStateEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_PowerPlantStateEnumType_PowerPlantStateEnumType_FAULT;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_PowerPlantStateEnumType_PowerPlantStateEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_PowerPlantStateEnumType_PowerPlantStateEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_PowerPlantStateEnumType_PowerPlantStateEnumType_FAULT;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_PowerPlantStateEnumType_PowerPlantStateEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_PowerPlantStateEnumType_PowerPlantStateEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_PowerPlantStateEnumType_PowerPlantStateEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_PowerPlantStateEnumType_PowerPlantStateEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_PowerPlantStateEnumType_PowerPlantStateEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_PowerPlantStateEnumType_PowerPlantStateEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_PowerPlantStateEnumType_PowerPlantStateEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_PowerPlantStateEnumType_PowerPlantStateEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_PowerPlantStateEnumType_PowerPlantStateEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_PowerPlantStateEnumType_PowerPlantStateEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_PowerPlantStateEnumType_PowerPlantStateEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_PowerPlantStateEnumType_PowerPlantStateEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_PowerPlantStateEnumType_PowerPlantStateEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_PowerPlantStateEnumType_PowerPlantStateEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_PowerPlantStateEnumType_PowerPlantStateEnumType_copy(
    UMAA_Common_MaritimeEnumeration_PowerPlantStateEnumType_PowerPlantStateEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_PowerPlantStateEnumType_PowerPlantStateEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_PowerPlantStateEnumType_PowerPlantStateEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_PowerPlantStateEnumType_PowerPlantStateEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_PowerPlantStateEnumType_PowerPlantStateEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_PowerPlantStateEnumType_PowerPlantStateEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_PowerPlantStateEnumType_PowerPlantStateEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_PowerPlantStateEnumType_PowerPlantStateEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::PumpStateEnumType::PumpStateEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumType_g_tc_members[4]=
    {

        {
            (char *)"FAULT",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumType_FAULT, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"OFF",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumType_OFF, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"ON_FORWARD",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumType_ON_FORWARD, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"ON_REVERSE",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumType_ON_REVERSE, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::PumpStateEnumType::PumpStateEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            4, /* Number of members */
            UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumType_FAULT;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumType_FAULT;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumType_copy(
    UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_PumpStateEnumType_PumpStateEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::RangeErrorCodeEnumType::RangeErrorCodeEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumType_g_tc_members[8]=
    {

        {
            (char *)"INVALID_HORIZONTAL_FOV",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumType_INVALID_HORIZONTAL_FOV, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"INVALID_SENSOR_RANGE",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumType_INVALID_SENSOR_RANGE, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"INVALID_SENSOR_STATE",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumType_INVALID_SENSOR_STATE, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"INVALID_UPDATE_RATE",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumType_INVALID_UPDATE_RATE, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"INVALID_VERTICAL_FOV",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumType_INVALID_VERTICAL_FOV, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"MULTIPLE_INVALID_PARAMETERS",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumType_MULTIPLE_INVALID_PARAMETERS, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"UNKNOWN_ERROR_FAULT",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumType_UNKNOWN_ERROR_FAULT, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"UNKNOWN_SENSOR_ID",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumType_UNKNOWN_SENSOR_ID, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::RangeErrorCodeEnumType::RangeErrorCodeEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            8, /* Number of members */
            UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumType_INVALID_HORIZONTAL_FOV;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumType_INVALID_HORIZONTAL_FOV;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumType_copy(
    UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_RangeErrorCodeEnumType_RangeErrorCodeEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_RenderUselessStateEnumType_RenderUselessStateEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::RenderUselessStateEnumType::RenderUselessStateEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_RenderUselessStateEnumType_RenderUselessStateEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_RenderUselessStateEnumType_RenderUselessStateEnumType_g_tc_members[3]=
    {

        {
            (char *)"NORMAL",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_RenderUselessStateEnumType_RenderUselessStateEnumType_NORMAL, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"RENDERED_USELESS",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_RenderUselessStateEnumType_RenderUselessStateEnumType_RENDERED_USELESS, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"RENDERED_USELESS_FAILED",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_RenderUselessStateEnumType_RenderUselessStateEnumType_RENDERED_USELESS_FAILED, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_RenderUselessStateEnumType_RenderUselessStateEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::RenderUselessStateEnumType::RenderUselessStateEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            3, /* Number of members */
            UMAA_Common_MaritimeEnumeration_RenderUselessStateEnumType_RenderUselessStateEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_RenderUselessStateEnumType_RenderUselessStateEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_RenderUselessStateEnumType_RenderUselessStateEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_RenderUselessStateEnumType_RenderUselessStateEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_RenderUselessStateEnumType_RenderUselessStateEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_RenderUselessStateEnumType_RenderUselessStateEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_RenderUselessStateEnumType_RenderUselessStateEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_RenderUselessStateEnumType_RenderUselessStateEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_RenderUselessStateEnumType_RenderUselessStateEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_RenderUselessStateEnumType_RenderUselessStateEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_RenderUselessStateEnumType_RenderUselessStateEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_RenderUselessStateEnumType_RenderUselessStateEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_RenderUselessStateEnumType_RenderUselessStateEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_RenderUselessStateEnumType_RenderUselessStateEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_RenderUselessStateEnumType_RenderUselessStateEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_RenderUselessStateEnumType_RenderUselessStateEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_RenderUselessStateEnumType_RenderUselessStateEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_RenderUselessStateEnumType_RenderUselessStateEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_RenderUselessStateEnumType_RenderUselessStateEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_RenderUselessStateEnumType_RenderUselessStateEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_RenderUselessStateEnumType_RenderUselessStateEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_RenderUselessStateEnumType_RenderUselessStateEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_RenderUselessStateEnumType_RenderUselessStateEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_RenderUselessStateEnumType_RenderUselessStateEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_RenderUselessStateEnumType_RenderUselessStateEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_RenderUselessStateEnumType_RenderUselessStateEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_RenderUselessStateEnumType_RenderUselessStateEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_RenderUselessStateEnumType_RenderUselessStateEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_RenderUselessStateEnumType_RenderUselessStateEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_RenderUselessStateEnumType_RenderUselessStateEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_RenderUselessStateEnumType_RenderUselessStateEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_RenderUselessStateEnumType_RenderUselessStateEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_RenderUselessStateEnumType_RenderUselessStateEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_RenderUselessStateEnumType_RenderUselessStateEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_RenderUselessStateEnumType_RenderUselessStateEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_RenderUselessStateEnumType_RenderUselessStateEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_RenderUselessStateEnumType_RenderUselessStateEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_RenderUselessStateEnumType_RenderUselessStateEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_RenderUselessStateEnumType_RenderUselessStateEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_RenderUselessStateEnumType_RenderUselessStateEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_RenderUselessStateEnumType_RenderUselessStateEnumType_NORMAL;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_RenderUselessStateEnumType_RenderUselessStateEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_RenderUselessStateEnumType_RenderUselessStateEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_RenderUselessStateEnumType_RenderUselessStateEnumType_NORMAL;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_RenderUselessStateEnumType_RenderUselessStateEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_RenderUselessStateEnumType_RenderUselessStateEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_RenderUselessStateEnumType_RenderUselessStateEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_RenderUselessStateEnumType_RenderUselessStateEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_RenderUselessStateEnumType_RenderUselessStateEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_RenderUselessStateEnumType_RenderUselessStateEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_RenderUselessStateEnumType_RenderUselessStateEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_RenderUselessStateEnumType_RenderUselessStateEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_RenderUselessStateEnumType_RenderUselessStateEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_RenderUselessStateEnumType_RenderUselessStateEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_RenderUselessStateEnumType_RenderUselessStateEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_RenderUselessStateEnumType_RenderUselessStateEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_RenderUselessStateEnumType_RenderUselessStateEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_RenderUselessStateEnumType_RenderUselessStateEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_RenderUselessStateEnumType_RenderUselessStateEnumType_copy(
    UMAA_Common_MaritimeEnumeration_RenderUselessStateEnumType_RenderUselessStateEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_RenderUselessStateEnumType_RenderUselessStateEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_RenderUselessStateEnumType_RenderUselessStateEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_RenderUselessStateEnumType_RenderUselessStateEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_RenderUselessStateEnumType_RenderUselessStateEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_RenderUselessStateEnumType_RenderUselessStateEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_RenderUselessStateEnumType_RenderUselessStateEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_RenderUselessStateEnumType_RenderUselessStateEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::SourceIndicatorEnumType::SourceIndicatorEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumType_g_tc_members[4]=
    {

        {
            (char *)"ACTUAL",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumType_ACTUAL, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"GROUND_TRUTH",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumType_GROUND_TRUTH, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"SIMULATED",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumType_SIMULATED, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"TENTATIVE",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumType_TENTATIVE, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::SourceIndicatorEnumType::SourceIndicatorEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            4, /* Number of members */
            UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumType_ACTUAL;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumType_ACTUAL;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumType_copy(
    UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_SourceIndicatorEnumType_SourceIndicatorEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::StillImageErrorCodeEnumType::StillImageErrorCodeEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumType_g_tc_members[5]=
    {

        {
            (char *)"INVALID_FORMAT",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumType_INVALID_FORMAT, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"INVALID_FRAME_SIZE",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumType_INVALID_FRAME_SIZE, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"MULTIPLE_INVALID_PARAMETERS",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumType_MULTIPLE_INVALID_PARAMETERS, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"UNKNOWN_ERROR_FAULT",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumType_UNKNOWN_ERROR_FAULT, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"UNKNOWN_SENSOR_ID",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumType_UNKNOWN_SENSOR_ID, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::StillImageErrorCodeEnumType::StillImageErrorCodeEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            5, /* Number of members */
            UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumType_INVALID_FORMAT;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumType_INVALID_FORMAT;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumType_copy(
    UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_StillImageErrorCodeEnumType_StillImageErrorCodeEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_StreamStateEnumType_StreamStateEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::StreamStateEnumType::StreamStateEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_StreamStateEnumType_StreamStateEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_StreamStateEnumType_StreamStateEnumType_g_tc_members[3]=
    {

        {
            (char *)"PAUSE",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_StreamStateEnumType_StreamStateEnumType_PAUSE, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"PLAY",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_StreamStateEnumType_StreamStateEnumType_PLAY, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"STOP",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_StreamStateEnumType_StreamStateEnumType_STOP, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_StreamStateEnumType_StreamStateEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::StreamStateEnumType::StreamStateEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            3, /* Number of members */
            UMAA_Common_MaritimeEnumeration_StreamStateEnumType_StreamStateEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_StreamStateEnumType_StreamStateEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_StreamStateEnumType_StreamStateEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_StreamStateEnumType_StreamStateEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_StreamStateEnumType_StreamStateEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_StreamStateEnumType_StreamStateEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_StreamStateEnumType_StreamStateEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_StreamStateEnumType_StreamStateEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_StreamStateEnumType_StreamStateEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_StreamStateEnumType_StreamStateEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_StreamStateEnumType_StreamStateEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_StreamStateEnumType_StreamStateEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_StreamStateEnumType_StreamStateEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_StreamStateEnumType_StreamStateEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_StreamStateEnumType_StreamStateEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_StreamStateEnumType_StreamStateEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_StreamStateEnumType_StreamStateEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_StreamStateEnumType_StreamStateEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_StreamStateEnumType_StreamStateEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_StreamStateEnumType_StreamStateEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_StreamStateEnumType_StreamStateEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_StreamStateEnumType_StreamStateEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_StreamStateEnumType_StreamStateEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_StreamStateEnumType_StreamStateEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_StreamStateEnumType_StreamStateEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_StreamStateEnumType_StreamStateEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_StreamStateEnumType_StreamStateEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_StreamStateEnumType_StreamStateEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_StreamStateEnumType_StreamStateEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_StreamStateEnumType_StreamStateEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_StreamStateEnumType_StreamStateEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_StreamStateEnumType_StreamStateEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_StreamStateEnumType_StreamStateEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_StreamStateEnumType_StreamStateEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_StreamStateEnumType_StreamStateEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_StreamStateEnumType_StreamStateEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_StreamStateEnumType_StreamStateEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_StreamStateEnumType_StreamStateEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_StreamStateEnumType_StreamStateEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_StreamStateEnumType_StreamStateEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_StreamStateEnumType_StreamStateEnumType_PAUSE;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_StreamStateEnumType_StreamStateEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_StreamStateEnumType_StreamStateEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_StreamStateEnumType_StreamStateEnumType_PAUSE;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_StreamStateEnumType_StreamStateEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_StreamStateEnumType_StreamStateEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_StreamStateEnumType_StreamStateEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_StreamStateEnumType_StreamStateEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_StreamStateEnumType_StreamStateEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_StreamStateEnumType_StreamStateEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_StreamStateEnumType_StreamStateEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_StreamStateEnumType_StreamStateEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_StreamStateEnumType_StreamStateEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_StreamStateEnumType_StreamStateEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_StreamStateEnumType_StreamStateEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_StreamStateEnumType_StreamStateEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_StreamStateEnumType_StreamStateEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_StreamStateEnumType_StreamStateEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_StreamStateEnumType_StreamStateEnumType_copy(
    UMAA_Common_MaritimeEnumeration_StreamStateEnumType_StreamStateEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_StreamStateEnumType_StreamStateEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_StreamStateEnumType_StreamStateEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_StreamStateEnumType_StreamStateEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_StreamStateEnumType_StreamStateEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_StreamStateEnumType_StreamStateEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_StreamStateEnumType_StreamStateEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_StreamStateEnumType_StreamStateEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_TamperDetectionStateEnumType_TamperDetectionStateEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::TamperDetectionStateEnumType::TamperDetectionStateEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_TamperDetectionStateEnumType_TamperDetectionStateEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_TamperDetectionStateEnumType_TamperDetectionStateEnumType_g_tc_members[3]=
    {

        {
            (char *)"ALWAYS_ENABLED_OR_CLEAR",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_TamperDetectionStateEnumType_TamperDetectionStateEnumType_ALWAYS_ENABLED_OR_CLEAR, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"DISABLED",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_TamperDetectionStateEnumType_TamperDetectionStateEnumType_DISABLED, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"ENABLED",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_TamperDetectionStateEnumType_TamperDetectionStateEnumType_ENABLED, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_TamperDetectionStateEnumType_TamperDetectionStateEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::TamperDetectionStateEnumType::TamperDetectionStateEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            3, /* Number of members */
            UMAA_Common_MaritimeEnumeration_TamperDetectionStateEnumType_TamperDetectionStateEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_TamperDetectionStateEnumType_TamperDetectionStateEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_TamperDetectionStateEnumType_TamperDetectionStateEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_TamperDetectionStateEnumType_TamperDetectionStateEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_TamperDetectionStateEnumType_TamperDetectionStateEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_TamperDetectionStateEnumType_TamperDetectionStateEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_TamperDetectionStateEnumType_TamperDetectionStateEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_TamperDetectionStateEnumType_TamperDetectionStateEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_TamperDetectionStateEnumType_TamperDetectionStateEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_TamperDetectionStateEnumType_TamperDetectionStateEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_TamperDetectionStateEnumType_TamperDetectionStateEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_TamperDetectionStateEnumType_TamperDetectionStateEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_TamperDetectionStateEnumType_TamperDetectionStateEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_TamperDetectionStateEnumType_TamperDetectionStateEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_TamperDetectionStateEnumType_TamperDetectionStateEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_TamperDetectionStateEnumType_TamperDetectionStateEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_TamperDetectionStateEnumType_TamperDetectionStateEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_TamperDetectionStateEnumType_TamperDetectionStateEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_TamperDetectionStateEnumType_TamperDetectionStateEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_TamperDetectionStateEnumType_TamperDetectionStateEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_TamperDetectionStateEnumType_TamperDetectionStateEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_TamperDetectionStateEnumType_TamperDetectionStateEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_TamperDetectionStateEnumType_TamperDetectionStateEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_TamperDetectionStateEnumType_TamperDetectionStateEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_TamperDetectionStateEnumType_TamperDetectionStateEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_TamperDetectionStateEnumType_TamperDetectionStateEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_TamperDetectionStateEnumType_TamperDetectionStateEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_TamperDetectionStateEnumType_TamperDetectionStateEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_TamperDetectionStateEnumType_TamperDetectionStateEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_TamperDetectionStateEnumType_TamperDetectionStateEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_TamperDetectionStateEnumType_TamperDetectionStateEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_TamperDetectionStateEnumType_TamperDetectionStateEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_TamperDetectionStateEnumType_TamperDetectionStateEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_TamperDetectionStateEnumType_TamperDetectionStateEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_TamperDetectionStateEnumType_TamperDetectionStateEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_TamperDetectionStateEnumType_TamperDetectionStateEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_TamperDetectionStateEnumType_TamperDetectionStateEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_TamperDetectionStateEnumType_TamperDetectionStateEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_TamperDetectionStateEnumType_TamperDetectionStateEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_TamperDetectionStateEnumType_TamperDetectionStateEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_TamperDetectionStateEnumType_TamperDetectionStateEnumType_ALWAYS_ENABLED_OR_CLEAR;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_TamperDetectionStateEnumType_TamperDetectionStateEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_TamperDetectionStateEnumType_TamperDetectionStateEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_TamperDetectionStateEnumType_TamperDetectionStateEnumType_ALWAYS_ENABLED_OR_CLEAR;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_TamperDetectionStateEnumType_TamperDetectionStateEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_TamperDetectionStateEnumType_TamperDetectionStateEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_TamperDetectionStateEnumType_TamperDetectionStateEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_TamperDetectionStateEnumType_TamperDetectionStateEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_TamperDetectionStateEnumType_TamperDetectionStateEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_TamperDetectionStateEnumType_TamperDetectionStateEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_TamperDetectionStateEnumType_TamperDetectionStateEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_TamperDetectionStateEnumType_TamperDetectionStateEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_TamperDetectionStateEnumType_TamperDetectionStateEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_TamperDetectionStateEnumType_TamperDetectionStateEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_TamperDetectionStateEnumType_TamperDetectionStateEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_TamperDetectionStateEnumType_TamperDetectionStateEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_TamperDetectionStateEnumType_TamperDetectionStateEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_TamperDetectionStateEnumType_TamperDetectionStateEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_TamperDetectionStateEnumType_TamperDetectionStateEnumType_copy(
    UMAA_Common_MaritimeEnumeration_TamperDetectionStateEnumType_TamperDetectionStateEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_TamperDetectionStateEnumType_TamperDetectionStateEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_TamperDetectionStateEnumType_TamperDetectionStateEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_TamperDetectionStateEnumType_TamperDetectionStateEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_TamperDetectionStateEnumType_TamperDetectionStateEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_TamperDetectionStateEnumType_TamperDetectionStateEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_TamperDetectionStateEnumType_TamperDetectionStateEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_TamperDetectionStateEnumType_TamperDetectionStateEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::VehicleSpeedModeEnumType::VehicleSpeedModeEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumType_g_tc_members[5]=
    {

        {
            (char *)"LRC",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumType_LRC, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"MEC",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumType_MEC, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"MRC",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumType_MRC, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"SLOW",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumType_SLOW, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"VEHICLE_SPECIFIC",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumType_VEHICLE_SPECIFIC, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::VehicleSpeedModeEnumType::VehicleSpeedModeEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            5, /* Number of members */
            UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumType_LRC;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumType_LRC;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumType_copy(
    UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_VehicleSpeedModeEnumType_VehicleSpeedModeEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::VehicleSpeedReferenceEnumType::VehicleSpeedReferenceEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumType_g_tc_members[5]=
    {

        {
            (char *)"SPEED_THROUGH_AIR",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumType_SPEED_THROUGH_AIR, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"OTHER",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumType_OTHER, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"RPM",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumType_RPM, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"SPEED_OVER_GROUND",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumType_SPEED_OVER_GROUND, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"SPEED_THROUGH_WATER",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumType_SPEED_THROUGH_WATER, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::VehicleSpeedReferenceEnumType::VehicleSpeedReferenceEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            5, /* Number of members */
            UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumType_SPEED_THROUGH_AIR;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumType_SPEED_THROUGH_AIR;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumType_copy(
    UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_VehicleSpeedReferenceEnumType_VehicleSpeedReferenceEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::VelocityCommandTypeEnumType::VelocityCommandTypeEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumType_g_tc_members[8]=
    {

        {
            (char *)"CURRENT_COMMAND_SOG",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumType_CURRENT_COMMAND_SOG, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"CURRENT_COMMAND_SRM",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumType_CURRENT_COMMAND_SRM, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"DEFAULT_COMMAND_SOG",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumType_DEFAULT_COMMAND_SOG, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"DEFAULT_COMMAND_SRM",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumType_DEFAULT_COMMAND_SRM, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"MAX_ALLOWED_SOG",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumType_MAX_ALLOWED_SOG, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"MAX_ALLOWED_SRM",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumType_MAX_ALLOWED_SRM, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"MIN_ALLOWED_SOG",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumType_MIN_ALLOWED_SOG, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"MIN_ALLOWED_SRM",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumType_MIN_ALLOWED_SRM, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::VelocityCommandTypeEnumType::VelocityCommandTypeEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            8, /* Number of members */
            UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumType_CURRENT_COMMAND_SOG;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumType_CURRENT_COMMAND_SOG;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumType_copy(
    UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_VelocityCommandTypeEnumType_VelocityCommandTypeEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::VideoFormatEnumType::VideoFormatEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumType_g_tc_members[6]=
    {

        {
            (char *)"NTSCJ",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumType_NTSCJ, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"NTSCM",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumType_NTSCM, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"PALM",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumType_PALM, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"PALN",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumType_PALN, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"SECAMBG",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumType_SECAMBG, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"SECAML",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumType_SECAML, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::VideoFormatEnumType::VideoFormatEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            6, /* Number of members */
            UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumType_NTSCJ;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumType_NTSCJ;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumType_copy(
    UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_VideoFormatEnumType_VideoFormatEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::VisualClassificationEnumType::VisualClassificationEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_g_tc_members[25]=
    {

        {
            (char *)"AID_TO_NAVIGATION_CHANNEL_MARKER",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_AID_TO_NAVIGATION_CHANNEL_MARKER, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"MEDIUM_VESSEL_FISHING",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_MEDIUM_VESSEL_FISHING, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"AID_TO_NAVIGATION_GENERAL",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_AID_TO_NAVIGATION_GENERAL, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"SMALL_VESSEL_JET_SKI",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_SMALL_VESSEL_JET_SKI, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"AID_TO_NAVIGATION_LARGE_BUOY",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_AID_TO_NAVIGATION_LARGE_BUOY, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"LARGE_VESSEL_CARGO",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_LARGE_VESSEL_CARGO, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"LARGE_GENERAL_OBSTACLE",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_LARGE_GENERAL_OBSTACLE, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"LARGE_VESSEL_GENERAL",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_LARGE_VESSEL_GENERAL, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"LARGE_VESSEL_MILITARY",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_LARGE_VESSEL_MILITARY, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"LARGE_VESSEL_PASSENGER",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_LARGE_VESSEL_PASSENGER, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"LARGE_VESSEL_OTHER",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_LARGE_VESSEL_OTHER, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"AID_TO_NAVIGATION_LIGHTHOUSE",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_AID_TO_NAVIGATION_LIGHTHOUSE, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"MEDIUM_VESSEL_GENERAL",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_MEDIUM_VESSEL_GENERAL, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"MEDIUM_VESSEL_MILITARY",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_MEDIUM_VESSEL_MILITARY, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"MEDIUM_VESSEL_OTHER",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_MEDIUM_VESSEL_OTHER, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"SMALL_VESSEL_POWER_BOAT",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_SMALL_VESSEL_POWER_BOAT, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"SAILBOAT",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_SAILBOAT, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"AID_TO_NAVIGATION_SMALL_BUOY",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_AID_TO_NAVIGATION_SMALL_BUOY, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"SMALL_GENERAL_OBSTACLE",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_SMALL_GENERAL_OBSTACLE, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"SMALL_VESSEL_GENERAL",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_SMALL_VESSEL_GENERAL, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"SMALL_VESSEL_MILITARY",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_SMALL_VESSEL_MILITARY, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"SMALL_VESSEL_OTHER",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_SMALL_VESSEL_OTHER, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"MEDIUM_VESSEL_TUG",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_MEDIUM_VESSEL_TUG, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"MEDIUM_VESSEL_TUG_IN_TOW",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_MEDIUM_VESSEL_TUG_IN_TOW, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"MEDIUM_VESSEL_YACHT",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_MEDIUM_VESSEL_YACHT, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::VisualClassificationEnumType::VisualClassificationEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            25, /* Number of members */
            UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_AID_TO_NAVIGATION_CHANNEL_MARKER;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_AID_TO_NAVIGATION_CHANNEL_MARKER;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_copy(
    UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_VisualClassificationEnumType_VisualClassificationEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::WaterTurnDirectionEnumType::WaterTurnDirectionEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumType_g_tc_members[6]=
    {

        {
            (char *)"NO_VALID_TURN_DIRECTION",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumType_NO_VALID_TURN_DIRECTION, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"LEFT_TURN",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumType_LEFT_TURN, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"RIGHT_TURN",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumType_RIGHT_TURN, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"VEHICLE_SPECIFIC",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumType_VEHICLE_SPECIFIC, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"INTO_THE_CURRENT",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumType_INTO_THE_CURRENT, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"INTO_THE_WIND",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumType_INTO_THE_WIND, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::WaterTurnDirectionEnumType::WaterTurnDirectionEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            6, /* Number of members */
            UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumType_NO_VALID_TURN_DIRECTION;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumType_NO_VALID_TURN_DIRECTION;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumType_copy(
    UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_WaterTurnDirectionEnumType_WaterTurnDirectionEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::WhiteBalanceEnumType::WhiteBalanceEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumType_g_tc_members[7]=
    {

        {
            (char *)"AUTO_DEFAULT",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumType_AUTO_DEFAULT, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"CLOUDY",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumType_CLOUDY, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"DAYLIGHT",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumType_DAYLIGHT, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"FLASH",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumType_FLASH, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"FLUORESCENT",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumType_FLUORESCENT, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"SHADE",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumType_SHADE, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"TUNGSTEN",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumType_TUNGSTEN, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::WhiteBalanceEnumType::WhiteBalanceEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            7, /* Number of members */
            UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumType_AUTO_DEFAULT;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumType_AUTO_DEFAULT;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumType_copy(
    UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_WhiteBalanceEnumType_WhiteBalanceEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_ZoneKindEnumType_ZoneKindEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::ZoneKindEnumType::ZoneKindEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_ZoneKindEnumType_ZoneKindEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_ZoneKindEnumType_ZoneKindEnumType_g_tc_members[2]=
    {

        {
            (char *)"KEEP_IN",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_ZoneKindEnumType_ZoneKindEnumType_KEEP_IN, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"KEEP_OUT",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_ZoneKindEnumType_ZoneKindEnumType_KEEP_OUT, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_ZoneKindEnumType_ZoneKindEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::ZoneKindEnumType::ZoneKindEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            2, /* Number of members */
            UMAA_Common_MaritimeEnumeration_ZoneKindEnumType_ZoneKindEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_ZoneKindEnumType_ZoneKindEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_ZoneKindEnumType_ZoneKindEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_ZoneKindEnumType_ZoneKindEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_ZoneKindEnumType_ZoneKindEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_ZoneKindEnumType_ZoneKindEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_ZoneKindEnumType_ZoneKindEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_ZoneKindEnumType_ZoneKindEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_ZoneKindEnumType_ZoneKindEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_ZoneKindEnumType_ZoneKindEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_ZoneKindEnumType_ZoneKindEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_ZoneKindEnumType_ZoneKindEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_ZoneKindEnumType_ZoneKindEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_ZoneKindEnumType_ZoneKindEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_ZoneKindEnumType_ZoneKindEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_ZoneKindEnumType_ZoneKindEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_ZoneKindEnumType_ZoneKindEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_ZoneKindEnumType_ZoneKindEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_ZoneKindEnumType_ZoneKindEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_ZoneKindEnumType_ZoneKindEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_ZoneKindEnumType_ZoneKindEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_ZoneKindEnumType_ZoneKindEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_ZoneKindEnumType_ZoneKindEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_ZoneKindEnumType_ZoneKindEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_ZoneKindEnumType_ZoneKindEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_ZoneKindEnumType_ZoneKindEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_ZoneKindEnumType_ZoneKindEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_ZoneKindEnumType_ZoneKindEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_ZoneKindEnumType_ZoneKindEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_ZoneKindEnumType_ZoneKindEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_ZoneKindEnumType_ZoneKindEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_ZoneKindEnumType_ZoneKindEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_ZoneKindEnumType_ZoneKindEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_ZoneKindEnumType_ZoneKindEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_ZoneKindEnumType_ZoneKindEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_ZoneKindEnumType_ZoneKindEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_ZoneKindEnumType_ZoneKindEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_ZoneKindEnumType_ZoneKindEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_ZoneKindEnumType_ZoneKindEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_ZoneKindEnumType_ZoneKindEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_ZoneKindEnumType_ZoneKindEnumType_KEEP_IN;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_ZoneKindEnumType_ZoneKindEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_ZoneKindEnumType_ZoneKindEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_ZoneKindEnumType_ZoneKindEnumType_KEEP_IN;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_ZoneKindEnumType_ZoneKindEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_ZoneKindEnumType_ZoneKindEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_ZoneKindEnumType_ZoneKindEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_ZoneKindEnumType_ZoneKindEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_ZoneKindEnumType_ZoneKindEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_ZoneKindEnumType_ZoneKindEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_ZoneKindEnumType_ZoneKindEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_ZoneKindEnumType_ZoneKindEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_ZoneKindEnumType_ZoneKindEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_ZoneKindEnumType_ZoneKindEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_ZoneKindEnumType_ZoneKindEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_ZoneKindEnumType_ZoneKindEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_ZoneKindEnumType_ZoneKindEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_ZoneKindEnumType_ZoneKindEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_ZoneKindEnumType_ZoneKindEnumType_copy(
    UMAA_Common_MaritimeEnumeration_ZoneKindEnumType_ZoneKindEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_ZoneKindEnumType_ZoneKindEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_ZoneKindEnumType_ZoneKindEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_ZoneKindEnumType_ZoneKindEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_ZoneKindEnumType_ZoneKindEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_ZoneKindEnumType_ZoneKindEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_ZoneKindEnumType_ZoneKindEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_ZoneKindEnumType_ZoneKindEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

/* ========================================================================= */
const char *UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumTypeTYPENAME = "UMAA::Common::MaritimeEnumeration::ZoomModeEnumType::ZoomModeEnumType";

#ifndef NDDS_STANDALONE_TYPE
DDS_TypeCode * UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumType_get_typecode(void)
{
    static RTIBool is_initialized = RTI_FALSE;

    static DDS_TypeCode_Member UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumType_g_tc_members[4]=
    {

        {
            (char *)"ANALOG_ONLY",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumType_ANALOG_ONLY, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"DIGITAL_ONLY",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumType_DIGITAL_ONLY, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"OFF",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumType_OFF, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }, 
        {
            (char *)"MIXED_DEFAULT",/* Member name */
            {
                0, /* Ignored */
                DDS_BOOLEAN_FALSE,/* Is a pointer? */
                -1, /* Bitfield bits */
                NULL/* Member type code is assigned later */
            },
            UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumType_MIXED_DEFAULT, 
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            RTI_CDR_REQUIRED_MEMBER, /* Is a key? */
            DDS_PRIVATE_MEMBER,/* Member visibility */ 

            1,
            NULL, /* Ignored */
            RTICdrTypeCodeAnnotations_INITIALIZER
        }
    };

    static DDS_TypeCode UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumType_g_tc =
    {{
            DDS_TK_ENUM, /* Kind */
            DDS_BOOLEAN_FALSE, /* Ignored */
            -1, /*Ignored*/
            (char *)"UMAA::Common::MaritimeEnumeration::ZoomModeEnumType::ZoomModeEnumType", /* Name */
            NULL,     /* Base class type code is assigned later */      
            0, /* Ignored */
            0, /* Ignored */
            NULL, /* Ignored */
            4, /* Number of members */
            UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumType_g_tc_members, /* Members */
            DDS_VM_NONE, /* Type Modifier */
            RTICdrTypeCodeAnnotations_INITIALIZER,
            DDS_BOOLEAN_TRUE, /* _isCopyable */
            NULL, /* _sampleAccessInfo: assigned later */
            NULL /* _typePlugin: assigned later */
        }}; /* Type code for UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumType*/

    if (is_initialized) {
        return &UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumType_g_tc;
    }

    is_initialized = RTI_TRUE;

    UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumType_g_tc._data._annotations._allowedDataRepresentationMask = 5;

    /* Initialize the values for annotations. */
    UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumType_g_tc._data._annotations._defaultValue._d = RTI_XCDR_TK_ENUM;
    UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumType_g_tc._data._annotations._defaultValue._u.long_value = 0;

    UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumType_g_tc._data._sampleAccessInfo =
    UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumType_get_sample_access_info();
    UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumType_g_tc._data._typePlugin =
    UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumType_get_type_plugin_info();    

    return &UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumType_g_tc;
}

#define TSeq UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumTypeSeq
#define T UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumType
#include "dds_cpp/generic/dds_cpp_data_TInterpreterSupport.gen"
#undef T
#undef TSeq

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumType_get_sample_seq_access_info()
{
    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumType_g_seqSampleAccessInfo = {
        RTI_XCDR_TYPE_BINDING_CPP, \
        {sizeof(UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumTypeSeq),0,0,0}, \
        RTI_XCDR_FALSE, \
        DDS_Sequence_get_member_value_pointer, \
        UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumTypeSeq_set_member_element_count, \
        NULL, \
        NULL, \
        NULL \
    };

    return &UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumType_g_seqSampleAccessInfo;
}

RTIXCdrSampleAccessInfo *UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumType_get_sample_access_info()
{
    static RTIBool is_initialized = RTI_FALSE;

    static RTIXCdrMemberAccessInfo UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumType_g_memberAccessInfos[1] =
    {RTIXCdrMemberAccessInfo_INITIALIZER};

    static RTIXCdrSampleAccessInfo UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumType_g_sampleAccessInfo = 
    RTIXCdrSampleAccessInfo_INITIALIZER;

    if (is_initialized) {
        return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumType_g_sampleAccessInfo;
    }

    UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumType_g_memberAccessInfos[0].bindingMemberValueOffset[0] = 0;

    UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumType_g_sampleAccessInfo.memberAccessInfos = 
    UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumType_g_memberAccessInfos;

    {
        size_t candidateTypeSize = sizeof(UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumType);

        if (candidateTypeSize > RTIXCdrLong_MAX) {
            UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumType_g_sampleAccessInfo.typeSize[0] =
            RTIXCdrLong_MAX;
        } else {
            UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumType_g_sampleAccessInfo.typeSize[0] =
            (RTIXCdrUnsignedLong) candidateTypeSize;
        }
    }

    UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumType_g_sampleAccessInfo.useGetMemberValueOnlyWithRef =
    RTI_XCDR_TRUE;

    UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumType_g_sampleAccessInfo.getMemberValuePointerFcn = 
    UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumType_get_member_value_pointer;

    UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumType_g_sampleAccessInfo.languageBinding = 
    RTI_XCDR_TYPE_BINDING_CPP ;

    is_initialized = RTI_TRUE;
    return (RTIXCdrSampleAccessInfo*) &UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumType_g_sampleAccessInfo;
}
RTIXCdrTypePlugin *UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumType_get_type_plugin_info()
{
    static RTIXCdrTypePlugin UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumType_g_typePlugin = 
    {
        NULL, /* serialize */
        NULL, /* serialize_key */
        NULL, /* deserialize_sample */
        NULL, /* deserialize_key_sample */
        NULL, /* skip */
        NULL, /* get_serialized_sample_size */
        NULL, /* get_serialized_sample_max_size_ex */
        NULL, /* get_serialized_key_max_size_ex */
        NULL, /* get_serialized_sample_min_size */
        NULL, /* serialized_sample_to_key */
        (RTIXCdrTypePluginInitializeSampleFunction) 
        UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumType_initialize_ex,
        NULL,
        (RTIXCdrTypePluginFinalizeSampleFunction)
        UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumType_finalize_w_return,
        NULL,
        NULL
    };

    return &UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumType_g_typePlugin;
}
#endif

RTIBool UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumType_initialize(
    UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumType* sample)
{

    *sample = UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumType_ANALOG_ONLY;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumType_initialize_w_params(
    UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumType *sample,
    const struct DDS_TypeAllocationParams_t *allocParams)
{

    if (sample == NULL) {
        return RTI_FALSE;
    }
    if (allocParams == NULL) {
        return RTI_FALSE;
    }
    *sample = UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumType_ANALOG_ONLY;
    return RTI_TRUE;
}
RTIBool UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumType_initialize_ex(
    UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumType *sample,
    RTIBool allocatePointers, 
    RTIBool allocateMemory)
{

    struct DDS_TypeAllocationParams_t allocParams =
    DDS_TYPE_ALLOCATION_PARAMS_DEFAULT;

    allocParams.allocate_pointers =  (DDS_Boolean)allocatePointers;
    allocParams.allocate_memory = (DDS_Boolean)allocateMemory;

    return UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumType_initialize_w_params(
        sample,
        &allocParams);
}

RTIBool UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumType_finalize_w_return(
    UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumType* sample)
{
    if (sample) {} /* To avoid warnings */

    return RTI_TRUE;
}

void UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumType_finalize(
    UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumType* sample)
{  
    if (sample==NULL) {
        return;
    }
}

void UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumType_finalize_ex(
    UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumType *sample,
    RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParams =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;

    if (sample==NULL) {
        return;
    } 

    deallocParams.delete_pointers = (DDS_Boolean)deletePointers;

    UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumType_finalize_w_params(
        sample,
        &deallocParams);
}

void UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumType_finalize_w_params(
    UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumType *sample,
    const struct DDS_TypeDeallocationParams_t *deallocParams)
{
    if (sample==NULL) {
        return;
    }

    if (deallocParams == NULL) {
        return;
    }

}

void UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumType_finalize_optional_members(
    UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumType* sample, RTIBool deletePointers)
{
    struct DDS_TypeDeallocationParams_t deallocParamsTmp =
    DDS_TYPE_DEALLOCATION_PARAMS_DEFAULT;
    struct DDS_TypeDeallocationParams_t * deallocParams =
    &deallocParamsTmp;

    if (sample==NULL) {
        return;
    } 
    if (deallocParams) {} /* To avoid warnings */

    deallocParamsTmp.delete_pointers = (DDS_Boolean)deletePointers;
    deallocParamsTmp.delete_optional_members = DDS_BOOLEAN_TRUE;

}

RTIBool UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumType_copy(
    UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumType* dst,
    const UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumType* src)
{
    try {

        if (dst == NULL || src == NULL) {
            return RTI_FALSE;
        }

        return RTICdrType_copyEnum((RTICdrEnum *)dst, (RTICdrEnum *)src);

    } catch (const std::bad_alloc&) {
        return RTI_FALSE;
    }
}

/**
* <<IMPLEMENTATION>>
*
* Defines:  TSeq, T
*
* Configure and implement 'UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumType' sequence class.
*/
#define T UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumType
#define TSeq UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumTypeSeq

#define T_initialize_w_params UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumType_initialize_w_params

#define T_finalize_w_params   UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumType_finalize_w_params
#define T_copy       UMAA_Common_MaritimeEnumeration_ZoomModeEnumType_ZoomModeEnumType_copy

#ifndef NDDS_STANDALONE_TYPE
#include "dds_c/generic/dds_c_sequence_TSeq.gen"
#include "dds_cpp/generic/dds_cpp_sequence_TSeq.gen"
#else
#include "dds_c_sequence_TSeq.gen"
#include "dds_cpp_sequence_TSeq.gen"
#endif

#undef T_copy
#undef T_finalize_w_params

#undef T_initialize_w_params

#undef TSeq
#undef T

#ifndef NDDS_STANDALONE_TYPE
namespace rti { 
    namespace xcdr {
    } 
}
#endif
