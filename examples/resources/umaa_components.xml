<?xml version="1.0"?>

<!-- 
(c) Copyright, Real-Time Innovations, 2024.  All rights reserved.
RTI grants Licensee a license to use, modify, compile, and create derivative
works of the software solely for use with RTI Connext DDS. Licensee may
redistribute copies of the software provided that all such copies are subject
to this license. The software is provided "as is", with no warranty of any
type, including any warranty for fitness for any purpose. RTI is under no
obligation to maintain or support the software. RTI shall not be liable for
any incidental or consequential damages arising out of the use or inability
to use the software.
-->

<dds xsi:noNamespaceSchemaLocation="http://community.rti.com/schema/current/rti_dds_profiles.xsd"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

    <!-- You can assign ENV variables in 3 ways to use within this file.
     - Using the <configuration_variables> tag for defaults (For Connext > 6.1.2.14+)
     - Using command line i.e. -DANCHOR_CONTROLLER_GUID=05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05
     - Using a bash script i.e. export ANCHOR_CONTROLLER_GUID=05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05
    
    Use ENV variables with the syntax: $(ANCHOR_CONTROLLER_GUID) -->                           
    <configuration_variables> 
        <element> 
            <name>ANCHOR_CONTROLLER_GUID</name> 
            <value>05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05</value> 
        </element>
        <element>
            <name>VEHICLE_DOMAIN_ID</name>
            <value>1</value>
        </element> 
    </configuration_variables>

    <!-- Include ALL UMAA XML type files for DynamicData Types option 
         The impact is a small delay on startup when parsing all the xml files 
         This is done for example purposes so you can add additional types dynamically without
         adjusting the include list. Can optimize by just selecting necessary files per example above  -->
    <types>
        <include file="umaa_521/xml/include_all.xml" />
    </types>


    <!-- QOS Library -->
    <qos_library name="UMAAQOSLibrary">
        <qos_profile name="UMAADefaultParticipantQOS" is_default_participant_factory_profile = "true"> 
            <participant_factory_qos>

                <!-- Control logging verbosity here -->
                <logging>
                    <verbosity>ERROR</verbosity>
                    <category>ALL</category>
                    <print_format>DEBUG</print_format>
	                <output_file></output_file>
                </logging>
            </participant_factory_qos>

            
            <domain_participant_qos>

                <!-- Default transport is UDPv4 | SHMEM, uncomment to disable SHMEM and have all data go over loopback-->
                <!-- <transport_builtin>
                    <mask>UDPv4</mask>
                </transport_builtin> -->

                <!-- Uncomment to enable Monitoring Libraries. Ensure NNDSHOME variable is set. Be aware of resource impact-->
                <!-- <property>
                    <value>
                        <element>
                            <name>rti.monitor.library</name>
                            <value>rtimonitoring</value>
                        </element>
                        <element>
                            <name>rti.monitor.create_function</name>
                            <value>RTIDefaultMonitor_create</value>
                        </element>
                    </value>
                </property> -->

                <resource_limits>
                    <!-- Increase the default for some of the larger types -->
                    <type_object_max_serialized_length>10000</type_object_max_serialized_length>

                  </resource_limits>              

            </domain_participant_qos>
        </qos_profile>

        <!-- 
            This is where we create our QOS profiles and inherit from a Builtin QOS Profile as a starting point.

            We identify the Builtin QOS profile to use by associating the likely data patterns.

            We can then use the "topic_filter" tag to automatically assign the desired QOS as needed per Topic suffix.

            NOTE: Currently there are no official required UMAA QOS settings. 
            You would need to synchronize QOS with the other party you are communicating with. 
            The below is just for reference of the simplest mechanisms/best practices to implement.
        -->

        <!-- This Profile is designed for aperiodic data that we want to ensure delivery -->
        <qos_profile name="CommandsProfile" base_name="BuiltinQosLib::Pattern.LastValueCache">
            <!-- Reliability: RELIABLE
            Durability: TRANSIENT LOCAL
            History: KEEP LAST
            Depth: 1
            Liveliness: INF
            Deadline: INF -->

            <!-- Override QOS here if desired -->

        </qos_profile>

        <!-- This profile is designed for Periodic data that is high rate -->
        <qos_profile name="StatsProfile" base_name="BuiltinQosLib::Pattern.PeriodicData">
            <!-- Reliability: BEST EFFORT
            Durability: VOLATILE
            History: KEEP LAST
            Depth: 100
            Liveliness: INF
            Deadline: DW (4), DR(10) -->

            <!-- Override QOS here if desired -->

        </qos_profile>

        <qos_profile name="BaseQOS">

            <!-- We can use the Topic suffixes to automatically assign QOS using the "topic_filter" tag.

             All the datawriters/datareaders defined in the <domain_participant> sections are assigned to this BaseQOS
             Then depending on their suffix the selected QOS will be applied.

             These filters will need to be defined based on the behavior of data going over the Topics i.e.
             not all *Report Topics might be sending periodic data -->

            <datawriter_qos topic_filter="*Command" base_name="CommandsProfile" />
            <datareader_qos topic_filter="*Command" base_name="CommandsProfile" />

            <datawriter_qos topic_filter="*Report" base_name="StatsProfile" />
            <datareader_qos topic_filter="*Report" base_name="StatsProfile" />

            <datawriter_qos topic_filter="*CommandStatus" base_name="CommandsProfile" />
            <datareader_qos topic_filter="*CommandStatus" base_name="CommandsProfile" />


          </qos_profile>

    </qos_library>

    <!-- Domain and Topic Library -->
    <domain_library name="UMAADomainLibrary">
        <!-- Recommended to not use default Domain ID of 0 -->
        <domain name="VehicleDomain" domain_id="$(VEHICLE_DOMAIN_ID)">

            <!-- Register the types -->
            <register_type name="AnchorReportType"
                type_ref="UMAA::EO::AnchorStatus::AnchorReportType" />

            <register_type
                name="AnchorCommandStatusType"
                type_ref="UMAA::EO::AnchorControl::AnchorCommandStatusType" />

            <register_type
                name="AnchorCommandType"
                type_ref="UMAA::EO::AnchorControl::AnchorCommandType" />

            <register_type
                name="SpeedReportType"
                type_ref="UMAA::SA::SpeedStatus::SpeedReportType" />

            <register_type
                name="GlobalPoseReportType"
                type_ref="UMAA::SA::GlobalPoseStatus::GlobalPoseReportType" />

            <register_type
                name="VelocityReportType"
                type_ref="UMAA::SA::VelocityStatus::VelocityReportType" />

            <register_type
                name="TranslationalShipMotionReportType"
                type_ref="UMAA::SA::TranslationalShipMotionStatus::TranslationalShipMotionReportType" />

            <register_type
                name="WaterCurrentReportType"
                type_ref="UMAA::SA::WaterCurrentStatus::WaterCurrentReportType" />

            <register_type
                name="GPSReportType"
                type_ref="UMAA::SEM::GPSStatus::GPSReportType" />


            <!-- Associate the topics to the types-->
            <topic
                name="UMAA::EO::AnchorStatus::AnchorReport"
                register_type_ref="AnchorReportType" />

            <topic
                name="UMAA::EO::AnchorControl::AnchorCommandStatus"
                register_type_ref="AnchorCommandStatusType" />

            <topic
                name="UMAA::EO::AnchorControl::AnchorCommand"
                register_type_ref="AnchorCommandType" />

            <topic
                name="UMAA::SA::SpeedStatus::SpeedReport"
                register_type_ref="SpeedReportType" />

            <topic
                name="UMAA::SA::GlobalPoseStatus::GlobalPoseReport"
                register_type_ref="GlobalPoseReportType" />

            <topic
                name="UMAA::SA::VelocityStatus::VelocityReport"
                register_type_ref="VelocityReportType" />

            <topic
                name="UMAA::SA::TranslationalShipMotionStatus::TranslationalShipMotionReport"
                register_type_ref="TranslationalShipMotionReportType" />

            <topic
                name="UMAA::SA::WaterCurrentStatus::WaterCurrentReport"
                register_type_ref="WaterCurrentReportType" />

            <topic
                name="UMAA::SEM::GPSStatus::GPSReport"
                register_type_ref="GPSReportType"/> 
            
            </domain>
    </domain_library>

    <!-- Participant library -->
    <!-- This is where we define the Components i.e. Applications and associate the DDS entities (Participants/Writers/Topics/QOS) -->
    <!-- The components defined below are for example use only- as of 6.0 components are not required to conform to the UMAA MBSE model -->
    <domain_participant_library name="UMAAParticipantLibrary">

        <!-- Define the entities for the Anchor Controller - Associate with Topics and QOS -->
        <domain_participant name="AnchorController" domain_ref="UMAADomainLibrary::VehicleDomain">
            <domain_participant_qos base_name="UMAAQOSLibrary::UMAADefaultParticipantQOS" />

            <!-- Publisher/Subscribers created for each reader/writer for two reasons:
                1. Compensate for visualization bug in 6.1.2- Resolved in 7.3.0
                2. Future Partitioning support at Publisher/Subscriber level (If desired)
                Can wrap all writers/readers in single publisher/subscriber if none of the above applies.
            -->
            <publisher name="AnchorReportPublisher">
                <data_writer name="AnchorReportWriter"
                    topic_ref="UMAA::EO::AnchorStatus::AnchorReport">
                    <datawriter_qos base_name="UMAAQOSLibrary::BaseQOS"/>
                </data_writer>
            </publisher>
            <publisher name="AnchorCommandStatusPublisher">
                <data_writer name="AnchorCommandStatusWriter"
                    topic_ref="UMAA::EO::AnchorControl::AnchorCommandStatus">
                    <datawriter_qos base_name="UMAAQOSLibrary::BaseQOS" />
                </data_writer>
            </publisher>
            <subscriber name="AnchorCommandSubscriber">
                <data_reader name="AnchorCommandReader" topic_ref="UMAA::EO::AnchorControl::AnchorCommand">

                    <!-- Here we are passing the Anchor Controller "GUID" to the Content Filter Topic  
                        so we only get messages addressed to this GUID  
                    -->
                    <content_filter name="src" kind="builtin.sql">
                        <!-- Can optionally use an ENV variable if desired
                        <expression> destination = &amp;hex($(ANCHOR_CONTROLLER_GUID)) </expression> -->
                        <expression>
                            destination = &amp;hex(05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 05)
                        </expression>
                    </content_filter>
                    <datareader_qos base_name="UMAAQOSLibrary::BaseQOS" />

                </data_reader>
            </subscriber>
        </domain_participant>

        <!-- Define the entities for the Autonomy Component - Associate with Topics and QOS -->
        <domain_participant name="Autonomy" domain_ref="UMAADomainLibrary::VehicleDomain">
            <domain_participant_qos base_name="UMAAQOSLibrary::UMAADefaultParticipantQOS" />

            <subscriber name="AnchorReportSubscriber">
                <data_reader name="AnchorReportReader"
                    topic_ref="UMAA::EO::AnchorStatus::AnchorReport">
                    <datareader_qos base_name="UMAAQOSLibrary::BaseQOS" />
                </data_reader>
            </subscriber>
            <subscriber name="AnchorCommandStatusSubscriber">
                <data_reader name="AnchorCommandStatusReader"
                    topic_ref="UMAA::EO::AnchorControl::AnchorCommandStatus">
                    <datareader_qos base_name="UMAAQOSLibrary::BaseQOS" />
                </data_reader>
            </subscriber>
            <subscriber name="SpeedReportSubscriber">
                <data_reader name="SpeedReportReader"
                    topic_ref="UMAA::SA::SpeedStatus::SpeedReport">
                    <datareader_qos base_name="UMAAQOSLibrary::BaseQOS" />
                </data_reader>
            </subscriber>              
        </domain_participant>

        <!-- Define the entities for the NavData Component - Associate with Topics and QOS -->
        <domain_participant name="NavData" domain_ref="UMAADomainLibrary::VehicleDomain">
            <domain_participant_qos base_name="UMAAQOSLibrary::UMAADefaultParticipantQOS" />

            <publisher name="SpeedReportPublisher">
                <data_writer name="SpeedReportWriter"
                    topic_ref="UMAA::SA::SpeedStatus::SpeedReport">
                    <datawriter_qos base_name="UMAAQOSLibrary::BaseQOS" />
                </data_writer>
            </publisher>
            <publisher name="GlobalPoseReportPublisher">
                <data_writer name="GlobalPoseReportWriter"
                    topic_ref="UMAA::SA::GlobalPoseStatus::GlobalPoseReport">
                    <datawriter_qos base_name="UMAAQOSLibrary::BaseQOS" />
                </data_writer>
            </publisher>
            <publisher name="VelocityReportPublisher">
                <data_writer name="VelocityReportWriter"
                    topic_ref="UMAA::SA::VelocityStatus::VelocityReport">
                    <datawriter_qos base_name="UMAAQOSLibrary::BaseQOS" />
                </data_writer>
            </publisher>
            <publisher name="TranslationalShipMotionReportPublisher">
                <data_writer name="TranslationalShipMotionReportWriter"
                    topic_ref="UMAA::SA::TranslationalShipMotionStatus::TranslationalShipMotionReport">
                    <datawriter_qos base_name="UMAAQOSLibrary::BaseQOS" />
                </data_writer>
            </publisher>
            <publisher name="WaterCurrentReportPublisher">
                <data_writer name="WaterCurrentReportWriter"
                    topic_ref="UMAA::SA::WaterCurrentStatus::WaterCurrentReport">
                    <datawriter_qos base_name="UMAAQOSLibrary::BaseQOS" />
                </data_writer>
            </publisher>
        </domain_participant>

        <!-- Define the entities for the GUI Component - Associate with Topics and QOS -->
        <domain_participant name="GUI" domain_ref="UMAADomainLibrary::VehicleDomain">
            <domain_participant_qos base_name="UMAAQOSLibrary::UMAADefaultParticipantQOS" />

            <publisher name="AnchorCommandPublisher">
                <data_writer name="AnchorCommandWriter"
                    topic_ref="UMAA::EO::AnchorControl::AnchorCommand">
                    <datawriter_qos base_name="UMAAQOSLibrary::BaseQOS" />
                </data_writer>
            </publisher>    
        </domain_participant>

        <!-- Define the entities for the GPS driver Component - Associate with Topics and QOS -->
        <domain_participant name="GPS" domain_ref="UMAADomainLibrary::VehicleDomain">
            <domain_participant_qos base_name="UMAAQOSLibrary::UMAADefaultParticipantQOS" />

            <publisher name="GPSReportPublisher">
                <data_writer name="GPSReportWriter"
                    topic_ref="UMAA::SEM::GPSStatus::GPSReport">
                    <datawriter_qos base_name="UMAAQOSLibrary::BaseQOS" />
                </data_writer>
            </publisher>
        </domain_participant>
    
    </domain_participant_library>
</dds>