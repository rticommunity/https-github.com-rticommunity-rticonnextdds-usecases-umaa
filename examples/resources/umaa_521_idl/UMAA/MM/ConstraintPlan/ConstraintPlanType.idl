/**
 *
 * DISTRIBUTION STATEMENT A. Approved for public release. 
 * Distribution is unlimited.
 * This software was developed by the Department of the Navy,
 * NAVSEA Unmanned and Small Combatants. It is provided under the terms of
 * use found in the LICENSE file at the source code root directory.
 *
 */

/**
 *
 * This file was generated by the UxSDK+ tool. Please see
 * https://bitbucket.di2e.net/projects/UXSDK/repos/uxsdk
 * for more information
 *
 */

// WARNING: THIS CODE IS AUTO-GENERATED
//   DO NOT EDIT

/**
  *
  * Version: 5.2.1
  * MDE Version: 5.0.1
  *
  */

#ifndef _LDM_MDE_PRIMARY_MISSION_CONTROL_MISSION_EXECUTION_MANAGEMENT_CONSTRAINTPLAN_CONSTRAINTPLANTYPE
#define _LDM_MDE_PRIMARY_MISSION_CONTROL_MISSION_EXECUTION_MANAGEMENT_CONSTRAINTPLAN_CONSTRAINTPLANTYPE

#include "UMAA/Common/Measurement/Measurements.idl"
#include "UMAA/Common/PrimitiveConstrained/ConstrainedTypes.idl"
#include "UMAA/MM/ConstraintPlan/DepthRateConstraintPlanType.idl"
#include "UMAA/MM/ConstraintPlan/EmitterPresetConstraintPlanType.idl"
#include "UMAA/MM/ConstraintPlan/ExpConstraintType.idl"
#include "UMAA/MM/ConstraintPlan/HeadingSectorConstraintPlanType.idl"
#include "UMAA/MM/ConstraintPlan/MaxDepthConstraintPlanType.idl"
#include "UMAA/MM/ConstraintPlan/MaxSpeedConstraintPlanType.idl"
#include "UMAA/MM/ConstraintPlan/MinDepthConstraintPlanType.idl"
#include "UMAA/MM/ConstraintPlan/MinSpeedConstraintPlanType.idl"
#include "UMAA/MM/ConstraintPlan/PitchRateConstraintPlanType.idl"
#include "UMAA/MM/ConstraintPlan/ResourceConstraintPlanType.idl"
#include "UMAA/MM/ConstraintPlan/TurnRateConstraintPlanType.idl"
#include "UMAA/MM/ConstraintPlan/ZoneConstraintPlanType.idl"
module UMAA
{
  module MM
  {
    module ConstraintPlan
    {
        enum ConstraintPlanTypeEnum
        {
            EMITTERPRESETCONSTRAINTPLAN_D,
            MINDEPTHCONSTRAINTPLAN_D,
            TURNRATECONSTRAINTPLAN_D,
            DEPTHRATECONSTRAINTPLAN_D,
            MAXDEPTHCONSTRAINTPLAN_D,
            ZONECONSTRAINTPLAN_D,
            PITCHRATECONSTRAINTPLAN_D,
            MAXSPEEDCONSTRAINTPLAN_D,
            EXPCONSTRAINT_D,
            RESOURCECONSTRAINTPLAN_D,
            HEADINGSECTORCONSTRAINTPLAN_D,
            MINSPEEDCONSTRAINTPLAN_D
        };

        union ConstraintPlanTypeUnion switch (ConstraintPlanTypeEnum)
        {
              case EMITTERPRESETCONSTRAINTPLAN_D:
                UMAA::MM::ConstraintPlan::EmitterPresetConstraintPlanType EmitterPresetConstraintPlanVariant;
              case MINDEPTHCONSTRAINTPLAN_D:
                UMAA::MM::ConstraintPlan::MinDepthConstraintPlanType MinDepthConstraintPlanVariant;
              case TURNRATECONSTRAINTPLAN_D:
                UMAA::MM::ConstraintPlan::TurnRateConstraintPlanType TurnRateConstraintPlanVariant;
              case DEPTHRATECONSTRAINTPLAN_D:
                UMAA::MM::ConstraintPlan::DepthRateConstraintPlanType DepthRateConstraintPlanVariant;
              case MAXDEPTHCONSTRAINTPLAN_D:
                UMAA::MM::ConstraintPlan::MaxDepthConstraintPlanType MaxDepthConstraintPlanVariant;
              case ZONECONSTRAINTPLAN_D:
                UMAA::MM::ConstraintPlan::ZoneConstraintPlanType ZoneConstraintPlanVariant;
              case PITCHRATECONSTRAINTPLAN_D:
                UMAA::MM::ConstraintPlan::PitchRateConstraintPlanType PitchRateConstraintPlanVariant;
              case MAXSPEEDCONSTRAINTPLAN_D:
                UMAA::MM::ConstraintPlan::MaxSpeedConstraintPlanType MaxSpeedConstraintPlanVariant;
              case EXPCONSTRAINT_D:
                UMAA::MM::ConstraintPlan::ExpConstraintType ExpConstraintVariant;
              case RESOURCECONSTRAINTPLAN_D:
                UMAA::MM::ConstraintPlan::ResourceConstraintPlanType ResourceConstraintPlanVariant;
              case HEADINGSECTORCONSTRAINTPLAN_D:
                UMAA::MM::ConstraintPlan::HeadingSectorConstraintPlanType HeadingSectorConstraintPlanVariant;
              case MINSPEEDCONSTRAINTPLAN_D:
                UMAA::MM::ConstraintPlan::MinSpeedConstraintPlanType MinSpeedConstraintPlanVariant;
        };

      struct ConstraintPlanType
      {
      // Defines a short name for the constraint.
      UMAA::Common::PrimitiveConstrained::StringShortDescription name;

      // Defines a unique identifier of the trigger that enables the constraint.
      UMAA::Common::Measurement::NumericGUID triggerID;

      // Union to capture specializations of ConstraintPlanType
      ConstraintPlanTypeUnion ConstraintPlanTypeSubtypes;

      // Defines a unique identifier for the constraint.
      @key UMAA::Common::Measurement::NumericGUID constraintID;
      };


    };
  };
};

#endif // _LDM_MDE_PRIMARY_MISSION_CONTROL_MISSION_EXECUTION_MANAGEMENT_CONSTRAINTPLAN_CONSTRAINTPLANTYPE
