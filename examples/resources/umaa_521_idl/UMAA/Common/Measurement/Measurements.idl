/**
 *
 * DISTRIBUTION STATEMENT A. Approved for public release. 
 * Distribution is unlimited.
 * This software was developed by the Department of the Navy,
 * NAVSEA Unmanned and Small Combatants. It is provided under the terms of
 * use found in the LICENSE file at the source code root directory.
 *
 */

/**
 *
 * This file was generated by the UxSDK+ tool. Please see
 * https://bitbucket.di2e.net/projects/UXSDK/repos/uxsdk
 * for more information
 *
 */

// WARNING: THIS CODE IS AUTO-GENERATED
//   DO NOT EDIT

/**
  *
  * Version: 5.2.1
  * MDE Version: 5.0.1
  *
  */

#ifndef _LDM_MDE_REFINEMENTS_MEASUREMENTS_MEASUREMENTS
#define _LDM_MDE_REFINEMENTS_MEASUREMENTS_MEASUREMENTS

#include "UMAA/Common/MeasurementCoordinate/EngineeringCoordinateAxes.idl"
#include "BasicTypes/Quaternion.idl"

module UMAA
{
  module Common
  {
    module Measurement
    {


        const double AmpHours_MIN = 0.0;
        const double AmpHours_MAX = 500.0;
        typedef double AmpHours; // fractionDigits=6 maxInclusive=500 minInclusive=0 units=AmpereHours

        typedef double AngleAcceleration; // fractionDigits=3 maxInclusive=N/A minInclusive=N/A units=RadianPerSecondSquared referenceFrame=PlatformXYZ

        const double AnglePosition_MIN = -100.0;
        const double AnglePosition_MAX = 100.0;
        typedef double AnglePosition; // fractionDigits=3 maxInclusive=100 minInclusive=-100 units=Radian referenceFrame=PlatformXYZ

        const double BatteryCurrent_MIN = 0.0;
        const double BatteryCurrent_MAX = 1000.0;
        typedef double BatteryCurrent; // fractionDigits=6 maxInclusive=1000 minInclusive=0 units=Ampere

        const double BatteryCurrentDuration_MIN = 0.0;
        const double BatteryCurrentDuration_MAX = 20.0;
        typedef double BatteryCurrentDuration; // fractionDigits=6 maxInclusive=20 minInclusive=0 units=Seconds

        const double BatteryCycles_MIN = 0.0;
        const double BatteryCycles_MAX = 10000.0;
        typedef double BatteryCycles; // fractionDigits=0 maxInclusive=10000 minInclusive=0 units=N/A

        const double Charge_MIN = 0.0;
        const double Charge_MAX = 3600000.0;
        typedef double Charge; // fractionDigits=0 maxInclusive=3600000 minInclusive=0 units=Coulomb referenceFrame=Counting

        typedef double Conductivity; // fractionDigits=3 maxInclusive=N/A minInclusive=N/A units=SiemensPerMeter referenceFrame=LocalWaterMass

        const double DataTransferRate_MIN = 0.0;
        typedef double DataTransferRate; // fractionDigits=3 maxInclusive=N/A minInclusive=0 units=BytesPerSecond referenceFrame=Counting

        const double DistanceASF_MIN = 0.0;
        const double DistanceASF_MAX = 401056000.0;
        typedef double DistanceASF; // fractionDigits=3 maxInclusive=401056000 minInclusive=0 units=Meter referenceFrame=ASF

        const double DistanceBSL_MIN = 0.0;
        const double DistanceBSL_MAX = 10000.0;
        typedef double DistanceBSL; // fractionDigits=3 maxInclusive=10000 minInclusive=0 units=Meter referenceFrame=BSL

        const double DistanceAGL_MIN = 0.0;
        typedef double DistanceAGL; // fractionDigits=3 minInclusive=0.0 units=Meter referenceFrame=AGL

        const double Effort_MIN = -100.0;
        const double Effort_MAX = 100.0;
        typedef double Effort; // fractionDigits=3 maxInclusive=100 minInclusive=-100 units=Percent referenceFrame=PlatformXYZ

        const double EnergyPercent_MIN = 0.0;
        const double EnergyPercent_MAX = 1000.0;
        typedef double EnergyPercent; // fractionDigits=3 maxInclusive=1000 minInclusive=0 units=Percent referenceFrame=Counting

        const double FrameRateFPS_MIN = 0.0;
        const double FrameRateFPS_MAX = 1000.0;
        typedef double FrameRateFPS; // fractionDigits=0 maxInclusive=1000 minInclusive=0 units=FramesPerSecond referenceFrame=Counting

        const long FrequencyRPM_MIN = -100000;
        const long FrequencyRPM_MAX =  100000;
        typedef long FrequencyRPM; // fractionDigits=0 maxInclusive=100000 minInclusive=-100000 units=RevolutionsPerMinute referenceFrame=Counting

        const double GammaAnglePropulsor_MIN = -3.1415926535897932;
        const double GammaAnglePropulsor_MAX =  3.1415926535897932;
        typedef double GammaAnglePropulsor; // fractionDigits=3 maxInclusive=3.1415926535897932 minInclusive=-3.1415926535897932 units=Radian referenceFrame=PropulsorXYZ

        const double HeadingCurrentDirection_MIN = -3.1415926535897932;
        const double HeadingCurrentDirection_MAX =  3.1415926535897932;
        typedef double HeadingCurrentDirection; // fractionDigits=3 maxInclusive=3.1415926535897932 minInclusive=-3.1415926535897932 units=Radian referenceFrame=CurrentDirection

        const double HeadingMagneticNorth_MIN = -3.1415926535897932;
        const double HeadingMagneticNorth_MAX =  3.1415926535897932;
        typedef double HeadingMagneticNorth; // fractionDigits=3 maxInclusive=3.1415926535897932 minInclusive=-3.1415926535897932 units=Radian referenceFrame=MagneticNorth

        const double HeadingWindDirection_MIN = -3.1415926535897932;
        const double HeadingWindDirection_MAX =  3.1415926535897932;
        typedef double HeadingWindDirection; // fractionDigits=3 maxInclusive=3.1415926535897932 minInclusive=-3.1415926535897932 units=Radian referenceFrame=WindDirection

        const double MassMetricTon_MIN = 0.0;
        const double MassMetricTon_MAX = 100000.0;
        typedef double MassMetricTon; // fractionDigits=3 maxInclusive=100000 minInclusive=0 units=MetricTon referenceFrame=Counting

        typedef double MassFlowRate; // fractionDigits=3 maxInclusive=N/A minInclusive=N/A units=KilogramsPerSecond referenceFrame=Counting

        const double MSLAltitude_MIN = 0.0;
        typedef double MSLAltitude; // fractionDigits=3 minInclusive=0.0 units=Meter referenceFrame=Altitude

        typedef BasicTypes::Quaternion OrientationQuaternion; // fractionDigits=6 maxInclusive=N/A minInclusive=N/A referenceFrame=Counting units=N/A

        const double PositiveCount_MIN = 1.0;
        const double PositiveCount_MAX = 2147483647.0;
        typedef double PositiveCount; // fractionDigits=0 maxInclusive=2147483647 minInclusive=1 units=N/A

        const double PressurePercent_MIN = 0.0;
        const double PressurePercent_MAX = 200.0;
        typedef double PressurePercent; // fractionDigits=3 maxInclusive=200 minInclusive=0 units=Percent referenceFrame=Counting

        const long Priority_MIN = 0;
        const long Priority_MAX =  255;
        typedef long Priority; // fractionDigits=0 maxInclusive=255 minInclusive=0

        const double PropellerPitchAnglePropulsor_MIN = -3.1415926535897932;
        const double PropellerPitchAnglePropulsor_MAX =  3.1415926535897932;
        typedef double PropellerPitchAnglePropulsor; // fractionDigits=3 maxInclusive=3.1415926535897932 minInclusive=-3.1415926535897932 units=Radian referenceFrame=PropulsorXYZ

        const double RhoAnglePropulsor_MIN = -3.1415926535897932;
        const double RhoAnglePropulsor_MAX =  3.1415926535897932;
        typedef double RhoAnglePropulsor; // fractionDigits=3 maxInclusive=3.1415926535897932 minInclusive=-3.1415926535897932 units=Radian referenceFrame=PropulsorXYZ

        typedef double Salinity; // fractionDigits=3 maxInclusive=N/A minInclusive=N/A units=GramsPerKilogram referenceFrame=LocalWaterMass

        const long SidesCount_MIN = 3;
        const long SidesCount_MAX =  255;
        typedef long SidesCount; // fractionDigits=0 maxInclusive=255 minInclusive=3 units=N/A

        const double SpeedBSL_MIN = -299792458.0;
        const double SpeedBSL_MAX = 299792458.0;
        typedef double SpeedBSL; // fractionDigits=3 maxInclusive=299792458 minInclusive=-299792458 units=MeterPerSecond referenceFrame=BSL

        const double SpeedLocalWaterMass_MIN = 0.0;
        const double SpeedLocalWaterMass_MAX = 299792458.0;
        typedef double SpeedLocalWaterMass; // fractionDigits=6 maxInclusive=299792458 minInclusive=0 units=MeterPerSecond referenceFrame=LocalWaterMass

        const double VolumeCubicMeter_MIN = 0.0;
        const double VolumeCubicMeter_MAX = 1000.0;
        typedef double VolumeCubicMeter; // fractionDigits=6 maxInclusive=1000 minInclusive=0 units=VolumeCubicMeter referenceFrame=Counting

        const double VolumePercent_MIN = 0.0;
        const double VolumePercent_MAX = 1000.0;
        typedef double VolumePercent; // fractionDigits=3 maxInclusive=1000 minInclusive=0 units=Percent referenceFrame=Counting

        const double VolumetricFlowRate_MIN = -100000000.0;
        const double VolumetricFlowRate_MAX = 100000000.0;
        typedef double VolumetricFlowRate; // fractionDigits=6 maxInclusive=100000000 minInclusive=-100000000 units=CubicMeterPerSecond referenceFrame=Counting

        const double WattHours_MIN = 0.0;
        const double WattHours_MAX = 900000.0;
        typedef double WattHours; // fractionDigits=6 maxInclusive=900000 minInclusive=0 units=WattHours


    };
  };
};

#endif // _LDM_MDE_REFINEMENTS_MEASUREMENTS_MEASUREMENTS

/**
 *
 * DISTRIBUTION STATEMENT A. Approved for public release. 
 * Distribution is unlimited.
 * This software was developed by the Department of the Navy,
 * NAVSEA Unmanned and Small Combatants. It is provided under the terms of
 * use found in the LICENSE file at the source code root directory.
 *
 */

/**
 *
 * This file was generated by the UxSDK+ tool. Please see
 * https://bitbucket.di2e.net/projects/UXSDK/repos/uxsdk
 * for more information
 *
 */

// WARNING: THIS CODE IS AUTO-GENERATED
//   DO NOT EDIT

/**
  *
  * Version: 5.2.1
  * MDE Version: 5.0.1
  *
  */

#ifndef _LDM_REFINEMENTS_MEASUREMENTS_MEASUREMENTS
#define _LDM_REFINEMENTS_MEASUREMENTS_MEASUREMENTS

#include "BasicTypes/Quaternion.idl"

module UMAA
{
  module Common
  {
    module Measurement
    {


        const double AccelerationScalar_MIN = -1310.68;
        const double AccelerationScalar_MAX =  1310.68;
        typedef double AccelerationScalar; // fractionDigits=3 maxInclusive=1310.68 minInclusive=-1310.68 units=MeterPerSecondSquared referenceFrame=Counting

        const double Angle_MIN = -3.1415926535897931264626433832795;
        const double Angle_MAX =  3.1415926535897932384626433832795;
        typedef double Angle; // fractionDigits=3 maxInclusive=3.1415926535897932384626433832795 minInclusive=-3.1415926535897931264626433832795 units=Radian referenceFrame=Counting

        const double AngleRate_MIN = -62.831;
        const double AngleRate_MAX =  62.831;
        typedef double AngleRate; // fractionDigits=3 maxInclusive=62.831 minInclusive=-62.831 units=RadianPerSecond referenceFrame=Counting

        const double AzimuthTrueNorthPosAngle_MIN = 0.0;
        const double AzimuthTrueNorthPosAngle_MAX =  6.28318530718;
        typedef double AzimuthTrueNorthPosAngle; // fractionDigits=3 maxInclusive=6.28318530718 minInclusive=0 units=Radian referenceFrame=TrueNorth

        const long CommsRateBitsPerSecond_MIN = 0;
        const long CommsRateBitsPerSecond_MAX =  65535000;
        typedef long CommsRateBitsPerSecond; // maxInclusive=65535000 minInclusive=0 units=BitsPerSecond referenceFrame=Counting fractionDigits=3

        const double CommsRateMegabitsPerSecond_MIN = 0.0;
        const double CommsRateMegabitsPerSecond_MAX = 1125000.0;
        typedef double CommsRateMegabitsPerSecond; // fractionDigits=3 maxInclusive=1125000 minInclusive=0 units=MegabitsPerSecond referenceFrame=Counting

        const long Count_MIN = -2147483648;
        const long Count_MAX =  2147483647;
        typedef long Count; // referenceFrame=Counting units=N/A minInclusive=-2147483648 maxInclusive=2147483647 fractionDigits=0

        const double CourseTrueNorth_MIN = -3.1415926535897932;
        const double CourseTrueNorth_MAX =  3.1415926535897932;
        typedef double CourseTrueNorth; // fractionDigits=3 maxInclusive=3.1415926535897932 minInclusive=-3.1415926535897932 units=Radian referenceFrame=TrueNorth

        typedef double CovarOrientation; // referenceFrame=Counting units=N/A fractionDigits=3

        typedef double CovarVelVel; // referenceFrame=Counting units=N/A fractionDigits=3
        typedef long long DateTimeSeconds; // seconds since epoch, range of long long
        typedef long DateTimeNanoseconds; // nanoseconds elapsed within current second, range 0-999999999 inclusive
        struct DateTime {
          DateTimeSeconds seconds;
          DateTimeNanoseconds nanoseconds;
        };


        const double Density_MIN = 0.0;
        const double Density_MAX =  300000000000000000;
        typedef double Density; // fractionDigits=3 maxInclusive=300000000000000000 minInclusive=0 units=KilogramPerCubicMeter referenceFrame=Counting

        const double Distance_MIN = 0.0;
        const double Distance_MAX = 401056000.0;
        typedef double Distance; // fractionDigits=3 maxInclusive=401056000 minInclusive=0 units=Meter referenceFrame=Counting

        const double DistancePrecise_MIN = 0.0;
        const double DistancePrecise_MAX = 401056000.0;
        typedef double DistancePrecise; // fractionDigits=6 maxInclusive=401056000 minInclusive=0 units=Meter referenceFrame=Counting

        const double DurationHours_MIN = 0.0;
        const double DurationHours_MAX = 10505.0;
        typedef double DurationHours; // fractionDigits=3 maxInclusive=10505 minInclusive=0 units=Hour referenceFrame=Counting

        const double DurationSeconds_MIN = 0.0;
        const double DurationSeconds_MAX = 37817280.0;
        typedef double DurationSeconds; // fractionDigits=6 maxInclusive=37817280 minInclusive=0 units=Seconds referenceFrame=Counting

        const double ElectricalPower_MIN = 0.0;
        const double ElectricalPower_MAX = 100000000.0;
        typedef double ElectricalPower; // fractionDigits=3 maxInclusive=100000000 minInclusive=0 units=Watt referenceFrame=None

        const double EngineSpeed_MIN = -100000.0;
        const double EngineSpeed_MAX = 100000.0;
        typedef double EngineSpeed; // referenceFrame=Counting units=RevolutionsPerMinute minInclusive=-100000 maxInclusive=100000 fractionDigits=0

        const double FieldOfViewLineOfSightFocalPlane_MIN = 0.0;
        const double FieldOfViewLineOfSightFocalPlane_MAX =  6.28318530718;
        typedef double FieldOfViewLineOfSightFocalPlane; // fractionDigits=3 maxInclusive=6.28318530718 minInclusive=0 units=Radian referenceFrame=LineOfSightFocalPlane

        const double FocusValue_MIN = 0.0;
        const double FocusValue_MAX = 100.0;
        typedef double FocusValue; // fractionDigits=3 maxInclusive=100 minInclusive=0 units=Percent referenceFrame=Counting

        const double Force_MIN = 0.0;
        const double Force_MAX = 100000000.0;
        typedef double Force; // fractionDigits=3 maxInclusive=100000000 minInclusive=0 units=Newton referenceFrame=Counting

        const double FrequencyHertz_MIN = 0.0;
        const double FrequencyHertz_MAX =  10000000000;
        typedef double FrequencyHertz; // fractionDigits=6 maxInclusive=10000000000 minInclusive=0.0 units=Hertz referenceFrame=Counting

        const double GroundSpeed_MIN = -299792458.0;
        const double GroundSpeed_MAX = 299792458.0;
        typedef double GroundSpeed; // fractionDigits=3 maxInclusive=299792458 minInclusive=-299792458 units=MeterPerSecond referenceFrame=TrueNorth

        const double HeadingTrueNorthAngle_MIN = -3.1415926535897932;
        const double HeadingTrueNorthAngle_MAX =  3.1415926535897932;
        typedef double HeadingTrueNorthAngle; // fractionDigits=3 maxInclusive=3.1415926535897932 minInclusive=-3.1415926535897932 units=Radian referenceFrame=TrueNorth

        const double IndicatedAirspeed_MIN = 0.0;
        const double IndicatedAirspeed_MAX = 299792458.0;
        typedef double IndicatedAirspeed; // fractionDigits=6 maxInclusive=299792458 minInclusive=0 units=MeterPerSecond referenceFrame=LocalAirMass

        const long IPPortCounting_MIN = 0;
        const long IPPortCounting_MAX =  65535;
        typedef long IPPortCounting; // maxInclusive=65535 minInclusive=0 units=N/A referenceFrame=Counting fractionDigits=0

        const double MagneticVariation_MIN = -3.1415926535897932;
        const double MagneticVariation_MAX =  3.1415926535897932;
        typedef double MagneticVariation; // fractionDigits=3 maxInclusive=3.1415926535897932 minInclusive=-3.1415926535897932 units=Radian referenceFrame=TrueNorth

        const double Mass_MIN = 0.0;
        const double Mass_MAX = 100000000.0;
        typedef double Mass; // fractionDigits=3 maxInclusive=100000000 minInclusive=0 units=Kilogram referenceFrame=Counting
        typedef octet NumericGUID[16];

        typedef long Order;


        const double Percent_MIN = 0.0;
        const double Percent_MAX = 1000.0;
        typedef double Percent; // fractionDigits=3 maxInclusive=1000 minInclusive=0 units=Percent referenceFrame=Counting

        const double PitchHalfAngle_MIN = -1.5707963267948966;
        const double PitchHalfAngle_MAX =  1.5707963267948966;
        typedef double PitchHalfAngle; // fractionDigits=3 maxInclusive=1.5707963267948966 minInclusive=-1.5707963267948966 units=Radian referenceFrame=PlatformNED

        const double PitchAcceleration_MIN = 0.0;
        const double PitchAcceleration_MAX = 10000.0;
        typedef double PitchAcceleration; // fractionDigits=3 maxInclusive=10000 minInclusive=0 units=RadianPerSecondSquared referenceFrame=Counting

        const double PitchRate_MIN = 0.0;
        const double PitchRate_MAX =  32.767;
        typedef double PitchRate; // fractionDigits=3 maxInclusive=32.767 minInclusive=0 units=RadianPerSecond referenceFrame=Counting

        const double PowerBusCurrent_MIN = -100000.0;
        const double PowerBusCurrent_MAX = 100000.0;
        typedef double PowerBusCurrent; // fractionDigits=3 maxInclusive=100000 minInclusive=-100000 units=Ampere referenceFrame=None

        const double PowerBusVoltage_MIN = -100000.0;
        const double PowerBusVoltage_MAX = 100000.0;
        typedef double PowerBusVoltage; // fractionDigits=3 maxInclusive=100000 minInclusive=-100000 units=Volt referenceFrame=None

        const double PressureKiloPascals_MIN = 0.0;
        const double PressureKiloPascals_MAX = 51200.0;
        typedef double PressureKiloPascals; // fractionDigits=3 maxInclusive=51200 minInclusive=0 units=KiloPascal referenceFrame=STP

        const double RadioFrequencyHertz_MIN = 0.0;
        const double RadioFrequencyHertz_MAX =  10000000000;
        typedef double RadioFrequencyHertz; // fractionDigits=6 maxInclusive=10000000000 minInclusive=0.0 units=Hertz referenceFrame=Counting

        const double RelativeAngle_MIN = -3.1415926535897932;
        const double RelativeAngle_MAX =  3.1415926535897932;
        typedef double RelativeAngle; // fractionDigits=3 maxInclusive=3.1415926535897932 minInclusive=-3.1415926535897932 units=Radian referenceFrame=Counting

        const double RelativeHumidity_MIN = 0.0;
        const double RelativeHumidity_MAX = 1000.0;
        typedef double RelativeHumidity; // fractionDigits=3 maxInclusive=1000 minInclusive=0 units=Percent referenceFrame=LocalAirMass

        const double RollAngle_MIN = -3.1415926535897932;
        const double RollAngle_MAX =  3.1415926535897932;
        typedef double RollAngle; // fractionDigits=3 maxInclusive=3.1415926535897932 minInclusive=-3.1415926535897932 units=Radian referenceFrame=PlatformNED

        const double RollAcceleration_MIN = 0.0;
        const double RollAcceleration_MAX = 10000.0;
        typedef double RollAcceleration; // fractionDigits=3 maxInclusive=10000 minInclusive=0 units=RadianPerSecondSquared referenceFrame=Counting

        typedef double RollRate; // fractionDigits=3 maxInclusive=N/A minInclusive=N/A units=RadianPerSecond referenceFrame=Counting

        const long SizeBytes_MIN = 0;
        const long SizeBytes_MAX =  1000000000;
        typedef long SizeBytes; // maxInclusive=1000000000 minInclusive=0 units=Byte referenceFrame=Counting fractionDigits=0

        const double SizeNumeral_MIN = -1000000000000;
        const double SizeNumeral_MAX =  1000000000000;
        typedef double SizeNumeral; // referenceFrame=Counting units=N/A minInclusive=-1000000000000 maxInclusive=1000000000000 fractionDigits=3

        const double Speed_MIN = 0.0;
        const double Speed_MAX = 299792458.0;
        typedef double Speed; // fractionDigits=6 maxInclusive=299792458 minInclusive=0 units=MeterPerSecond referenceFrame=Counting

        const double Temperature_MIN = -273.0;
        const double Temperature_MAX = 1000.0;
        typedef double Temperature; // fractionDigits=3 maxInclusive=1000 minInclusive=-273 units=Celsius referenceFrame=Counting

        const double TurnRate_MIN = 0.0;
        const double TurnRate_MAX =  32.767;
        typedef double TurnRate; // fractionDigits=3 maxInclusive=32.767 minInclusive=0 units=RadianPerSecondreference referenceFrame=Counting

        const double YawPosAngle_MIN = 0.0;
        const double YawPosAngle_MAX =  6.283185307179586364925286766559;
        typedef double YawPosAngle; // fractionDigits=3 maxInclusive=6.283185307179586364925286766559 minInclusive=0 units=Radian referenceFrame=PlatformNED

        typedef double YawAcceleration; // fractionDigits=3 maxInclusive=N/A minInclusive=N/A units=RadianPerSecondSquared referenceFrame=Counting

        typedef double YawRate; // fractionDigits=3 maxInclusive=N/A minInclusive=N/A units=RadianPerSecond referenceFrame=Counting


    };
  };
};

#endif // _LDM_REFINEMENTS_MEASUREMENTS_MEASUREMENTS
