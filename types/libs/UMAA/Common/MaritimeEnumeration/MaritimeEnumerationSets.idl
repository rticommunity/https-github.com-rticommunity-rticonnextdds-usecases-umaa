/**
 *
 * DISTRIBUTION STATEMENT A. Approved for public release. 
 * Distribution is unlimited.
 * This software was developed by the Department of the Navy,
 * NAVSEA Unmanned and Small Combatants. It is provided under the terms of
 * use found in the LICENSE file at the source code root directory.
 *
 */

/**
 *
 * This file was generated by the UxSDK+ tool. Please see
 * https://bitbucket.di2e.net/projects/UXSDK/repos/uxsdk
 * for more information
 *
 */

// WARNING: THIS CODE IS AUTO-GENERATED
//   DO NOT EDIT

/**
  *
  * Version: 5.2.1
  * MDE Version: 5.0.1
  *
  */

#ifndef _LDM_MDE_REFINEMENTS_ENUMERATIONSETS_MARITIMEENUMERATIONSETS
#define _LDM_MDE_REFINEMENTS_ENUMERATIONSETS_MARITIMEENUMERATIONSETS

#include "BasicTypes/Quaternion.idl"

//@copy-c #undef ERROR
//@copy-c #undef VARIABLE_PITCH
//@copy-c #undef DELETE
//@copy-c #undef PLATFORM

module UMAA
{
  module Common
  {
    module MaritimeEnumeration
    {


        module AnalogSensorErrorCodeEnumModule
        {
          enum AnalogSensorErrorCodeEnumType
          {
              INVALID_FORMAT, // Invalid format
              UNKNOWN_ERROR_FAULT, // Unknown error fault
              UNKNOWN_SENSOR_ID // Unknown sensor ID
          };
        };

        module AnchorActionEnumModule
        {
          enum AnchorActionEnumType
          {
              LOWER, // Lower the anchor.
              RAISE, // Raise the anchor.
              STOP // Stop anchor from lowering or raising.
          };
        };

        module AnchorKindEnumModule
        {
          enum AnchorKindEnumType
          {
              COMMERCIAL_STOCKLESS, // Anchor type is commercial stockless.
              DANFORTH, // Anchor type is danforth.
              FOUR_FLUKE, // Anchor type is four-fluke.
              GENERAL, // Anchor type is general.
              LIGHTWEIGHT, // Anchor type is lightweight.
              MARK_2_LWT, // Anchor type is mark 2 lightweight.
              MARK_2_STOCKLESS, // Anchor type is mark 2 stockless.
              MUSHROOM, // Anchor type is mushroom.
              NAVY_TYPE_STOCK, // Anchor type is navy type stock.
              NONMAGNETIC, // Anchor type is nonmagnetic.
              STANDARD_NAVY_STOCKLESS, // Anchor type is standard navy stockless.
              TWO_FLUKE_BALANCED_FLUKE, // Anchor type is two-fluke balanced fluke.
              WEDGE_BLOCK_LWT // Anchor type is wedge block lightweight.
          };
        };

        module AnchorLocationEnumModule
        {
          enum AnchorLocationEnumType
          {
              BOWER, // A bower anchor is carried on the bow.
              KEEL, // A keel anchor is housed within the hull neer the keel.
              STERN // A stern anchor is carried on the stern.
          };
        };

        module AnchorRodeEnumModule
        {
          enum AnchorRodeEnumType
          {
              CHAIN, // Chain
              ROPE // Rope
          };
        };

        module AnchorStateEnumModule
        {
          enum AnchorStateEnumType
          {
              DEPLOYED, // Anchor is deployed.
              LOWERING, // Anchor is lowering.
              RAISING, // Anchor is raising.
              STOPPED, // Anchor is neither DEPLOYED nor STOWED, but is not in the process of LOWERING or RAISING.
              STOWED // Anchor is stowed.
          };
        };

        module AudioEncodingQualityEnumModule
        {
          enum AudioEncodingQualityEnumType
          {
              AVERAGE, // Average
              BEST, // Best
              BETTER, // Better
              GOOD, // Good
              LESS, // Less
              POOR, // Poor
              WORST // Worst
          };
        };

        module BearingAngleEnumModule
        {
          enum BearingAngleEnumType
          {
              NORTH, // Angle is relative to true north
              OWNSHIP // Angle is relative to ownship
          };
        };

        module BilgeControlEnumModule
        {
          enum BilgeControlEnumType
          {
              AUTO, // Bilge will automatically be turned on by the service when flood is detected in its responsible area
              OFF, // Off
              ON // On
          };
        };

        module BilgeStateEnumModule
        {
          enum BilgeStateEnumType
          {
              FAULT, // Fault
              OFF, // Off
              ON // On
          };
        };

        module BitDepthEnumModule
        {
          enum BitDepthEnumType
          {
              EIGHT_BITS, // 8 bit
              FIFTY_SIX_BITS, // 56 bit
              FOURTEEN_BITS, // 14 bit
              FOURTY_BITS, // 40 bit
              FOURTY_EIGHT_BITS, // 48 bit
              SIXTEEN_BITS, // 16 bit
              SIXTY_FOUR_BITS, // 64 bit
              TEN_BITS, // 10 bit
              THIRTY_TWO_BITS, // 32 bit
              TWELVE_BITS, // 12 bit
              TWENTY_BITS, // 20 bit
              TWENTY_FOUR_BITS // 24 bit
          };
        };

        module BlastConditionEnumModule
        {
          enum BlastConditionEnumType
          {
              BLASTING, // Vehicle whistle, bell, or gong is currently blasting
              RESTING // vehicle whistle, bell, or gong is currently resting
          };
        };

        module BlastKindEnumModule
        {
          enum BlastKindEnumType
          {
              LONG_BLAST, // Long blast, four to six seconds
              SHORT_BLAST // Short blast, about one second duration
          };
        };

        module BufferPurgeOptionEnumModule
        {
          enum BufferPurgeOptionEnumType
          {
              DROP_LOWEST_PRIORITY, // Drop lowest priority message on the buffer.
              DROP_MOST_RECENT, // Drop newest message on the buffer.
              DROP_OLDEST // Drop oldest message on the buffer.
          };
        };

        module CollisionAvoidStateEnumModule
        {
          enum CollisionAvoidStateEnumType
          {
              DEVIATE_FROM_PATH, // Deviate from path to avoid collisions
              DO_NOTHING, // Do nothing
              STOP_ON_PATH // Stop on path
          };
        };

        module CollisionAvoidStatusEnumModule
        {
          enum CollisionAvoidStatusEnumType
          {
              ACTIVE_AVOID_OBSTACLE, // Active, avoid obstacle
              ACTIVE_STOP_ON_OBSTACLE, // Active, stop on obstacle
              DISABLED, // Disabled
              ENABLED // Enabled
          };
        };

        module COLREGSClassificationEnumModule
        {
          enum COLREGSClassificationEnumType
          {
              ANCHORED, // The vehicle is currently anchored.
              CONSTRAINED_BY_DRAUGHT, // The vehicle is limited in its navigational capabilities by its draught.
              FISHING, // The term vehicle engaged in fishing means any vehicle fishing with nets, lines, trawls, or other fishing apparatus which restricts maneuverability, but does not include a vehicle fishing with trolling lines or other fishing apparatus which do not restrict maneuverability.
              NON_VESSEL, // This value refers to contacts that are determined to be not vehicles (buoy, land, etc) where COLREGS does not apply.
              NOT_UNDER_COMMAND, // The term vehicle not under command means a vehicle which, through some exceptional circumstance, is unable to maneuver as required by these Rules and is therefore unable to keep out of the way of another vehicle.
              POWER_DRIVEN_UNDERWAY, // The term power-driven vehicle means any vehicle propelled by machinery.
              PUSHING, // The vehicle is engaged in a pushing operation such as severely restricts the pushing vehicle and her push in their ability to deviate from their course.
              RESTRICTED_IN_ABILITY_TO_MANUEVER, // The term vehicle restricted in her ability to maneuver means a vehicle which, from the nature of her work, is restricted in her ability to maneuver as required by these Rules and is therefore unable to keep out of the way of another vehicle.
              SAILING, // The term sailing vehicle means any vehicle under sail provided that propelling machinery, if fitted, is not being used.
              TOWING // The vehicle is engaged in a towing operation such as severely restricts the towing vehicle and her tow in their ability to deviate from their course.
          };
        };

        module CommandStatusReasonEnumModule
        {
          enum CommandStatusReasonEnumType
          {
              CANCELED, // Indicates a transition to the CANCELED state when the command is canceled successfully.
              INTERRUPTED, // Indicates a transition to the FAILED state when the command has been interrupted by a higher priority process.
              OBJECTIVE_FAILED, // Indicates a transition to the FAILED state when the commanded resource is unable to achieve the command's objective due to external factors.
              RESOURCE_FAILED, // Indicates a transition to the FAILED state when the commanded resource is unable to achieve the command's objective due to resource or platform failure.
              RESOURCE_REJECTED, // Indicates a transition to the FAILED state when the commanded resource rejects the command for some reason.
              SERVICE_FAILED, // Indicates a transition to the FAILED state when the commanded resource is unable to achieve the command's objective due to processing failure.
              SUCCEEDED, // Indicates the conditions to proceed to this state have been met and a normal state transition has occurred.
              TIMEOUT, // Indicates a transition to the FAILED state when the command is not acknowledged within some defined time bound.
              UPDATED, // Indicates a transition back to the ISSUED state from a non-terminal state when the command has been updated.
              VALIDATION_FAILED // Indicates a transition to the FAILED state when the command contains missing, out-of-bounds, or otherwise invalid parameters.
          };
        };

        module CommsChannelOperationalStatusEnumModule
        {
          enum CommsChannelOperationalStatusEnumType
          {
              OFF, // The comms channel is off.
              ON, // The comms channel is on.
              OPERATIONAL // The comms channel is operational.
          };
        };

        module ContactManeuverInfluenceEnumModule
        {
          enum ContactManeuverInfluenceEnumType
          {
              BEING_OVERTAKEN_COMPLIANT, // COLREGS being overtaken where the other vehicle is determined to be compliant
              BEING_OVERTAKEN_NONCOMPLIANT, // COLREGS being overtaken where the other vehicle is determined to be non-compliant
              COLLISION_AVOIDANCE, // Maneuvering to avoid a dynamic obstacle
              CROSSING_LEFT_COMPLIANT, // COLREGS crossing left where the other vehicle is determined to be compliant
              CROSSING_LEFT_NONCOMPLIANT, // COLREGS crossing left where the other vehicle is determined to be non-compliant
              CROSSING_RIGHT_COMPLIANT, // COLREGS crossing right where the other vehicle is determined to be compliant
              CROSSING_RIGHT_NONCOMPLIANT, // COLREGS crossing right where the other vehicle is determined to be non-compliant
              GUIDE, // Contact is guiding or informing maneuvering (e.g., guide vehicle for Stationkeep, cooperating swarm member)
              HEAD_ON_COMPLIANT, // COLREGS head on where the other vehicle is determined to be compliant
              HEAD_ON_NONCOMPLIANT, // COLREGS head on where the other vehicle is determined to be non-compliant
              IN_EXTREMIS, // Determined in a situation where collision can no longer be avoided by one ship acting alone
              NONE, // The contact has been examined and it was determined it has no influence on the maneuvering
              OBSTACLE_AVOIDANCE, // Maneuvering to avoid a static obstacle
              OVERTAKING_COMPLIANT, // COLREGS overtaking where the other vehicle is determined to be compliant
              OVERTAKING_NONCOMPLIANT, // COLREGS overtaking where the other vehicle is determined to be non-compliant
              PREEMPTIVE // Maneuvering to avoid a perceived future state but not in direct response to configured obstacle avoidance thresholds
          };
        };

        module ContingencyBehaviorEnumModule
        {
          enum ContingencyBehaviorEnumType
          {
              CONTINUE, // Continue the mission
              FINISH, // Finish the mission
              _HOME, // Return to home
              LOITER, // Loiter
              NONE, // None
              VEHICLE_SPECIFIC // None of the above (specific to the vehicle)
          };
        };

        module CoordinateSystemEnumModule
        {
          enum CoordinateSystemEnumType
          {
              SENSOR_COORDINATE_SYSTEM, // Sensor relative coordinate system
              VEHICLE_COORDINATE_SYSTEM // Vehicle relative coordinate system
          };
        };

        module CoordinationSituationalSignalEnumModule
        {
          enum CoordinationSituationalSignalEnumType
          {
              AGREE_TO_BE_OVERTAKEN, // Agree to be overtaken signal active status.
              ALTERING_COURSE_TO_PORT, // Turning to port signal active status.
              ALTERING_COURSE_TO_STARBOARD, // Turning to starboard signal active status.
              BLIND_BEND_SIGNAL, // Blind bend signal active status.
              DANGER_SIGNAL, // Danger signal active status.
              IN_DISTRESS_NEED_ASSISTANCE, // In distress need assistance signal active status.
              NONE, // No signal active.
              OPERATING_ASTERN_PROPULSION, // Operating astern propulsion signal active status.
              TO_OVERTAKE_LEAVE_VESSEL_TO_PORT, // To overtake, leave vessel to port signal active status.
              TO_OVERTAKE_LEAVE_VESSEL_TO_STARBOARD, // To overtake, leave vessel to starboard signal active status.
              VESSEL_LEAVING_DOCK, // Vessel leaving dock signal active status.
              VISIBILITY_RESTRICTED_VEHICLE_STOPPED, // Visibility restricted with vehicle stopped signal active status.
              VISIBILITY_RESTRICTED_VEHICLE_UNDERWAY // Visibility restricted with vehicle underway signal active status.
          };
        };

        module CoreStateEnumModule
        {
          enum CoreStateEnumType
          {
              EMERGENCY, // Emergency
              FAILURE, // Failure
              INITIAL, // Initial
              READY, // Ready
              RESET, // Reset
              RESUME, // Resume
              SHUTDOWN, // Shutdown
              STANDBY // Standby
          };
        };

        module DigitalAudioFormatEnumModule
        {
          enum DigitalAudioFormatEnumType
          {
              AAC_MPEG2, // AAC_MPEG2
              AAC_MPEG4, // AAC_MPEG4
              AIFF, // AIFF
              ALAC, // ALAC
              DOLBY_DIGITAL, // DolbyDigital
              DTS, // DTS
              FLAC, // FLAC
              LPCM_PCM, // LPCM_PCM
              MP2, // MP2
              MP3, // MP3
              REAL_AUDIO, // RealAudio
              SPEEX, // Speex
              TRUE_AUDIO, // TrueAudio
              ULAW, // uLaw (from DigitalAudioAnnunciator service)
              VORBIS, // VORBIS
              WAV, // WAV
              WMA, // WMA
              WMA9_LOSS_LESS // WMA9_LOSSLESS
          };
        };

        module DigitalSensorErrorCodeEnumModule
        {
          enum DigitalSensorErrorCodeEnumType
          {
              INVALID_FORMAT, // Invalid format
              INVALID_FRAME_SIZE, // Invalid frame size
              INVALID_MAX_BIT_RATE, // Invalid maximum bit rate
              INVALID_MAX_FRAME_RATE, // Invalid maximum frame rate
              INVALID_MIN_BIT_RATE, // Invalid minimum bit rate
              INVALID_MIN_FRAME_RATE, // Invalid minimum frame rate
              MULTIPLE_INVALID_PARAMETERS, // Multiple invalid parameters
              UNKNOWN_ERROR_FAULT, // Unknown error fault
              UNKNOWN_SENSOR_ID // Unknown sensor ID
          };
        };

        module DirectionModeEnumModule
        {
          enum DirectionModeEnumType
          {
              COURSE, // Specifies that direction is the course of the vehicle
              HEADING // Specifies that direction is the heading of the vehicle
          };
        };

        module DomainEnumModule
        {
          enum DomainEnumType
          {
              AIR, // Air
              GROUND, // Surface, ground
              SURFACE, // Surface, water
              UNDERSEA // Undersea
          };
        };

        module EngineKindEnumModule
        {
          enum EngineKindEnumType
          {
              DIESEL, // A diesel engine.
              GAS // A gas engine.
          };
        };

        module ErrorCodeEnumModule
        {
          enum ErrorCodeEnumType
          {
              ACTUATOR, // Actuator
              FILESYS, // File system
              NONE, // None
              POWER, // Power
              PROCESSOR, // Processor
              RAM, // RAM
              ROM, // ROM
              SENSOR, // Sensor
              SOFTWARE // Software
          };
        };

        module ErrorConditionEnumModule
        {
          enum ErrorConditionEnumType
          {
              ERROR, // An error condition is reported and expected to seriously compromise use of the reporting component or device.
              FAIL, // An error condition is reported with severity indicating component or device failure.
              INFO, // An error condition is reported, but impact on operation and performance is minimal.
              NONE, // No error condition exists.
              WARN // An error condition is reported and expected to have significant impact on component or device performance.
          };
        };

        module ExposureModeEnumModule
        {
          enum ExposureModeEnumType
          {
              APETURE_PRIORITY, // Manual aperture, automatic shutter speed
              AUTO_DEFAULT, // Auto default
              MANUAL, // Manual
              SHUTTER_PRIORITY // Manual shutter speed, automatic aperture
          };
        };

        module FrameSizeEnumModule
        {
          enum FrameSizeEnumType
          {
              CGA_320x200, // CGA_320x200
              CIF_1408x1152, // CIF_1408x1152
              CIF_352x288, // CIF_352x288
              CIF_704x576, // CIF_704x576
              EGA_640x350, // EGA_640x350
              HD1080_1920x1080, // HD1080_1920x1080
              HD480_852x480, // HD480_852x480
              HD720_1280x720, // HD720_1280x720
              HSXGA_5120x4096, // HSXGA_5120x4096
              QCIF_176x144, // QCIF_176x144
              QQVGA_160x120, // QQVGA_160x120
              QSXGA_2560x2048, // QSXGA_2560x2048
              QVGA_320x240, // QVGA_320x240
              QXGA_2048x1536, // QXGA_2048x1536
              SQCIF_128x96, // SQCIF_128x96
              SVGA_800x600, // SVGA_800x600
              SXGA_1280x1024, // SXGA_1280x1024
              UXGA_1600x1200, // UXGA_1600x1200
              VGA_640x480, // VGA_640x480
              WHSXGA_6400x4096, // WHSXGA_6400x4096
              WHUXGA_7680x4800, // WHUXGA_7680x4800
              WOXGA_2560x1600, // WOXGA_2560x1600
              WQSXGA_3200x2048, // WQSXGA_3200x2048
              WQUXGA_3840x2400, // WQUXGA_3840x2400
              WSXGA_1600x1024, // WSXGA_1600x1024
              WUXGA_1920x1200, // WUXGA_1920x1200
              WVGA_852x480, // WVGA_852x480
              WXGA_1366x768, // WXGA_1366x768
              XGA_1024x768 // XGA_1024x768
          };
        };

        module GPSConstellationEnumModule
        {
          enum GPSConstellationEnumType
          {
              BEIDOU, // The Beidou constellation.
              GALILEO, // The Galileo constellation.
              GLONASS, // The Glonass constellation.
              GPS, // The GPS constellation.
              IRNSS, // The IRNSS constellation.
              QZSS, // The QZSS constellation.
              SBAS, // The SBAS constellation.
              UNKNOWN // An unknown constellation.
          };
        };

        module GPSFixEnumModule
        {
          enum GPSFixEnumType
          {
              INITIATING, // Initiating GPS Fix
              PERFORMING, // Performing GPS Fix
              STABLE // Stable GPS Fix
          };
        };

        module GPSNavigationSolutionEnumModule
        {
          enum GPSNavigationSolutionEnumType
          {
              GPS_1, // GPS 1
              GPS_2, // GPS 2
              GPS_2D, // GPS 2D
              GPS_3, // GPS 3
              GPS_3D, // GPS 3D
              GPS_4, // GPS 4
              GPS_DEAD_RECK, // GPS dead reckoning
              NO_NAV // No navigation information
          };
        };

        module GuardedTeleoperationStatusEnumModule
        {
          enum GuardedTeleoperationStatusEnumType
          {
              ACTIVE_AVOID_OBSTACLE, // Vehicle has deviated from path to avoid obstacle
              ACTIVE_STOP_ON_OBSTACLE, // Vehicle has stopped on path due to an obstacle
              DISABLED, // Disabled
              ENABLED, // Enabled but not active
              PITCHOVER_LIMIT, // Vehicle has stopped because pitchover limit was reached
              ROLLOVER_LIMIT // Vehicle has stopped because rollover limit was reached
          };
        };

        module H264EncodingEnumModule
        {
          enum H264EncodingEnumType
          {
              BASELINE, // Baseline
              CAVLC444, // CAVLC 444
              CONSTRAINED_BASELINE, // Constrained baseline
              CONSTRAINED_HIGH, // Constrained high
              EXTENDED, // Extended
              HIGH, // High
              HIGH10, // High 10
              HIGH10_INTRA, // High 10 Intra
              HIGH422, // High 422
              HIGH422_INTRA, // High 422 Intra
              HIGH444_INTRA, // High 444 Intra
              HIGH444_PREDICTIVE, // High 444 predictive
              MAIN, // Main
              MULTIVIEW_HIGH, // Multiview high
              PROGRESSIVE_HIGH, // Progressive high
              SCALABLE_BASELINE, // Scalable baseline
              SCALABLE_CONSTRAINED_BASELINE, // Scalable constrained baseline
              SCALABLE_CONSTRAINED_HIGH, // Scalable constrained high
              SCALABLE_HIGH, // Scalable high
              SCALABLE_HIGH_INTRA, // Scalable high intra
              STEREO_HIGH // Stereo high
          };
        };

        module H264PresetEnumModule
        {
          enum H264PresetEnumType
          {
              BEST_QUALITY, // Best quality
              DRIVE_VISION, // Drive vision
              LOW_LATENCY, // Low latency
              MANIPULATION, // Manipulation
              PERSISTENT_STARE, // Persistent stare
              PROGRAM_SPECIFIC_1, // Program Specific 1
              PROGRAM_SPECIFIC_2, // Program Specific 2
              PROGRAM_SPECIFIC_3, // Program Specific 3
              PROGRAM_SPECIFIC_4, // Program Specific 4
              SLOW_COMMS // Slow comms
          };
        };

        module HandoverResultEnumModule
        {
          enum HandoverResultEnumType
          {
              DEFERRED, // Control handover deferred temporarily by current controller
              DENIED, // Control handover denied by current controller
              GRANTED, // Control handover granted by current controller
              INSUFFICIENT_AUTHORITY, // Control transfer requestor had insufficient authority to take control from current controller
              NOT_AVAILABLE, // Vehicle is unavailable for control handover
              TIMEOUT // Control handover timed out because current controller did not respond in the allotted time
          };
        };

        module HeadingReferenceEnumModule
        {
          enum HeadingReferenceEnumType
          {
              CURRENT_DIRECTION, // Angle is relative to current direction
              MAGNETIC_NORTH, // Angle is relative to magnetic north
              TRUE_NORTH, // Angle is relative to true north
              WIND_DIRECTION // Angle is relative to wind direction
          };
        };

        module HeadingSectorKindEnumModule
        {
          enum HeadingSectorKindEnumType
          {
              KEEP_IN, // The heading sector kind is keep in.
              KEEP_OUT // The heading sector kind is keep out.
          };
        };

        module HoverKindEnumModule
        {
          enum HoverKindEnumType
          {
              LAT_LON_PRIORITY, // Prioritize maintaining a latitude/longitude position
              Z_PRIORITY // Prioritize maintaining an elevation
          };
        };

        module IgnitionControlEnumModule
        {
          enum IgnitionControlEnumType
          {
              OFF, // Stop the engine.
              RUN // Run the engine.
          };
        };

        module IgnitionStateEnumModule
        {
          enum IgnitionStateEnumType
          {
              OFF, // The engine is off.
              RUN, // The engine is running.
              START // The engine is starting.
          };
        };

        module ImageFormatEnumModule
        {
          enum ImageFormatEnumType
          {
              BMP, // BMP
              CR2_RAW, // CR2 (Canon RAW)
              DNG, // DNG (Adobe RAW)
              GIF, // GIF
              JPEG, // JPEG (default)
              NEF, // NEF (Nikon RAW)
              PGM, // PGM
              PNG, // PNG
              PNM, // PNM
              PPM, // PPM
              TIFF // TIFF
          };
        };

        module ImagingModeEnumModule
        {
          enum ImagingModeEnumType
          {
              COLOR, // Default color mode
              GREYSCALE, // Greyscale
              INFRARED, // Infrared
              LOWLIGHT // Lowlight
          };
        };

        module InertialSensorCmdEnumModule
        {
          enum InertialSensorCmdEnumType
          {
              BEST_ALIGN, // Align using the best technique as determined by the inertial sensor
              GPS_ALIGN, // Align using a GPS position feed. This is the standard alignment method.
              INIT, // Initializing state for the INU. This command is also used to restart or stop a running alignment.
              SNAP_ALIGN, // Alignment is forced using parameters directly given as input starting values to the inertial sensor
              STATIONARY_ALIGN, // Align assuming a zero velocity for the system.
              TRANSFER_ALIGN // Align using non-GPS position source. Typically used when GPS is not available. For example, aligning in a torpedo tube with position fed from the host vessel.
          };
        };

        module InertialSensorOpStatusEnumModule
        {
          enum InertialSensorOpStatusEnumType
          {
              BEST_ALIGNMENT_FAILURE, // Failure during self-determined best alignment
              COARSE_BEST_ALIGNMENT, // Coarse self-determined best alignment
              COARSE_GPS_ALIGNMENT, // Coarse GPS alignment
              COARSE_STATIONARY_ALIGNMENT, // Coarse stationary alignment
              COARSE_TRANSFER_ALIGNMENT, // Coarse transfer alignment
              FINE_BEST_ALIGNMENT_COMPLETE, // Fine self-determined best alignment complete
              FINE_BEST_ALIGNMENT_STARTED, // Fine self-determined best alignment started
              FINE_GPS_ALIGNMENT_COMPLETE, // Fine GPS alignment complete
              FINE_GPS_ALIGNMENT_STARTED, // Fine GPS alignment started
              FINE_STATIONARY_ALIGNMENT_COMPLETE, // Fine stationary alignment complete
              FINE_STATIONARY_ALIGNMENT_STARTED, // Fine stationary alignment started
              FINE_TRANSFER_ALIGNMENT_COMPLETE, // Fine transfer alignment complete
              FINE_TRANSFER_ALIGNMENT_STARTED, // Fine transfer alignment started
              GPS_ALIGNMENT_FAILURE, // Failure during a GPS alignment
              INERTIAL_SENSOR_FAILURE, // Inertial sensor failure
              INIT, // Initializing
              SNAP_ALIGNMENT_COMPLETE, // Snap alignment complete
              SNAP_ALIGNMENT_FAILURE, // Failure during snap alignment
              STATIONARY_ALIGNMENT_FAILURE, // Failure during stationary alignment
              TRANSFER_ALIGNMENT_FAILURE // Failure during transfer alignment
          };
        };

        module LightSensitivityEnumModule
        {
          enum LightSensitivityEnumType
          {
              AUTO_DEFAULT, // Auto default
              ISO_100, // ISO 100
              ISO_1600, // ISO 1600
              ISO_200, // ISO 200
              ISO_3200, // ISO 3200
              ISO_400, // ISO 400
              ISO_800 // ISO 800
          };
        };

        module LogLevelEnumModule
        {
          enum LogLevelEnumType
          {
              ERROR, // An error message level.
              INFORMATION, // An informational message level.
              WARNING // A warning message level.
          };
        };

        module LostCommsStatusEnumModule
        {
          enum LostCommsStatusEnumType
          {
              ACTIVE, // Active
              DISABLED, // Disabled
              ENABLED // Enabled
          };
        };

        module MastActionEnumModule
        {
          enum MastActionEnumType
          {
              LOWER, // set to lower the mast down
              RAISE, // set to raise the mast up
              STOP // set to stop the mast
          };
        };

        module MastStateEnumModule
        {
          enum MastStateEnumType
          {
              DOWN, // set when the mast is down
              MOVING_DOWN, // set when the mast is moving down
              MOVING_UP, // set when the mast is moving up
              STOPPED, // set when the mast is not in motion, but between fully up and fully down
              UP // set when the mast is up
          };
        };

        module CommandStatusEnumModule
        {
          enum CommandStatusEnumType
          {
              CANCELED, // The command was canceled by the requestor before the command completed successfully.
              COMMANDED, // The command has been placed in the resource's command queue but has not yet been accepted.
              COMPLETED, // The command has been completed successfully.
              EXECUTING, // The command is being performed by the resource and has not yet been completed.
              FAILED, // The command has been attempted, but was not successful.
              ISSUED // The command has been issued to the resource (typically a sensor or streaming device), but processing has not yet commenced.
          };
        };

        module DataEncodingEnumModule
        {
          enum DataEncodingEnumType
          {
              AVI, // AVI
              H_261, // H.261
              H_262, // H.262
              H_263, // H.263
              H_263PLUS, // H.263 Plus
              H_264, // H.264
              MJPEG, // MJPEG
              MPEG_1, // MPEG-1
              MPEG_2, // MPEG-2
              MPEG_4, // MPEG-4
              NONE // None
          };
        };

        module TaskControlEnumModule
        {
          enum TaskControlEnumType
          {
              ALLOCATE, // Allocate the mission plan, mission task, or mission objective.
              ALLOCATION_APPROVED, // Approve the allocation of the mission plan, mission task, or mission objective.
              ALLOCATION_NOT_APPROVED, // Reject the allocation of the mission plan, mission task, or mission objective.
              CANCEL, // Cancel the mission plan, mission task, or mission objective.
              EXECUTION_APPROVED, // Approve the execution of the mission plan, mission task, or mission objective.
              EXECUTION_NOT_APPROVED, // Reject the execution of the mission plan, mission task, or mission objective.
              PAUSE, // Pause the execution of the approved mission plan, mission task, or mission objective.
              PLAN, // Plan the allocated mission plan, mission task, or mission objective.
              PLAN_APPROVED, // Approve the planning of the mission plan, mission task, or mission objective.
              PLAN_NOT_APPROVED, // Reject the planning of the mission plan, mission task, or mission objective.
              QUEUE, // Queue the mission plan, mission task, or mission objective for execution.
              RESUME, // Resume the execution of the mission plan, mission task, or mission objective.
              VALIDATE // Validate the mission plan, mission task, or mission objective.
          };
        };

        module TaskStateEnumModule
        {
          enum TaskStateEnumType
          {
              ALLOCATED, // The mission plan, a mission task, or mission objective has been allocated and approval has been granted.
              ALLOCATED_PENDING_APPROVAL, // The mission plan, mission task, or mission objective allocation has been completed and approval is pending.
              ALLOCATING, // The mission plan, mission task, or mission objective is currently being allocated. The allocation has not completed.
              AWAITING_EXECUTION_APPROVAL, // The mission plan, mission task, or mission objective is awaiting execution approval.
              AWAITING_MISSION_PLAN, // The initial state when there is no mission plan reported.
              CANCELED, // The mission plan, mission task, or mission objective has been cancelled.
              CANCELING, // The mission plan, mission task, or mission objective is in the process of being cancelled.
              COMPLETED, // The mission plan, mission task, or mission objective been completed. Collection tasks are considered complete when the resulting product is processed and disseminated. All other tasks are complete once the vehicle transitions from the executing state (vehicle releases weapon, stops jamming, etc.).
              DROPPED, // The mission plan, mission task, or mission objective has been dropped and is subject for reallocation within the UxS node.
              EXECUTING, // The mission plan, mission task, or mission objective has begun execution (slews sensor and begins collect, begins to prepare weapons for release, starts jamming, etc.). This state defines the point of no return for a mission plan, mission task, or mission objective. Once transitioning to this state, the mission plan, mission task, or mission objective can no longer be reallocated to another UxS or vehicle unless it transitions to the FAILED state.
              EXECUTION_APPROVED, // The mission plan, mission task, or mission objective been approved for execution.
              FAILED, // The mission plan, mission task, or mission objective has failed. The UxS node has determined that no vehicles within the UxS can achieve the mission plan, mission task, or mission objective.
              NOT_PLANNED, // The mission plan, mission task, or mission objective has not been planned.
              NOT_QUEUED, // The mission plan, mission task, or mission objective has not been queued for execution.
              NOT_VALIDATED, // The mission plan, mission task, or mission objective has not been validated.
              PAUSED, // Used to pause the execution of an approved mission plan, approved mission task, or approved mission objective.
              PAUSING, // The mission plan, mission task, or mission objective is in the process of being paused.
              PLANNED, // The mission plan, mission task, or mission objective has been planned, indicating that it is part of an approved and active detailed mission plan.
              PLANNED_PENDING_APPROVAL, // The mission plan, mission task, or mission objective is pending approval.
              PLANNING, // The mission plan, mission task, or mission objective is still in the planning state.
              PROPOSED, // The mission plan, mission task, or mission objective has been proposed to an allocation service.
              QUEUED, // The mission plan, mission task, or mission objective has been queued for execution.
              QUEUING, // The mission plan, mission task, or mission objective is being queued (e.g., uploading to vehicle) for execution
              RESUMING, // The mission plan, mission task, or mission objective is in the process of being resumed.
              UNALLOCATED, // The mission plan, mission task, or mission objective has been unallocated. The mission plan, mission task, or mission objective could not be allocated to a system, or it has just been created.
              VALIDATED, // The mission plan, mission task, or mission objective has been validated.
              VALIDATING // The mission plan, mission task, or mission objective is in the process of being validated.
          };
        };

        module TransportEncodingEnumModule
        {
          enum TransportEncodingEnumType
          {
              MP4, // MPEG-4
              MPEG_2, // MPEG-2
              OTHER // Unspecified or unknown format
          };
        };

        module MeteringModeEnumModule
        {
          enum MeteringModeEnumType
          {
              AUTO_DEFAULT, // Auto default
              CENTER_WEIGHTED, // Center weighted
              SPOT // Spot
          };
        };

        module NavigationRulesEnumModule
        {
          enum NavigationRulesEnumType
          {
              INLAND, // The vehicle is operating upon the inland waters of the United States or on the Canadian waters of the Great Lakes (See Navigation Rules and Regulations Handbook)
              INTERNATIONAL // The vehicle is operating upon any waters outside of established navigational lines of demarcation (See Navigation Rules and Regulations Handbook)
          };
        };

        module NavigationSolutionEnumModule
        {
          enum NavigationSolutionEnumType
          {
              ESTIMATED, // Estimated
              GROUND_TRUTH, // Ground Truth
              MEASURED // Measured
          };
        };

        module ObstacleAvoidanceEnumModule
        {
          enum ObstacleAvoidanceEnumType
          {
              DEVIATE_FROM_PATH, // Deviate from path to avoid obstacle
              DO_NOTHING, // Do not try to avoid obstacle
              STOP_ON_PATH // Stop on path before hitting obstacle
          };
        };

        module PathWayEnumModule
        {
          enum PathWayEnumType
          {
              HISTORICAL_GLOBAL, // Historical global path
              HISTORICAL_LOCAL, // Historical local path
              PLANNED_GLOBAL, // Planned global path
              PLANNED_LOCAL // Planned local path
          };
        };

        module PlatformModeEnumModule
        {
          enum PlatformModeEnumType
          {
              MAINTENANCE, // Maintenance
              STANDARD_OPERATING, // Standard_Operating
              TRAINING // Training
          };
        };

        module PlatformModeTransitionEnumModule
        {
          enum PlatformModeTransitionEnumType
          {
              ACTIVE, // Active
              EXITING, // Exiting
              INITIALIZING // Initializing
          };
        };

        module PowerPlantStateEnumModule
        {
          enum PowerPlantStateEnumType
          {
              FAULT, // Faulted
              OFF, // Off
              ON // On
          };
        };

        module PumpStateEnumModule
        {
          enum PumpStateEnumType
          {
              FAULT, // Faulted
              OFF, // Off
              ON_FORWARD, // Running forward direction
              ON_REVERSE // Running reverse direction
          };
        };

        module RangeErrorCodeEnumModule
        {
          enum RangeErrorCodeEnumType
          {
              INVALID_HORIZONTAL_FOV, // Invalid horizontal FOV
              INVALID_SENSOR_RANGE, // Invalid sensor range
              INVALID_SENSOR_STATE, // Invalid sensor state
              INVALID_UPDATE_RATE, // Invalid update rate
              INVALID_VERTICAL_FOV, // Invalid vertical FOV
              MULTIPLE_INVALID_PARAMETERS, // Multiple invalid parameters
              UNKNOWN_ERROR_FAULT, // Unknown error fault
              UNKNOWN_SENSOR_ID // Unknown sensor ID
          };
        };

        module ReferenceFrameOriginEnumModule
        {
          enum ReferenceFrameOriginEnumType
          {
              BOW_WATERLINE_INTERSECTION, // Bow Waterline Intersection.
              CENTER_OF_BUOYANCY, // Center of buoyancy.
              CENTER_OF_GRAVITY, // Center of gravity.
              INS_LOCATION, // INS Location
              KEEL_TRANSOM_INTERSECTION // Keel transom intersection
          };
        };

        module RenderUselessStateEnumModule
        {
          enum RenderUselessStateEnumType
          {
              NORMAL, // Normal
              RENDERED_USELESS, // Rendered Useless
              RENDERED_USELESS_FAILED // Render Useless Failed
          };
        };

        module SourceIndicatorEnumModule
        {
          enum SourceIndicatorEnumType
          {
              ACTUAL, // Source of data is actual sensor data.
              GROUND_TRUTH, // Source of data is ground truth.
              SIMULATED, // Source of data is simulated sensor data.
              TENTATIVE // Source of data is tentative sensor data.
          };
        };

        module SpecialManeuverIndicatorEnumModule
        {
          enum SpecialManeuverIndicatorEnumType
          {
              ENGAGED, // The vessel is engaged in a special maneuver.
              NOT_AVAILABLE, // The contact source is explicitly reporting that the special maneuver indicator is not available.
              NOT_ENGAGED, // The vessel is not engaged in a special maneuver.
              NOT_PROVIDED // The contact source is not able to determine this information.
          };
        };

        module StillImageErrorCodeEnumModule
        {
          enum StillImageErrorCodeEnumType
          {
              INVALID_FORMAT, // Invalid format
              INVALID_FRAME_SIZE, // Invalid frame size
              MULTIPLE_INVALID_PARAMETERS, // Multiple invalid parameters
              UNKNOWN_ERROR_FAULT, // Unknown error fault
              UNKNOWN_SENSOR_ID // Unknown sensor ID
          };
        };

        module StreamStateEnumModule
        {
          enum StreamStateEnumType
          {
              PAUSE, // Paused
              PLAY, // Playing
              STOP // Stopped
          };
        };

        module TamperDetectionStateEnumModule
        {
          enum TamperDetectionStateEnumType
          {
              ALWAYS_ENABLED_OR_CLEAR, // ALWAYS_ENABLED for reporting data; CLEAR for clearing the previous activities
              DISABLED, // Disabled
              ENABLED // Enabled
          };
        };

        module TFOMEnumModule
        {
          enum TFOMEnumType
          {
              TFOM_1, // less than or equal to 1 nanosecond
              TFOM_2, // greater than 1 nanosecond and less than or equal to 10 nanoseconds
              TFOM_3, // greater than 10 nanoseconds and less than or equal to 100 nanoseconds
              TFOM_4, // greater than 100 nanoseconds and less than or equal to 1 microsecond
              TFOM_5, // greater than 1 microsecond and less than or equal to 10 microseconds
              TFOM_6, // greater than 10 microseconds and less than or equal to 100 microseconds
              TFOM_7, // greater than 100 microseconds and less than or equal to 1 millisecond
              TFOM_8, // greater than 1 millisecond and less than or equal to 10 milliseconds
              TFOM_9 // greater than 10 milliseconds
          };
        };

        module TrackCategoryEnumModule
        {
          enum TrackCategoryEnumType
          {
              ADS_B_DIRECTIONAL_AIR, // Definition to be defined
              ADS_B_DIRECTIONAL_SURFACE, // Definition to be defined
              ADS_B_NONDIRECTIONAL_AIR, // Definition to be defined
              ADS_B_NONDIRECTIONAL_SURFACE, // Definition to be defined
              AIR, // Air
              ASW, // Definition to be defined
              EMERGENCY, // Emergency
              EW, // Definition to be defined
              LAND_POINT, // Land Point
              LAND_TRACK, // Land Track
              MP_AREA, // Definition to be defined
              MP_LINE, // Definition to be defined
              NA, // Definition to be defined
              NO_STATEMENT, // Definition to be defined
              POINTER, // Definition to be defined
              REF_POINT, // Definition to be defined
              SP_AREA, // Definition to be defined
              SPACE, // Space
              SUB_SURFACE, // Below the surface
              SURFACE // Surface
          };
        };

        module TrackIdentityEnumModule
        {
          enum TrackIdentityEnumType
          {
              ASSUMED_FRIEND, // A track which is assumed to be a friend because of its characteristics, behavior, or origin
              FAKER, // A friendly track acting as a "suspect" track for exercise purposes only
              FRIEND, // A track belonging to a declared friendly nation
              HOSTILE, // A track which is eligible to be engaged
              JOKER, // A friendly track acting as a "hostile" track for exercise purposes only
              NEUTRAL, // A track whose characteristics, behavior, origin, or nationality indicate that it is neither supporting nor opposing friendly forces
              PENDING, // A track for which identification is to be determined
              SUSPECT, // A track which is potentially hostile because of its characteristics, behavior, origin or nationality
              UNKNOWN // An evaluated track which has not been identified
          };
        };

        module VehicleSituationalSignalEnumModule
        {
          enum VehicleSituationalSignalEnumType
          {
              ENGAGED_IN_MINE_CLEARANCE_OPERATIONS, // Engaged in mine clearance operations signal active status.
              MANEUVERABILITY_RESTRICTED, // Maneuverability restricted signal active status.
              TOWING_ALONGSIDE_OR_PUSHING_AHEAD, // Towing and pushing alongside or ahead signal active status.
              VEHICLE_AGROUND, // Aground signal active status.
              VEHICLE_ANCHORED, // Anchored signal active status.
              VEHICLE_BEING_PUSHED_AHEAD_OR_TOWED_ALONGSIDE, // Vehicle being pushed ahead or towed alongside signal active status.
              VEHICLE_BEING_TOWED_ASTERN, // Vehicle being towed astern signal active status.
              VEHICLE_CONSTRAINED_BY_HER_DRAFT, // Constrained by her draft signal active status.
              VEHICLE_NOT_UNDER_CONTROL, // Not under control signal active status.
              VEHICLE_TOWING_ASTERN_GREATER_THAN_200_M, // Towing greater than 200M astern active status.
              VEHICLE_TOWING_ASTERN_LESS_THAN_200_M, // Towing less than 200M astern active status.
              VEHICLE_UNDERWAY // Underway signal active status.
          };
        };

        module VehicleSpeedModeEnumModule
        {
          enum VehicleSpeedModeEnumType
          {
              LRC, // Long Range Cruise. A speed that optimizes time, distance and fuel consumption for a vehicle (definition of "optimized" is subjective. Example: for a planing hull, this is usually the minimum planing speed, even though lower speeds can achieve longer endurance or range.)
              MEC, // Maximum Endurance Cruise. The speed that maximizes the time a vehicle can travel.
              MRC, // Maximum Range Cruise. The speed that maximizes the distance a vehicle can travel.
              SLOW, // Slow speed. Minimum speed at which the vehicle can operate (definition of "operate" is subjective. Example: minimum speed to achieve maneuverability, engine idle speed/gear clutched in "idle ahead", etc.)
              VEHICLE_SPECIFIC // Preset speed for the vehicle, that is in the range of speeds for the subject vehicle
          };
        };

        module VehicleSpeedReferenceEnumModule
        {
          enum VehicleSpeedReferenceEnumType
          {
              OTHER, // Other
              RPM, // RPM
              SPEED_OVER_GROUND, // Speed relative to ground
              SPEED_THROUGH_AIR, // Air speed
              SPEED_THROUGH_WATER // Speed relative to surrounding water
          };
        };

        module VideoFormatEnumModule
        {
          enum VideoFormatEnumType
          {
              NTSCJ, // NTSC-J
              NTSCM, // NTSC-M (default)
              PALM, // PAL-M
              PALN, // PAL-N
              SECAMBG, // SECAM-B/G
              SECAML // SECAM-L
          };
        };

        module VisualClassificationEnumModule
        {
          enum VisualClassificationEnumType
          {
              AID_TO_NAVIGATION_CHANNEL_MARKER, // A channel marker used as an aid to navigation.
              AID_TO_NAVIGATION_GENERAL, // A general aid to navigation.
              AID_TO_NAVIGATION_LARGE_BUOY, // A large buoy used as an aid to navigation.
              AID_TO_NAVIGATION_LIGHTHOUSE, // A lighthouse used as an aid to navigation.
              AID_TO_NAVIGATION_SMALL_BUOY, // A small buoy used as an aid to navigation.
              LARGE_GENERAL_OBSTACLE, // A large general obstacle.
              LARGE_VESSEL_CARGO, // A large cargo vehicle.
              LARGE_VESSEL_GENERAL, // A large general vehicle.
              LARGE_VESSEL_MILITARY, // A large military vehicle.
              LARGE_VESSEL_OTHER, // A large vehicle that does not fit into other LARGE_VESSEL categories.
              LARGE_VESSEL_PASSENGER, // A large passenger vehicle.
              MEDIUM_VESSEL_FISHING, // A fishing vehicle.
              MEDIUM_VESSEL_GENERAL, // A medium general vehicle.
              MEDIUM_VESSEL_MILITARY, // A medium military vehicle.
              MEDIUM_VESSEL_OTHER, // A medium vehicle that does not fit into other MEDIUM_VESSEL categories.
              MEDIUM_VESSEL_TUG, // A tug vehicle.
              MEDIUM_VESSEL_TUG_IN_TOW, // A tug vehicle towing another vehicle.
              MEDIUM_VESSEL_YACHT, // A yacht.
              SAILBOAT, // A sailboat.
              SMALL_GENERAL_OBSTACLE, // A small general obstacle.
              SMALL_VESSEL_GENERAL, // A small general vehicle.
              SMALL_VESSEL_JET_SKI, // A jet ski.
              SMALL_VESSEL_MILITARY, // A small military vehicle.
              SMALL_VESSEL_OTHER, // A small vehicle that does not fit into other SMALL_VESSEL categories
              SMALL_VESSEL_POWER_BOAT // A power boat.
          };
        };

        module WaterTurnDirectionEnumModule
        {
          enum WaterTurnDirectionEnumType
          {
              LEFT_TURN, // The vehicle will make left turns.
              RIGHT_TURN // The vehicle will make right turns.
          };
        };

        module WhiteBalanceEnumModule
        {
          enum WhiteBalanceEnumType
          {
              AUTO_DEFAULT, // Auto default
              CLOUDY, // Cloudy
              DAYLIGHT, // Daylight
              FLASH, // Flash
              FLUORESCENT, // Fluorescent
              SHADE, // Shade
              TUNGSTEN // Tungsten
          };
        };

        module ZoneKindEnumModule
        {
          enum ZoneKindEnumType
          {
              AREA_OF_INTEREST, // Defines a zone that should be covered by the vehicle's sensors and contains something interesting (e.g. a contact).
              KEEP_IN, // Defines a zone that the vehicle is required to keep in.
              KEEP_OUT // Defines a zone that the vehicle is required to keep out.
          };
        };

        module ZoomModeEnumModule
        {
          enum ZoomModeEnumType
          {
              ANALOG_ONLY, // Analog zoom only
              DIGITAL_ONLY, // Digital zoom only
              MIXED_DEFAULT, // System default mixture of analog and digital zoom
              OFF // No zoom
          };
        };


    };
  };
};

#endif // _LDM_MDE_REFINEMENTS_ENUMERATIONSETS_MARITIMEENUMERATIONSETS
