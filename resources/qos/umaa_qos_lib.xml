<?xml version="1.0"?>

<!-- 
(c) Copyright, Real-Time Innovations, 2024.  All rights reserved.
RTI grants Licensee a license to use, modify, compile, and create derivative
works of the software solely for use with RTI Connext DDS. Licensee may
redistribute copies of the software provided that all such copies are subject
to this license. The software is provided "as is", with no warranty of any
type, including any warranty for fitness for any purpose. RTI is under no
obligation to maintain or support the software. RTI shall not be liable for
any incidental or consequential damages arising out of the use or inability
to use the software.
-->

<dds xsi:noNamespaceSchemaLocation="http://community.rti.com/schema/current/rti_dds_profiles.xsd"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

    <!-- QOS Library -->
    <qos_library name="umaa_qos_lib">

        <!-- This can control logging verbosity of all apps using this file. Comment out if
        undesired. -->
        <qos_profile name="xml_logger" is_default_participant_factory_profile="true">
            <participant_factory_qos>

                <!-- Control logging verbosity here -->
                <logging>
                    <verbosity>ERROR</verbosity>
                    <category>ALL</category>
                    <print_format>DEBUG</print_format>
                    <output_file></output_file>
                </logging>
            </participant_factory_qos>
        </qos_profile>

        <qos_profile name="default_participant">
            <domain_participant_qos>

                <!-- Default transport is UDPv4 | SHMEM, uncomment to disable SHMEM and have all
                data go over loopback-->
                <!-- <transport_builtin>
                    <mask>UDPv4</mask>
                </transport_builtin> -->

                <!-- Uncomment to enable Monitoring Libraries. 
                 Ensure NNDSHOME variable is set. Be aware of resource impact-->
                <!--<property>
                    <value>
                         <element>
                            <name>rti.monitor.library</name>
                            <value>rtimonitoring</value>
                        </element>
                        <element>
                            <name>rti.monitor.create_function</name>
                            <value>RTIDefaultMonitor_create</value>
                        </element> 
                    </value>
                </property>-->

                <resource_limits>
                    <!-- Default is 8192 UMAA has large type objects. Set to 0 if you don't want any
                    to propagate. Needs to be increased for larger types i.e. GlobalVectorCommand = 20,476 -->
                    <type_object_max_serialized_length>30000</type_object_max_serialized_length>

                    <!-- Default is 256. Increase for GUIDS etc -->
                    <contentfilter_property_max_length>512</contentfilter_property_max_length>
                </resource_limits>

                <discovery_config>
                    <!-- This is to make Type propagation asynchronous due to large Type Objects -->
                    <publication_writer_publish_mode>
                        <kind>ASYNCHRONOUS_PUBLISH_MODE_QOS</kind>
                    </publication_writer_publish_mode>
                    <subscription_writer_publish_mode>
                        <kind>ASYNCHRONOUS_PUBLISH_MODE_QOS</kind>
                    </subscription_writer_publish_mode>
                </discovery_config>

            </domain_participant_qos>
        </qos_profile>

        <!-- 
            This is where we create our QOS profiles and inherit from a Builtin QOS Profile.

            We identify the Builtin QOS profile to use by associating the likely data patterns.

            We can then use the "topic_filter" tag to automatically assign the desired QOS as needed per
        suffix.

            NOTE: Currently there are no official required UMAA QOS settings. 
            You would need to synchronize QOS with the other party you are communicating with. 
            The below is just for reference of the simplest mechanisms/best practices to implement.
        -->

        <qos_profile name="periodic_best_effort_qos"
            base_name="BuiltinQosLib::Pattern.PeriodicData">

            <!--  Reliability: BEST EFFORT
            Durability: VOLATILE
            Liveliness: INF
            Deadline: DW (4), DR(10) -->

            <!-- This profile is intended for Periodic status/report data -->

            <datawriter_qos>
                <history>
                    <!-- KEEP_LAST ensures older data will get overwritten. 
                     Depth: 10 = Cache/Buffer. Default: 100 -->
                    <kind>KEEP_LAST_HISTORY_QOS</kind>
                    <depth>10</depth>
                </history>

                <!-- This can spin up a separate thread if needed to send out samples asynchronously as UMAA
                messages tend to be large. -->
                <!-- <publish_mode>
                    <kind>ASYNCHRONOUS_PUBLISH_MODE_QOS</kind>
                    <flow_controller_name>DDS_FIXED_RATE_FLOW_CONTROLLER_NAME</flow_controller_name>
                </publish_mode> -->
            </datawriter_qos>

            <datareader_qos>

                <!-- KEEP_LAST ensures older data will get overwritten. 
                 Depth: 10 = Cache/Buffer. Default: 100 -->
                <history>
                    <kind>KEEP_LAST_HISTORY_QOS</kind>
                    <depth>10</depth>
                </history>

            </datareader_qos>
        </qos_profile>

        <qos_profile name="aperiodic_durable_reliable_qos"
            base_name="BuiltinQosLib::Pattern.LastValueCache">
            <!-- This QOS profile is intended for aperiodic messages that we need to ensure get
            delivered. -->

            <!--  Reliability: RELIABLE
            Durability: TRANSIENT LOCAL
            History: KEEP LAST
            Depth: 1
            Liveliness: INF
            Deadline: INF -->

            <datawriter_qos>

                <!-- This spins up a separate thread to send out samples asynchronously -->
                <publish_mode>
                    <kind>ASYNCHRONOUS_PUBLISH_MODE_QOS</kind>
                    <flow_controller_name>DDS_FIXED_RATE_FLOW_CONTROLLER_NAME</flow_controller_name>
                </publish_mode>

            </datawriter_qos>

        </qos_profile>

        <qos_profile name="aperiodic_non_durable_reliable_qos"
            base_name="BuiltinQosLib::Pattern.ReliableStreaming">
            <!-- This QOS profile is intended for aperiodic messages that we need to ensure get
            delivered. -->

            <!--  Reliability: RELIABLE
            Durability: TRANSIENT
            History: KEEP LAST
            Depth: 100
            Liveliness: INF
            Deadline: INF -->

            <datawriter_qos>

                <!-- This can spin up a separate thread to send out samples asynchronously -->
                <!-- <publish_mode>
                    <kind>ASYNCHRONOUS_PUBLISH_MODE_QOS</kind>
                    <flow_controller_name>DDS_FIXED_RATE_FLOW_CONTROLLER_NAME</flow_controller_name>
                </publish_mode> -->

            </datawriter_qos>

        </qos_profile>

        <qos_profile name="topic_qos_assign">

            <!-- We can use Topic suffixes to automatically assign QOS using the "topic_filter" tag.

             All the datawriters/datareaders defined in the <domain_participant> sections are assigned to this.
             Then depending on their suffix the selected QOS will be applied.

             These filters could be refined further based on the behavior of data going over the Topics -->

            <datawriter_qos topic_filter="*CommandType"
                base_name="aperiodic_durable_reliable_qos" />
            <datareader_qos topic_filter="*CommandType"
                base_name="aperiodic_durable_reliable_qos" />

            <datawriter_qos topic_filter="*CommandStatusType"
                base_name="aperiodic_durable_reliable_qos" />
            <datareader_qos topic_filter="*CommandStatusType"
                base_name="aperiodic_durable_reliable_qos" />

            <datawriter_qos topic_filter="*ReportType"
                base_name="periodic_best_effort_qos" />
            <datareader_qos topic_filter="*ReportType"
                base_name="periodic_best_effort_qos" />

            <datawriter_qos topic_filter="*SetElement"
                base_name="aperiodic_non_durable_reliable_qos" />
            <datareader_qos topic_filter="*SetElement"
                base_name="aperiodic_non_durable_reliable_qos" />

            <datawriter_qos topic_filter="*ListElement"
                base_name="aperiodic_non_durable_reliable_qos" />
            <datareader_qos topic_filter="*ListElement"
                base_name="aperiodic_non_durable_reliable_qos" />

        </qos_profile>

    </qos_library>

</dds>